/*** Created by pkarcher on 12/12/2014.*/
'use strict';

//var medicomp = medicomp || require('./index');
var medicomp = medicomp || {};
medicomp.Socket = require('./medcinSocket');
medicomp.SocketBuffer = require('./medcinSocketBuffer');
medicomp.ResultBuffer = require('./medcinResultBuffer');
medicomp.ResponseItem = require('./medcinResponseItem');
medicomp.Cache = require('./medcinCache');
medicomp.Configuration = require('./configuration.js');

var ParamType = require('./internalEnums').ParamTypes;
var ErrorCode = require('./internalEnums').ErrorCodes;
var Globals = require('./internalEnums').Globals;

var Q = require ('q');
var ServerCode = require('./ServerCodes');

var AnswerType = {
  STRING : 0,
  SHORT : 1,
  INT : 2,
  DOUBLE : 3,
  BYTE_ARRAY : 4,
  RESPONSE_BUFFER_ITSELF : 5,
  FINDING_LIST : 6
};

var Connection = function MedcinConnection(config, callbackFunction) {

  this.lastError = null;

  var historyBuffer = null;

  var thisConnection = this;
  var medcinCache;
  var socket;
  var weAreCurrentlyTryingToGetAConnection = true;
  config = config || new medicomp.Configuration();
  config.version = config.version || (new medicomp.Configuration()).version;
//  var version =  config.version; // || (new medicomp.Configuration()).version;  // in case they passed in a config without a version.
//  var onTheFlyVersion = (new medicomp.Configuration()).version;

  var lastItemId = 0;
  var lastTranscribeItem = '';
  var lastTextType = 'S0';
  var lastLingo = 'D0';
  var lastGroupNumber = 0;
  var lastGroupName = '';

  initialize();

  function initialize() {

    var deferred = Q.defer();
    socket = new medicomp.Socket(config, function (err) {
      weAreCurrentlyTryingToGetAConnection = false;
      if (err) {
        var ourErr;
          ourErr = new Error('Could not connect to ' + config.host + ':' + config.port +
          '.  Net.Socket returned \'' + err + '\'');
          ourErr.code = ErrorCode.NoConnectionConnectFailed;
        ourErr.inner = err;
        thisConnection.lastError = errorToJSON(ourErr);
//        thisConnection.lastError = ourErr;
        deferred.reject(ourErr);
      }
      else {
        // first thing when the connection is there is we'll register

        var clientId = config.clientType || Globals.ClientId;  // Yep, hardcoding it right here.  They can pass in an override.

        sendDataWithNoReply(ServerCode.RegisterClient, null,
          function(b) {
            b.pushShort(Globals.ClientBuild + Globals.ClientMinor + clientId, 'whatRegisterAndClientId');
            b.pushInt(config.version.revision4, 'version.revision4');
//            b.pushShort(15, 'version.minor2');
            b.pushShort(config.version.minor2, 'version.minor2');
          }
        )
        .then(function() {
            return thisConnection.getMedcinVersion();
          }, function(err) {
            deferred.reject(err);  // Not really possible to get here, should take it out maybe.
          }
        ).then(function(data) {
//            weGotAConnectionAndAreCurrentlyTryingToGetVersion = false;
            thisConnection.serverVersion = data;
            deferred.resolve(thisConnection); // data isn't actually used.
          }, function(err) {

            var ourErr = new Error('Medcin Server was found and accessed, but connection terminated during version ' +
              'confirmation.  Version \'' + config.version.full + '\' was communicated to the server.  It\'s possible ' +
              'this version is incompatible with the server version.');
              ourErr.code = ErrorCode.NoConnectionProbablyBadVersion;
            ourErr.inner = err;
//            thisConnection.lastError = err;
            thisConnection.lastError = errorToJSON(err);
            deferred.reject(ourErr);

            console.log('taco');
            deferred.reject(err);
          }
        );

      }
    });

    deferred.promise.nodeify(callbackFunction);
    thisConnection.connectionPromise = deferred.promise;
    thisConnection.socket = socket;


  }


  //private methods

  this.getConfiguration = function() {
    return config;
  };

  //deprecated.  Doesn't exist in .NET client, so never should have put it here.
  Object.defineProperty(this, 'isConnected', { get: function() {
    return socket.isConnected;
  }});


  function checkHistPacket (flushIt) {
    if (historyBuffer === null) {
      historyBuffer = new medicomp.SocketBuffer(ServerCode.HistPacket);
    }

    if (historyBuffer.bufferArray.length > 1000 || flushIt) {
      historyBuffer.pushInt(ServerCode.HistPacket, 'server_id');
      thisConnection.socket.setUpBuffer(historyBuffer);
      thisConnection.socket.sendBufferContents();
//      if (flushIt) {
        historyBuffer = null;
//      } else {
//        historyBuffer = new medicomp.SocketBuffer(ServerCode.HistPacket);
//      }
    }
  }

  function sendBufferedHistoryData (methodId, callbackFunction, additionalBufferActions) {

    thisConnection.lastError = null;
    if (checkForSeveralErrors(callbackFunction, methodId)) {
      return constructAppropriateError(callbackFunction, methodId);
    }

    try {
      var deferred = Q.defer();

      checkHistPacket(false);

      historyBuffer.resetValidator();
      additionalBufferActions(historyBuffer);

      setImmediate(function() {
        if(typeof callbackFunction === 'function'){
          callbackFunction(null, true);
        }
        deferred.resolve(true);
      });

      return deferred.promise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction);
    }

  }

  function sendDataWithNoReply (methodId, callbackFunction, additionalBufferActions) {

    thisConnection.lastError = null;
    if (checkForSeveralErrors(callbackFunction, methodId)) {
        return constructAppropriateError(callbackFunction, methodId);
    }

    try {
      var deferred = Q.defer();
      var buf = new medicomp.SocketBuffer(methodId);
      if (additionalBufferActions !== undefined) {
        additionalBufferActions(buf);
      }
      socket.setUpBuffer(buf);

      socket.sendBufferContents();

      setImmediate(function() {
        if(typeof callbackFunction === 'function'){
          callbackFunction(null, true);
        }
        deferred.resolve(true);
      });

      return deferred.promise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction);
    }
  }

  function obtainCacheValue(medcinId, methodId, propertyName, callbackFunction) {

    thisConnection.lastError = null;
    if (checkForSeveralErrors(callbackFunction, methodId)) {
        return constructAppropriateError(callbackFunction, methodId);
    }

    var when = false;

    try {

      var deferred = Q.defer();

      medcinCache = medcinCache || new medicomp.Cache(thisConnection);

      var cacheValuePromise = medcinCache.getPropertyValuesPromise(medcinId);

      cacheValuePromise.then(function(cacheValues) {
          when = true;
          thisConnection.lastError = null;
          deferred.resolve(cacheValues[propertyName]);
          if (callbackFunction !== undefined) {
              callbackFunction(null, cacheValues[propertyName]);
          }
        }, function(err) {
          var ourErr = new Error('(Property Cache) Socket error calling to ' + config.host + ':' + config.port +
          '.  Net.Socket returned \'' + err + '\'');
          ourErr.inner = err;
          thisConnection.lastError = errorToJSON(ourErr);
//          thisConnection.lastError = ourErr;
          deferred.reject(ourErr);
          if (callbackFunction !== undefined) {
              callbackFunction(ourErr, null);
          }
        }
      );

      return deferred.promise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction, when);
    }

  }

  function obtainSingleValue(methodId, answerType, callbackFunction, additionalBufferActions) {

    thisConnection.lastError = null;
    if (checkForSeveralErrors(callbackFunction, methodId, answerType)) {
        return constructAppropriateError(callbackFunction, methodId, answerType);
    }

    var when = false;

    try {

      var deferred = Q.defer();
      var returnValue;
      var buf = new medicomp.SocketBuffer(methodId);
      if (additionalBufferActions !== undefined) {
        additionalBufferActions(buf);
      }
      socket.setUpBuffer(buf);

      socket.sendBufferContents(function(err, data) {
        if (err) {
          var ourErr = new Error('Socket error calling to ' + config.host + ':' + config.port +
          '.  Net.Socket returned "' + err + '"');
          ourErr.inner = err;
          thisConnection.lastError = errorToJSON(ourErr);
//          thisConnection.lastError = ourErr;
          deferred.reject(ourErr);
        }
        else {
          when = true;
          switch (answerType) {
            case(AnswerType.STRING):
              returnValue = data.popString();
              break;
            case(AnswerType.SHORT):
              returnValue = data.popShort();
              break;
            case(AnswerType.INT):
              returnValue = data.popInt();
              break;
            case(AnswerType.DOUBLE):
              returnValue = data.popDouble();
              break;
            case(AnswerType.BYTE_ARRAY):
              data.popInt(); // first 4 bytes are trash
              returnValue = data.theStraightBytes();
              break;
            case(AnswerType.RESPONSE_BUFFER_ITSELF):
              returnValue = data;
              break;
            case(AnswerType.FINDING_LIST):
              returnValue = createArrayOfResponseItems(data);
              break;
            default :
              throw ('AnswerType of ' + answerType + ' not recognized.');
              //return createGeneralAsyncError(new Error('symbol answer type ' + answerType + ' not recognized.'),
              //  callbackFunction, true);
            }

          thisConnection.lastError = null;
          deferred.resolve(returnValue);

          }

        });

      deferred.promise.nodeify(callbackFunction);
      return deferred.promise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction, when);
    }

  }


  function createArrayOfResponseItems(response) {

    var resultArray = [];

    var responseServerCode = response.popShort();
    if (responseServerCode !== ServerCode.MedcinCallBack) {
        throw new Error('Activation Unpack Error: response does not have ServerCode.MedcinCallBack');
    }

    response.popInt(); // getting the length out of the way

    var nextMedcinId = response.popInt();

    while (nextMedcinId) {

      var concept = new medicomp.ResponseItem();
      concept.medcinId = nextMedcinId;
      concept.prefix = response.popString();
      concept.modifier = response.popString();
      concept.status = response.popString();
      concept.result = response.popString();
      concept.nodeKey = response.popString();
      concept.description = response.popString();
      concept.termType = response.popShort();
      concept.flags = response.popShort();
      concept.gpFlags = response.popShort();
      concept.itemFlags = response.popInt();
      concept.subs = response.popString();
      concept.varData = response.popString();

      resultArray.push(concept);

      responseServerCode = response.popShort();
      if (responseServerCode !== ServerCode.MedcinCallBack) {
          throw new Error('Activation Unpack Error: response does not have ServerCode.MedcinCallBack');
      }
      response.popInt(); // getting the length out of the way
      nextMedcinId = response.popInt();

    }

    return resultArray;

  }

  function obtainValueFromMedcinId(medcinId, methodId, answerType, callbackFunction) {
      return obtainSingleValue(methodId, answerType, callbackFunction,
        function(b) {
          b.pushInt(medcinId, 'medcinId');
        });
  }

  function checkForSeveralErrors(callbackFunction, methodId, answerType) {
    return checkForOrConstructAppropriateError(callbackFunction, methodId, answerType, true);
  }

  function constructAppropriateError(callbackFunction, methodId, answerType) {
    return checkForOrConstructAppropriateError(callbackFunction, methodId, answerType, false);
  }

  function checkForOrConstructAppropriateError(callbackFunction, methodId, answerType, justChecking) {
    if (getCallbackParameterErrorIfAppropriate(callbackFunction, justChecking)){ // this one should remain first
      return getCallbackParameterErrorIfAppropriate(callbackFunction, justChecking);
    }
    if (!thisConnection.isConnected) {
      if (justChecking) {return true;}
      return createAintNoConnectionError(methodId, callbackFunction);
    }
    if (methodId !== parseInt(methodId)) {
      return packageAsyncError('Invalid methodId parameter:  ' + methodId, callbackFunction);
    }
    if (answerType && answerType !== parseInt(answerType)) {
      return packageAsyncError('Invalid answerType: ' + answerType, callbackFunction);
    }

    return null;
  }



  function createAintNoConnectionError(methodId, callbackFunction) {
    var thisError;
    if (thisConnection.lastError && ErrorCode.NoConnectionMisTimed === thisConnection.lastError.code) { // if nc1, it's this error, so we just use existing error
      thisError = thisConnection.lastError;
    } else {
      if (weAreCurrentlyTryingToGetAConnection) {
        thisError = new Error ('Socket method call (methodId ' + methodId +
        ') was attempted before the initial connection attempt was finished.  Use the Medicomp.Connection ' +
        'constructor\'s callback function or parameter or returned Promise object to trigger socket method calls.' );
        thisError.code = ErrorCode.NoConnectionMisTimed;
      } else {
        thisError = new Error('Cannot call socket method ' + methodId + '; there is no valid connection to the ' +
        'medcin server.  Initial attempt to connect was unsuccessful.');

        //if (thisConnection.lastError !== null && ErrorCode.NoConnectionConnectFailed === thisConnection.lastError.code)
        //  thisError.inner = thisConnection.lastError.code;
        //else
        //  thisError.inner = thisConnection.lastError.inner;
        if (thisConnection.lastError !== null) {
          thisError.inner = ErrorCode.NoConnectionConnectFailed === thisConnection.lastError.code ?
            thisConnection.lastError.inner : thisConnection.lastError;
        }
        thisError.code = ErrorCode.NoConnectionConnectFailed;
      }
    }
    return packageAsyncError(thisError, callbackFunction);
  }

  function getCallbackParameterErrorIfAppropriate(callbackToAnalyze, justChecking) {
    // returns null if the callback parameter is kosher, a error promise if it's not.

    if (callbackToAnalyze === undefined || typeof callbackToAnalyze === 'function' || callbackToAnalyze === null) {
      return null;
    } else {
      if (justChecking) {
        return true;
      } else {
        var err = new Error('A callback parameter was given, but is of type ' + typeof callbackToAnalyze +
        ' rather than "function".  That will cause problems.  It can be undefined or function, but not ' +
        typeof callbackToAnalyze + '.');
        err.code = ErrorCode.CallbackParameterWrongType;
        return packageAsyncError(err);
      }
    }

  }

  function createGeneralAsyncError(e, callbackFunction, afterActually) {
    var when;
    if(afterActually) {when = 'after';} else {when = 'before';}

    var ourErr;
    if (e.code && typeof e.code === 'string' && e.code.substr(0,3) === 'mc-') {
      ourErr = e;
    } else {
      if (typeof e === 'string') {
        ourErr = new Error('Error in medicomp Client ' + when + ' the socket call: ' + e);
      } else {
        ourErr = new Error('Error in medicomp Client ' + when + ' the socket call: ' + e.toString());
        ourErr.inner = e;
      }
      ourErr.code = ErrorCode.GeneralCaught;
    }

    return packageAsyncError(ourErr, callbackFunction);
  }

  function packageAsyncError(ourErr, callbackFunction) {
    var deferred = Q.defer();
    if (typeof ourErr === 'string') {
        ourErr = new Error(ourErr);
    }

    thisConnection.lastError = errorToJSON(ourErr);

    if (callbackFunction === undefined && (ourErr.possibleCallbackFunction)) {
      callbackFunction = ourErr.possibleCallbackFunction;
    }

    setImmediate(function() {
      if(typeof callbackFunction === 'function') {
        callbackFunction(ourErr);
      }
      deferred.reject(ourErr);

    });

    return deferred.promise;
  }


  // public methods

  this.isOpen = function() {
      return socket.isConnected;
  };
  
  this.setNoDelay = function(state) {
    socket.setNoDelay(state);
  };

  this.medcinInit = function(callbackFunction) { // #1
    return sendDataWithNoReply(ServerCode.MedcinInit, callbackFunction);
  };

  this.medcinEnd = function(callbackFunction) { // #2
    var specialPromise = sendDataWithNoReply(ServerCode.MedcinEnd);

    specialPromise.then(function() {
            //var deferred = Q.defer();
            socket.closeDown();
            if(callbackFunction) {
                callbackFunction(null, true);
            }
          }
    );

    return specialPromise;

  };

  this.setDebugOutput = function(debugOutputLevel, callbackFunction) { // #3
    return sendDataWithNoReply(ServerCode.SetDebugOutput, callbackFunction,
      function(b) {
        b.pushShort(debugOutputLevel, ParamType.DebugOutputLevel);
      });
  };

  this.setDataDir = function(path, callbackFunction) { // #4
    return sendDataWithNoReply(ServerCode.SetDataDir, callbackFunction,
      function(b) {
        b.pushString(path, 'path');
      });
  };

  this.addChart = function(medcinId, onset, duration, prefix, result, scale, callbackFunction) { // #7
    return sendDataWithNoReply(ServerCode.AddChart, callbackFunction,
      function(b) {
        b.pushInts(medcinId, 'medcinId', onset, 'onset', duration, 'duration');
        b.pushStrings(prefix, 'prefix', result, 'result');
        b.pushShort(scale, 'scale');
      });
  };

  this.removeChart = function(medcinId, onset, duration, prefix, result, scale, callbackFunction) { // #8
    return sendDataWithNoReply(ServerCode.RemoveChart, callbackFunction,
      function(b) {
        b.pushInts(medcinId, 'medcinId', onset, 'onset', duration, 'duration');
        b.pushStrings(prefix, 'prefix', result, 'result');
        b.pushShort(scale, 'scale');
      });
  };

  this.calculate = function(callbackFunction) { // #9
    return sendDataWithNoReply(ServerCode.Calculate, callbackFunction);
  };

  this.haveList = function(listSize, termType, callbackFunction) { // #10
    return obtainSingleValue(ServerCode.HaveList, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.activate = function(listSize, termType, callbackFunction) { // #11
    return obtainSingleValue(ServerCode.Activate, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.getIpDx = function(callbackFunction) { // #12
    return obtainSingleValue(ServerCode.GetIPDx, AnswerType.FINDING_LIST, callbackFunction);
  };

  this.addDx = function(medcinId, callbackFunction) { // #13
    return sendDataWithNoReply(ServerCode.AddDx, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
      });
  };

  this.clearDx = function(callbackFunction) { // #14
    return sendDataWithNoReply(ServerCode.ClearDx, callbackFunction);
  };

  this.activateDx = function(listSize, termType, callbackFunction) { // #15
    return obtainSingleValue(ServerCode.ActivateDx, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.haveDx = function(listSize, termType, callbackFunction) { // #16
    return obtainSingleValue(ServerCode.HaveDx, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.activateExpansion = function(medcinId, callbackFunction) { // #17
    return obtainSingleValue(ServerCode.ActivateExpansion, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
      });
  };

  this.wordSearch = function(words, callbackFunction) { // #18
    return obtainSingleValue(ServerCode.WordSearch, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushString(words, 'words');
      });
  };

  this.haveWordSearch = function(termType, callbackFunction) { // #19
    return obtainSingleValue(ServerCode.HaveWordSearch, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShort(termType, ParamType.TermType);
      });
  };

  this.activateWordSearch = function(termType, callbackFunction) { // #20
    return obtainSingleValue(ServerCode.ActivateWordSearch, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShort(termType, ParamType.TermType);
      });
  };

  this.rangeNormalHigh = function(medcinId, unit, callbackFunction) { // #21
    return obtainSingleValue(ServerCode.RangeNormalHigh, AnswerType.DOUBLE, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushString(unit, 'unit');
      });
  };

  this.rangeNormalLow = function(medcinId, unit, callbackFunction) { // #22
    return obtainSingleValue(ServerCode.RangeNormalLow, AnswerType.DOUBLE, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushString(unit, 'unit');
      });
  };

  this.unitGuess = function(medcinId, testValue, callbackFunction) { // #23
    return obtainSingleValue(ServerCode.UnitGuess, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushDouble(testValue, 'testValue');
      });
  };

  this.testValueConvert = function(medcinId, testValue, fromUnit, toUnit, callbackFunction) { // #24
    return obtainSingleValue(ServerCode.TestValueConvert, AnswerType.DOUBLE, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushDouble(testValue, 'testValue');
        b.pushStrings(fromUnit, 'fromUnit', toUnit, 'toUnit');
      });
  };

  this.unitEnum = function(medcinId, listNum, callbackFunction) { // #25
    return obtainSingleValue(ServerCode.UnitEnum, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushShort(listNum, 'listNum');
      });
  };

  this.calcScale = function(medcinId, unit, testValue, callbackFunction) { // #26
    return obtainSingleValue(ServerCode.CalcScale, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushString(unit, 'unit');
        b.pushDouble(testValue, 'testValue');
      });
  };

  this.qualifierList = function(codeName, callbackFunction) { // #27
    return obtainSingleValue(ServerCode.QualifierList, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushString(codeName, 'codeName');
      });
  };

  this.qualifierDesc = function(codeName, code, callbackFunction) { // #28
    return obtainSingleValue(ServerCode.QualifierDesc, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(codeName, 'codeName', code, 'code');
      });
  };

  this.nodeKey = function(medcinId, callbackFunction) { // #29
    return obtainCacheValue(medcinId, ServerCode.NodeKey, 'nodeKey', callbackFunction);
  };

  this.termType = function(medcinId, callbackFunction) { // #30
    return obtainCacheValue(medcinId, ServerCode.TermType, 'termType', callbackFunction);
  };

  this.specialty = function(medcinId, callbackFunction) { // #31
    return obtainCacheValue(medcinId, ServerCode.Specialty, 'specialty', callbackFunction);
  };

  this.unit = function(medcinId, callbackFunction) { // #32
    return obtainCacheValue(medcinId, ServerCode.Unit, 'unit', callbackFunction);
  };

  this.search = function(medcinId, callbackFunction) { // #33
    return obtainCacheValue(medcinId, ServerCode.Search, 'search', callbackFunction);
  };

  this.sVoice = function(medcinId, callbackFunction) { // #34
    return obtainValueFromMedcinId(medcinId, ServerCode.SVoice, AnswerType.STRING, callbackFunction);
  };

  this.nomin = function(medcinId, callbackFunction) { // #35
    return obtainValueFromMedcinId(medcinId, ServerCode.Nomin, AnswerType.STRING, callbackFunction);
  };

  this.nVoice = function(medcinId, callbackFunction) { // #36
    return obtainValueFromMedcinId(medcinId, ServerCode.NVoice, AnswerType.STRING, callbackFunction);
  };

  this.sDocPos = function(medcinId, callbackFunction) { // #37
    return obtainValueFromMedcinId(medcinId, ServerCode.SDocPos, AnswerType.STRING, callbackFunction);
  };

  this.sDocNeg = function(medcinId, callbackFunction) { // #38
    return obtainValueFromMedcinId(medcinId, ServerCode.SDocNeg, AnswerType.STRING, callbackFunction);
  };

  this.sPatPos = function(medcinId, callbackFunction) { // #39
    return obtainValueFromMedcinId(medcinId, ServerCode.SPatPos, AnswerType.STRING, callbackFunction);
  };

  this.sPatNeg = function(medcinId, callbackFunction) { // #40
    return obtainValueFromMedcinId(medcinId, ServerCode.SPatNeg, AnswerType.STRING, callbackFunction);
  };

  this.pDocPos = function(medcinId, callbackFunction) { // #41
    return obtainValueFromMedcinId(medcinId, ServerCode.PDocPos, AnswerType.STRING, callbackFunction);
  };

  this.pDocNeg = function(medcinId, callbackFunction) { // #42
    return obtainValueFromMedcinId(medcinId, ServerCode.PDocNeg, AnswerType.STRING, callbackFunction);
  };

  this.pPatPos = function(medcinId, callbackFunction) { // #43
    return obtainValueFromMedcinId(medcinId, ServerCode.PPatPos, AnswerType.STRING, callbackFunction);
  };

  this.pPatNeg = function(medcinId, callbackFunction) { // #44
    return obtainValueFromMedcinId(medcinId, ServerCode.PPatNeg, AnswerType.STRING, callbackFunction);
  };

  this.rxCode = function(medcinId, callbackFunction) { // #45
    return obtainCacheValue(medcinId, ServerCode.RxCode, 'rxCode', callbackFunction);
  };

  this.testCode = function(medcinId, callbackFunction) { // #46
    return obtainCacheValue(medcinId, ServerCode.TestCode, 'testCode', callbackFunction);
  };

  this.riskCode = function(medcinId, callbackFunction) { // #47
    return obtainCacheValue(medcinId, ServerCode.RiskCode, 'riskCode', callbackFunction);
  };

  this.privacy = function(medcinId, callbackFunction) { // #48
    return obtainCacheValue(medcinId, ServerCode.Privacy, 'privacy', callbackFunction);
  };

  this.complex = function(medcinId, callbackFunction) { // #49
    return obtainCacheValue(medcinId, ServerCode.Complex, 'complex', callbackFunction);
  };

  this.udfCodeList = function(userId, codeList, callbackFunction) { // #50
    return sendDataWithNoReply(ServerCode.UDFCodeList, callbackFunction,
      function(b) {
        b.pushInt(userId, 'userId');
        b.pushString(codeList, 'codeList');
      });
  };

  this.expandCodeHint = function(codeSet, codeHint, mode, callbackFunction) { // #51
    return obtainSingleValue(ServerCode.ExpandCodeHint, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(codeSet, ParamType.CodeSet);
        b.pushString(codeHint, 'codeHint');
        b.pushInt(mode, 'mode');
      });
  };

  this.getProperty = function(medcinId, propertyName, mode, callbackFunction) { // #52
    return obtainSingleValue(ServerCode.GetProperty, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushString(propertyName, 'propertyName');
        b.pushInt(mode, 'mode');
      });
  };

  this.nodeLevel = function(medcinId, callbackFunction) { // #56
    return obtainCacheValue(medcinId, ServerCode.NodeLevel, 'nodeLevel', callbackFunction);
  };

  this.paraFlow = function(medcinId, callbackFunction) { // #57
    return obtainValueFromMedcinId(medcinId, ServerCode.ParaFlow, AnswerType.SHORT, callbackFunction);
  };

  this.sentFlow = function(medcinId, callbackFunction) { // #58
    return obtainValueFromMedcinId(medcinId, ServerCode.SentFlow, AnswerType.SHORT, callbackFunction);
  };

  this.title = function(medcinId, callbackFunction) { // #59
    return obtainValueFromMedcinId(medcinId, ServerCode.Title, AnswerType.SHORT, callbackFunction);
  };
  this.subs = function(medcinId, callbackFunction) { // #60
    return obtainCacheValue(medcinId, ServerCode.Subs, 'subs', callbackFunction);
  };

  this.parentMedcinId = function(medcinId, callbackFunction) { // #61
    return obtainValueFromMedcinId(medcinId, ServerCode.ParentMedcinId, AnswerType.INT, callbackFunction);
  };

  this.flag = function(medcinId, callbackFunction) { // #62
    return obtainCacheValue(medcinId, ServerCode.Flags, 'flag', callbackFunction);
  };

  this.eFlag = function(medcinId, callbackFunction) { // #63
    return obtainCacheValue(medcinId, ServerCode.EFlags, 'eFlag', callbackFunction);
  };

  this.management = function(medcinId, callbackFunction) { // #64
    return obtainValueFromMedcinId(medcinId, ServerCode.Management, AnswerType.INT, callbackFunction);
  };

  this.aFlags = function(medcinId, callbackFunction) { // #65
    return obtainCacheValue(medcinId, ServerCode.AFlags, 'aFlags', callbackFunction);
  };

  this.caFlags = function(medcinId, callbackFunction) { // #66
    return obtainCacheValue(medcinId, ServerCode.CAFlags, 'caFlags', callbackFunction);
  };

  this.qFlags = function(medcinId, callbackFunction) { // #67
    return obtainCacheValue(medcinId, ServerCode.QFlags, 'qFlags', callbackFunction);
  };

  this.startAge = function(medcinId, callbackFunction) { // #68
    return obtainValueFromMedcinId(medcinId, ServerCode.StartAge, AnswerType.INT, callbackFunction);
  };

  this.endAge = function(medcinId, callbackFunction) { // #69
    return obtainValueFromMedcinId(medcinId, ServerCode.EndAge, AnswerType.INT, callbackFunction);
  };

  this.addUserFinding = function(userId, parent, search, nomen, sentPos, sentNeg, phrasePos, phraseNeg, 
              extraSearchWords, callbackFunction) { // #70
    return sendDataWithNoReply(ServerCode.AddUserFinding, callbackFunction,
      function(b) {
        b.pushInts(userId, 'userId', parent, 'parent');
        b.pushStrings(search, 'search', nomen, 'nomen', sentPos, 'sentPos', sentNeg, 'sentNeg', 
          phrasePos, 'phrasePos', phraseNeg, 'phraseNeg', extraSearchWords, 'extraSearchWords');
      });
  };

  this.userFindingCodes = function(userId, icd9, icd2, icdH, icdF, cpt, cptMod, callbackFunction) { // #71
    return sendDataWithNoReply(ServerCode.UserFindingCodes, callbackFunction,
      function(b) {
        b.pushInt(userId, 'userId');
        b.pushStrings(icd9, 'icd9', icd2, 'icd2', icdH, 'icdH', icdF, 'icdF', cpt, 'cpt', cptMod, 'cptMod');
      });
  };

  this.userFindingRange = function(userId, unitsOfMeasure, femLowRange, femHighRange, maleLowRange, 
              maleHighRange, callbackFunction) { // #72
    return sendDataWithNoReply(ServerCode.UserFindingRange, callbackFunction,
      function(b) {
        b.pushInt(userId, 'userId');
        b.pushString(unitsOfMeasure, 'unitsOfMeasure');
        b.pushDoubles(femLowRange, 'femLowRange', femHighRange, 'femHighRange', maleLowRange, 'maleLowRange', 
          maleHighRange, 'maleHighRange');
      });
  };

  this.transcribe = function(textType, medcinId, prefix, modifier, result, status, valueStr, units, rDoc, 
              lingo, capitalize, truncate, callbackFunction) { // #73
    return obtainSingleValue(ServerCode.Transcribe, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushString(textType, 'textType');
        b.pushInt(medcinId, 'medcinId');
        b.pushStrings(prefix, 'prefix', modifier, 'modifier', result, 'result', status, 'status', 
          valueStr, 'valueStr', units, 'units');
        b.pushInt(rDoc, 'rDoc');
        b.pushString(lingo, 'lingo');
        b.pushShorts(capitalize, 'capitalize', truncate, 'truncate');
      });
  };

  this.transcribeFlag = function(callbackFunction) { // #74
    return obtainSingleValue(ServerCode.TranscribeFlag, AnswerType.SHORT, callbackFunction);
  };

  this.narrate = function(callbackFunction) { // #75
    return obtainSingleValue(ServerCode.Narrate, AnswerType.STRING, callbackFunction);
  };

  this.transcribeItem = function(textType, lingo, itemId, callbackFunction) { // #76
    // ToDo:  test this
    if (itemId == lastItemId && lastTranscribeItem !== null && textType == lastTextType && lingo == lastLingo) {
      var deferred = Q.defer();
      deferred.promise.nodeify(callbackFunction);
      deferred.resolve(lastTranscribeItem);
      return deferred.promise;
    }

    lastTextType = textType;
    lastLingo = lingo;

    return obtainSingleValue(ServerCode.TranscribeItem, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(textType, 'textType', lingo, 'lingo');
        b.pushInt(itemId, 'itemId');
      });
  };

  this.addNarrate = function(itemId, medcinId, encounterTime, prefix, modifier, result, status, onset,
              duration, rDoc, chartFlag, callbackFunction) { // #77

    var deferred = Q.defer();
    deferred.promise.nodeify(callbackFunction);

    obtainSingleValue(ServerCode.AddNarrate, AnswerType.RESPONSE_BUFFER_ITSELF, callbackFunction,
      function(b) {
        // ToDo:  Test this
        b.pushInts(itemId, 'itemId', medcinId, 'medcinId');
        b.pushStrings(encounterTime, 'encounterTime', prefix, 'prefix', modifier, 'modifier', 
          result, 'result', status, 'status', onset, 'onset', duration, 'duration');
        b.pushInt(rDoc, 'rDoc');
        b.pushShort(chartFlag, 'chartFlag');
      }).then(function(data) {
        try {
          lastItemId = data.popInt();
          lastTranscribeItem = data.popString();
          var last = data.popShort();
          if (lastGroupNumber != last) {
            lastGroupNumber = last;
            lastGroupName = data.popString();
          }
          deferred.resolve(lastItemId);
        } catch (e) {
          deferred.reject(e);
        }
      }, function(err) {
        deferred.reject(err);
      });

    return deferred.promise;

  };


  this.addEpisode = function(itemId, episode, callbackFunction) { // #78
    return obtainSingleValue(ServerCode.AddEpisode, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushString(episode, 'episode');
      });
  };

  this.addValue = function(itemId, valueStr, unit, rangeNormalLow, rangeNormalHigh, 
              callbackFunction) { // #79
    return obtainSingleValue(ServerCode.AddValue, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushStrings(valueStr, 'valueStr', unit, 'unit');
        b.pushDoubles(rangeNormalLow, 'rangeNormalLow', rangeNormalHigh, 'rangeNormalHigh');
      });
  };

  this.addNote = function(itemId, note, callbackFunction) { // #80
    return obtainSingleValue(ServerCode.AddNote, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushString(note, 'note');
      });
  };

  this.addRxStr = function(itemId, rxStr, callbackFunction) { // #81
    lastItemId = 0;
    return obtainSingleValue(ServerCode.AddRxStr, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushString(rxStr, 'rxStr');
      });
  };

  this.clearNarrative = function(callbackFunction) { // #82
    return sendDataWithNoReply(ServerCode.ClearNarrative, callbackFunction);
  };

  this.deleteNarrate = function(itemId, callbackFunction) { // #83
    return obtainSingleValue(ServerCode.DeleteNarrate, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
      });
  };

  this.addDocName = function(docId, name, callbackFunction) { // #84
    return sendDataWithNoReply(ServerCode.AddDocName, callbackFunction,
      function(b) {
        b.pushInt(docId, 'docId');
        b.pushString(name, 'name');
      });
  };

  this.addDemographics = function(patientName, birthDate, callbackFunction) { // #85
    return sendDataWithNoReply(ServerCode.AddDemographics, callbackFunction,
      function(b) {
        b.pushStrings(patientName, 'patientName', birthDate, 'birthDate');
      });
  };

  this.addEncounter = function(encounterTime, docId, callbackFunction) { // #86
    return obtainSingleValue(ServerCode.AddEncounter, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
        b.pushInt(docId, 'docId');
      });
  };

  this.getGroupSequence = function(medcinGroup, callbackFunction) { // #87
    return obtainSingleValue(ServerCode.GetGroupSequence, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShort(medcinGroup, ParamType.MedcinGroup);
      });
  };

  this.setGroupSequence = function(medcinGroup, newGroupSequence, callbackFunction) { // #88
    return sendDataWithNoReply(ServerCode.SetGroupSequence, callbackFunction,
      function(b) {
        b.pushShorts(medcinGroup, ParamType.MedcinGroup, newGroupSequence, 'newGroupSequence');
      });
  };

  this.getGroupNumber = function(itemId, callbackFunction) { // #89
    if (lastItemId == itemId) {
      var deferred = Q.defer();
      deferred.promise.nodeify(callbackFunction);
      deferred.resolve(lastGroupNumber);
      return deferred.promise;
    }
    return obtainSingleValue(ServerCode.GetGroupNumber, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
      });
  };

  this.groupName = function(medcinGroup, callbackFunction) { // #90
    if (medcinGroup == lastGroupNumber && lastGroupName.length > 0) {
      var deferred = Q.defer();
      deferred.promise.nodify(callbackFunction);
      deferred.resolve(lastGroupName);
      return deferred.promise;
    }
    return obtainSingleValue(ServerCode.GroupName, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushShort(medcinGroup, ParamType.MedcinGroup);
      });
  };

  this.getNarrativeFormat = function(callbackFunction) { // #91
    return obtainSingleValue(ServerCode.GetNarrativeFormat, AnswerType.SHORT, callbackFunction);
  };

  this.setNarrativeFormat = function(narrativeFormats, callbackFunction) { // #92
    return sendDataWithNoReply(ServerCode.SetNarrativeFormat, callbackFunction,
      function(b) {
        b.pushShort(narrativeFormats, 'narrativeFormats');
      });
  };

  this.getNarrativeOutput = function(callbackFunction) { // #93
    return obtainSingleValue(ServerCode.GetNarrativeOutput, AnswerType.SHORT, callbackFunction);
  };

  this.setNarrativeOutput = function(narrativeOutput, callbackFunction) { // #94
    return sendDataWithNoReply(ServerCode.SetNarrativeOutput, callbackFunction,
      function(b) {
        b.pushShort(narrativeOutput, ParamType.NarrativeOutput);
      });
  };

  this.getNarrativeContext = function(callbackFunction) { // #95
    return obtainSingleValue(ServerCode.GetNarrativeContext, AnswerType.SHORT, callbackFunction);
  };

  this.setNarrativeContext = function(narrativeContext, callbackFunction) { // #96
    return sendDataWithNoReply(ServerCode.SetNarrativeContext, callbackFunction,
      function(b) {
        b.pushShort(narrativeContext, ParamType.NarrativeContext);
      });
  };

  this.getMedcinTimeFormat = function(datePrecision, callbackFunction) { // #97
    return obtainSingleValue(ServerCode.GetMedcinTimeFormat, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushShort(datePrecision, ParamType.DatePrecision);
      });
  };

  this.setTimeFormat = function(datePrecision, lpszNewValue, callbackFunction) { // #98
    return sendDataWithNoReply(ServerCode.SetTimeFormat, callbackFunction,
      function(b) {
        b.pushShort(datePrecision, ParamType.DatePrecision);
        b.pushString(lpszNewValue, 'lpszNewValue');
      });
  };

  this.getTimedSections = function(callbackFunction) { // #99
    return obtainSingleValue(ServerCode.GetTimedSections, AnswerType.SHORT, callbackFunction);
  };

  this.setTimedSections = function(timedSections, callbackFunction) { // #100
    return sendDataWithNoReply(ServerCode.SetTimedSections, callbackFunction,
      function(b) {
        b.pushShort(timedSections, 'timedSections');
      });
  };

  this.rtfStyle = function(rtfElement, rtfFont, rtfColor, size, rtfAttributes, style, tabStops, 
              callbackFunction) { // #101
    return sendDataWithNoReply(ServerCode.RTFStyle, callbackFunction,
      function(b) {
        b.pushShorts(rtfElement, ParamType.RtfElement, rtfFont, ParamType.RtfFont, 
          rtfColor, ParamType.RtfColor, size, 'size', rtfAttributes, 'rtfAttributes', style, 'style');
        b.pushString(tabStops, 'tabStops');
      });
  };

  this.paragraphStyle = function(style, marginTop, marginLeft, marginBottom, marginRight, indent, alignment, 
              borderWidth, borderColor, borderFrame, borderSpacing, callbackFunction) { // #102
    return sendDataWithNoReply(ServerCode.ParagraphStyle, callbackFunction,
      function(b) {
        b.pushShort(style, 'style');
        b.pushDoubles(marginTop, 'marginTop', marginLeft, 'marginLeft', marginBottom, 'marginBottom', 
          marginRight, 'marginRight', indent, 'indent');
        b.pushString(alignment, 'alignment');
        b.pushShorts(borderWidth, 'borderWidth', borderColor, ParamType.BorderColor, 
          borderFrame, 'borderFrame', borderSpacing, 'borderSpacing');
      });
  };

  this.addItemTag = function(itemId, lTag, sTag, callbackFunction) { // #103
    return obtainSingleValue(ServerCode.AddItemTag, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInts(itemId, 'itemId', lTag, 'lTag');
        b.pushString(sTag, 'sTag');
      });
  };

  this.setShowItemTag = function(narrativeTags, callbackFunction) { // #104
    return sendDataWithNoReply(ServerCode.SetShowItemTag, callbackFunction,
      function(b) {
        b.pushShort(narrativeTags, 'narrativeTags');
      });
  };

  this.getShowItemTag = function(callbackFunction) { // #105
    return obtainSingleValue(ServerCode.GetShowItemTag, AnswerType.SHORT, callbackFunction);
  };

  this.itemSTag = function(itemId, callbackFunction) { // #106
    return obtainSingleValue(ServerCode.ItemSTag, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
      });
  };

  this.itemLTag = function(itemId, callbackFunction) { // #107
    return obtainSingleValue(ServerCode.ItemLTag, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
      });
  };

  this.setShowItemId = function(newValue, callbackFunction) { // #108
    return sendDataWithNoReply(ServerCode.SetShowItemId, callbackFunction,
      function(b) {
        b.pushShort(newValue, 'newValue');
      });
  };

  this.setShowMedcinId = function(newValue, callbackFunction) { // #109
    return sendDataWithNoReply(ServerCode.SetShowMedcinId, callbackFunction,
      function(b) {
        b.pushShort(newValue, 'newValue');
      });
  };

  this.getMedcinVersion = function(callbackFunction) { // #110
    return obtainSingleValue(ServerCode.GetVersion, AnswerType.STRING, callbackFunction);
  };

  this.setGroupNumber = function(itemId, newValue, callbackFunction) { // #115
    return sendDataWithNoReply(ServerCode.SetGroupNumber, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushShort(newValue, 'newValue');
      });
  };

  this.addDxPrompt = function(dx, medcinId, prefix, listSize, childrenDx, callbackFunction) { // #117
    return sendDataWithNoReply(ServerCode.AddDxPrompt, callbackFunction,
      function(b) {
        b.pushInts(dx, 'dx', medcinId, 'medcinId');
        b.pushString(prefix, 'prefix');
        b.pushShorts(listSize, ParamType.ListSize, childrenDx, 'childrenDx');
      });
  };

  this.setPatient = function(age, gender, ethnic, religion, race, patientName, birthDate, 
              callbackFunction) { // #119
    return sendDataWithNoReply(ServerCode.SetPatient, callbackFunction,
      function(b) {
        b.pushInt(age, 'age');
        b.pushStrings(gender, 'gender', ethnic, 'ethnic', religion, 'religion', race, 'race', 
          patientName, 'patientName', birthDate, 'birthDate');
      });
  };

  this.clearChartFindings = function(callbackFunction) { // #120
    return sendDataWithNoReply(ServerCode.ClearChartFindings, callbackFunction);
  };

  this.getMessageString = function(index, callbackFunction) { // #121
    return obtainSingleValue(ServerCode.GetMessageString, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushShort(index, 'index');
      });
  };

  this.setMessageString = function(index, lpszNewValue, callbackFunction) { // #122
    return sendDataWithNoReply(ServerCode.SetMessageString, callbackFunction,
      function(b) {
        b.pushShort(index, 'index');
        b.pushString(lpszNewValue, 'lpszNewValue');
      });
  };

  this.setGroupName = function(groupNumber, newName, callbackFunction) {
    // This is not very well tested.
    if (groupNumber > 0 && groupNumber <= Globals.GLast) {

      var msgNum;
      if (groupNumber <= Globals.GLastBase) {
        msgNum = Globals.MsgReasone - 1 + groupNumber;
      } else {
        msgNum = Globals.MsgGpMisc10 + groupNumber - Globals.GMisc10;
      }

      return sendDataWithNoReply(ServerCode.SetMessageString, callbackFunction,
        function(b) {
          b.pushShort(msgNum, 'index');
          b.pushString(newName, 'newName');
        });

    } else {
      return false;
    }
  };

  this.getNarrateOptions = function(callbackFunction) { // #123
    return obtainSingleValue(ServerCode.GetNarrateOptions, AnswerType.SHORT, callbackFunction);
  };

  this.setNarrateOptions = function(narrateOptions, callbackFunction) { // #124
    return sendDataWithNoReply(ServerCode.SetNarrateOptions, callbackFunction,
      function(b) {
        b.pushShort(narrateOptions, 'narrateOptions');
      });
  };

  this.narrateEx = function(narrateOptions, narrativeContext, narrativeFormats, narrativeOutput, linkPmh, 
              showOptions, timed, groups, callbackFunction) { // #125
    return obtainSingleValue(ServerCode.NarrateEx, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushShorts(narrateOptions, 'narrateOptions', narrativeContext, ParamType.NarrativeContext, 
          narrativeFormats, 'narrativeFormats', narrativeOutput, ParamType.NarrativeOutput, 
          linkPmh, ParamType.LinkPmh, showOptions, 'showOptions', timed, 'timed');
        b.pushString(groups, 'groups');
      });
  };

  this.getStateKey = function(callbackFunction) { // #126
    return obtainSingleValue(ServerCode.GetStateKey, AnswerType.STRING, callbackFunction);
  };

  this.restoreState = function(key, callbackFunction) { // #127
    return obtainSingleValue(ServerCode.RestoreState, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushString(key, 'key');
      });
  };

  this.narrateGroups = function(newValue, callbackFunction) { // #128
    lastItemId = 0;
    return sendDataWithNoReply(ServerCode.NarrateGroups, callbackFunction,
      function(b) {
        b.pushString(newValue, 'newValue');
      });
  };

  this.activateEm = function(iCode, sParm, wParm, callbackFunction) { // #129
    return obtainSingleValue(ServerCode.ActivateEm, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushInt(iCode, 'iCode');
        b.pushString(sParm, 'sParm');
        b.pushInt(wParm, 'wParm');
      });
  };

  this.activateEmPrompt = function(listSize, iCode, examType, sParm, wParm, callbackFunction) { // #130
    return obtainSingleValue(ServerCode.ActivateEmPrompt, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShort(listSize, ParamType.ListSize);
        b.pushInt(iCode, 'iCode');
        b.pushStrings(examType, 'examType', sParm, 'sParm');
        b.pushInt(wParm, 'wParm');
      });
  };

  this.calculateEm = function(setting, service, patientStatus, examType, faceTime, overHalf, codeDetails, 
              callbackFunction) { // #131
    return obtainSingleValue(ServerCode.CalculateEm, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(setting, 'setting', service, 'service', patientStatus, 'patientStatus', 
          examType, 'examType');
        b.pushInts(faceTime, 'faceTime', overHalf, 'overHalf');
        b.pushString(codeDetails, 'codeDetails');
      });
  };

  this.activateExpansionEx = function(medcinId, aMask, listSize, callbackFunction) { // #132
    return obtainSingleValue(ServerCode.ActivateExpansionEx, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushShorts(aMask, 'aMask', listSize, ParamType.ListSize);
      });
  };

  this.linkFindings = function(itemId1, linkType, itemId2, callbackFunction) { // #133
    return obtainSingleValue(ServerCode.LinkFindings, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(itemId1, 'itemId1');
        b.pushString(linkType, 'linkType');
        b.pushInt(itemId2, 'itemId2');
      });
  };

  this.buildListMode = function(modes, callbackFunction) { // #138
    return sendDataWithNoReply(ServerCode.BuildListMode, callbackFunction,
      function(b) {
        b.pushInt(modes, 'modes');
      });
  };

  this.getUserFindingTag = function(userId, callbackFunction) { // #142
    return obtainSingleValue(ServerCode.GetUserFindingTag, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(userId, 'userId');
      });
  };

  this.setUserFindingTag = function(userId, sTag, callbackFunction) { // #143
    return sendDataWithNoReply(ServerCode.SetUserFindingTag, callbackFunction,
      function(b) {
        b.pushInt(userId, 'userId');
        b.pushString(sTag, 'sTag');
      });
  };

  this.tSearch = function(medcinId, callbackFunction) { // #144
    return obtainValueFromMedcinId(medcinId, ServerCode.TSearch, AnswerType.STRING, callbackFunction);
  };

  this.sTersePos = function(medcinId, callbackFunction) { // #145
    return obtainValueFromMedcinId(medcinId, ServerCode.STersePos, AnswerType.STRING, callbackFunction);
  };

  this.sTerseNeg = function(medcinId, callbackFunction) { // #146
    return obtainValueFromMedcinId(medcinId, ServerCode.STerseNeg, AnswerType.STRING, callbackFunction);
  };

  this.pTersePos = function(medcinId, callbackFunction) { // #147
    return obtainValueFromMedcinId(medcinId, ServerCode.PTersePos, AnswerType.STRING, callbackFunction);
  };

  this.pTerseNeg = function(medcinId, callbackFunction) { // #148
    return obtainValueFromMedcinId(medcinId, ServerCode.PTerseNeg, AnswerType.STRING, callbackFunction);
  };

  this.doseList = function(medcinId, callbackFunction) { // #149
    return obtainValueFromMedcinId(medcinId, ServerCode.DoseList, AnswerType.STRING, callbackFunction);
  };

  this.brandList = function(medcinId, doseId, callbackFunction) { // #150
    return obtainSingleValue(ServerCode.BrandList, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(medcinId, 'medcinId', doseId, 'doseId');
      });
  };

  this.dose = function(medcinId, doseId, callbackFunction) { // #151
    return obtainSingleValue(ServerCode.Dose, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(medcinId, 'medcinId', doseId, 'doseId');
      });
  };

  this.histFlush = function(callbackFunction) { // #152

    thisConnection.lastError = null;
    if (checkForSeveralErrors(callbackFunction, ServerCode.HistFlush)) {
      return constructAppropriateError(callbackFunction, ServerCode.HistFlush);
    }

    try {
      var deferred = Q.defer();

      checkHistPacket(true);

      setImmediate(function() {
        if(typeof callbackFunction === 'function'){
          callbackFunction(null, true);
        }
        deferred.resolve(true);
      });

      return deferred.promise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction);
    }

  };

  this.histNarrate = function(encounterTime, callbackFunction) { // #153
    return obtainSingleValue(ServerCode.HistNarrate, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
      });
  };

  this.histTranscribeItem = function(textType, lingo, seq, callbackFunction) { // #154
    return obtainSingleValue(ServerCode.HistTranscribeItem, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(textType, 'textType', lingo, 'lingo');
        b.pushInt(seq, 'seq');
      });
  };

  this.setPatientGeneric = function(on, callbackFunction) { // #118
    return sendDataWithNoReply(ServerCode.SetPatientGeneric, callbackFunction,
      function(b) {
        b.pushShort(on, 'on');
      });
  };

  this.histAddNarrate = function(seq, medcinId, encounterTime, prefix, modifier, result, status, onset, 
              duration, rDoc, chartFlag, callbackFunction) { // #155
    return sendDataWithNoReply(ServerCode.HistAddNarrate, callbackFunction,
      function(b) {
        b.pushInts(seq, 'seq', medcinId, 'medcinId');
        b.pushStrings(encounterTime, 'encounterTime', prefix, 'prefix', modifier, 'modifier', 
          result, 'result', status, 'status', onset, 'onset', duration, 'duration');
        b.pushInt(rDoc, 'rDoc');
        b.pushShort(chartFlag, 'chartFlag');
      });
  };

  this.histAddEpisode = function(seq, episode, callbackFunction) { // #156
    return sendBufferedHistoryData(ServerCode.HistAddEpisode, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(episode, 'episode');
      });
  };

  this.histAddValue = function(seq, valueStr, unit, rangeNormalLow, rangeNormalHigh, 
              callbackFunction) { // #157
    return sendBufferedHistoryData(ServerCode.HistAddValue, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushStrings(valueStr, 'valueStr', unit, 'unit');
        b.pushDoubles(rangeNormalLow, 'rangeNormalLow', rangeNormalHigh, 'rangeNormalHigh');
      });
  };

  this.histAddNote = function(seq, note, callbackFunction) { // #158
    return sendBufferedHistoryData(ServerCode.HistAddNote, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(note, 'note');
      });
  };

  this.histAddRxStr = function(seq, rxStr, callbackFunction) { // #159
    return sendBufferedHistoryData(ServerCode.HistAddRxStr, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(rxStr, 'rxStr');
      });
  };

  this.histDelete = function(seq, callbackFunction) { // #160
    return obtainSingleValue(ServerCode.HistDelete, AnswerType.true, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
      });
  };

  this.histLinkFindings = function(seq1, linkType, seq2, callbackFunction) { // #162
    return sendBufferedHistoryData(ServerCode.HistLinkFindings, callbackFunction,
      function(b) {
        b.pushInt(seq1, 'seq1');
        b.pushString(linkType, 'linkType');
        b.pushInt(seq2, 'seq2');
      });
  };

  this.histAddDocName = function(docId, name, callbackFunction) { // #163
    return sendBufferedHistoryData(ServerCode.HistAddDocName, callbackFunction,
      function(b) {
        b.pushInt(docId, 'docId');
        b.pushString(name, 'name');
      });
  };

  this.histAddEncounter = function(encounterTime, docId, callbackFunction) { // #164
    return sendBufferedHistoryData(ServerCode.HistAddEncounter, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
        b.pushInt(docId, 'docId');
      });
  };

  this.histActivate = function(listSize, loadType, callbackFunction) { // #166
    return obtainSingleValue(ServerCode.HistActivate, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, loadType, 'loadType');
      });
  };

  this.histActivateDx = function(listSize, termType, callbackFunction) { // #167
    return obtainSingleValue(ServerCode.HistActivateDx, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.histLocate = function(medcinId, mode, callbackFunction) { // #168
    return obtainSingleValue(ServerCode.HistLocate, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
        b.pushShort(mode, 'mode');
      });
  };

  this.histActivateWordSearch = function(termType, callbackFunction) { // #169
    return obtainSingleValue(ServerCode.HistActivateWordSearch, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushShort(termType, ParamType.TermType);
      });
  };

  this.histAddChart = function(medcinId, onset, duration, prefix, result, scale, callbackFunction) { // #170
    return sendDataWithNoReply(ServerCode.HistAddChart, callbackFunction,
      function(b) {
        b.pushInts(medcinId, 'medcinId', onset, 'onset', duration, 'duration');
        b.pushStrings(prefix, 'prefix', result, 'result');
        b.pushShort(scale, 'scale');
      });
  };

  this.histAddDx = function(medcinId, callbackFunction) { // #171
    return sendDataWithNoReply(ServerCode.HistAddDx, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
      });
  };

  this.histCalculate = function(callbackFunction) { // #172
    return sendDataWithNoReply(ServerCode.HistCalculate, callbackFunction);
  };

  this.histClearChart = function(age, gender, ethnic, religion, race, callbackFunction) { // #173
    return sendDataWithNoReply(ServerCode.HistClearChart, callbackFunction,
      function(b) {
        b.pushInt(age, 'age');
        b.pushStrings(gender, 'gender', ethnic, 'ethnic', religion, 'religion', race, 'race');
      });
  };

  this.histClearChartFindings = function(callbackFunction) { // #174
    return sendDataWithNoReply(ServerCode.HistClearChartFindings, callbackFunction);
  };

  this.histClearDx = function(callbackFunction) { // #175
    return sendDataWithNoReply(ServerCode.HistClearDx, callbackFunction);
  };

  this.histHaveDx = function(listSize, termType, callbackFunction) { // #176
    return obtainSingleValue(ServerCode.HistHaveDx, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.histHaveList = function(listSize, termType, callbackFunction) { // #177
    return obtainSingleValue(ServerCode.HistHaveList, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShorts(listSize, ParamType.ListSize, termType, ParamType.TermType);
      });
  };

  this.histHaveWordSearch = function(termType, callbackFunction) { // #178
    return obtainSingleValue(ServerCode.HistHaveWordSearch, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushShort(termType, ParamType.TermType);
      });
  };

  this.histReleasePool = function(callbackFunction) { // #179
    return sendDataWithNoReply(ServerCode.HistReleasePool, callbackFunction);
  };

  this.histRemoveChart = function(medcinId, onset, duration, prefix, result, scale, 
              callbackFunction) { // #180
    return sendDataWithNoReply(ServerCode.HistRemoveChart, callbackFunction,
      function(b) {
        b.pushInts(medcinId, 'medcinId', onset, 'onset', duration, 'duration');
        b.pushStrings(prefix, 'prefix', result, 'result');
        b.pushShort(scale, 'scale');
      });
  };

  this.histRetrieveEncounter = function(encounterTime, callbackFunction) { // #181
    return obtainSingleValue(ServerCode.HistRetrieveEncounter, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
      });
  };

  this.histRetrieveOrder = function(orderId, callbackFunction) { // #182
    return obtainSingleValue(ServerCode.HistRetrieveOrder, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushString(orderId, 'orderId');
      });
  };

  this.histWordSearch = function(words, callbackFunction) { // #183
    return obtainSingleValue(ServerCode.HistWordSearch, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushString(words, 'words');
      });
  };

  this.histSetPoolId = function(histPoolId, callbackFunction) { // #184
    return obtainSingleValue(ServerCode.HistSetPoolId, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(histPoolId, 'histPoolId');
      });
  };

  this.histSetPoolPid = function(patientId, callbackFunction) { // #185
    return obtainSingleValue(ServerCode.HistSetPoolPid, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushString(patientId, 'patientId');
      });
  };

  this.histCreatePool = function(patientId, callbackFunction) { // #186
    return obtainSingleValue(ServerCode.HistCreatePool, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushString(patientId, 'patientId');
      });
  };

  this.histAddOrder = function(seq, orderId, callbackFunction) { // #187
    return sendBufferedHistoryData(ServerCode.HistAddOrder, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(orderId, 'orderId');
      });
  };

  this.histDeleteEncounter = function(encounterTime, callbackFunction) { // #188
    return sendDataWithNoReply(ServerCode.HistDeleteEncounter, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
      });
  };

  this.histEncounterList = function(callbackFunction) { // #189
    return obtainSingleValue(ServerCode.HistEncounterList, AnswerType.STRING, callbackFunction);
  };

  this.histAddFuList = function(medcinIds, callbackFunction) { // #190
    return sendDataWithNoReply(ServerCode.HistAddFuList, callbackFunction,
      function(b) {
        b.pushString(medcinIds, 'medcinIds');
      });
  };

  this.getBuildListMode = function(callbackFunction) { // #191
    return obtainSingleValue(ServerCode.GetBuildListMode, AnswerType.INT, callbackFunction);
  };

  this.getGroupSequenceEx = function(callbackFunction) { // #192
    return obtainSingleValue(ServerCode.GetGroupSequenceEx, AnswerType.STRING, callbackFunction);
  };

  this.setGroupSequenceEx = function(groupList, callbackFunction) { // #193
    return sendDataWithNoReply(ServerCode.SetGroupSequenceEx, callbackFunction,
      function(b) {
        b.pushString(groupList, 'groupList');
      });
  };

  this.setDoctorId = function(docCode, docId, callbackFunction) { // #194
    return sendDataWithNoReply(ServerCode.SetDoctorId, callbackFunction,
      function(b) {
        b.pushInts(docCode, ParamType.DocCode, docId, 'docId');
      });
  };

  this.getDoctorName = function(docId, callbackFunction) { // #195
    return obtainSingleValue(ServerCode.GetDoctorName, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(docId, 'docId');
      });
  };

  this.saveUdf = function(callbackFunction) { // #196
    return sendDataWithNoReply(ServerCode.SaveUdf, callbackFunction);
  };

  this.nextUdf = function(callbackFunction) { // #197
    return obtainSingleValue(ServerCode.NextUdf, AnswerType.INT, callbackFunction);
  };

  this.rtfIndentLevel = function(rtfElement, amount, callbackFunction) { // #198
    return sendDataWithNoReply(ServerCode.RtfIndentLevel, callbackFunction,
      function(b) {
        b.pushShort(rtfElement, ParamType.RtfElement);
        b.pushDouble(amount, 'amount');
      });
  };

  this.histSetDoctorId = function(docCode, docId, callbackFunction) { // #199
    return sendBufferedHistoryData(ServerCode.HistSetDoctorId, callbackFunction,
      function(b) {
        b.pushInts(docCode, ParamType.DocCode, docId, 'docId');
      });
  };

  this.imageSupport = function(callbackFunction) { // #200
    return obtainSingleValue(ServerCode.ImageSupport, AnswerType.INT, callbackFunction);
  };

  this.getImageId = function(system, region, view, callbackFunction) { // #201
    return obtainSingleValue(ServerCode.GetImageId, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushShorts(system, 'system', region, 'region', view, 'view');
      });
  };

  this.getImageLen = function(imageId, callbackFunction) { // #202
    return obtainSingleValue(ServerCode.GetImageLen, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushInt(imageId, 'imageId');
      });
  };

  this.getImage = function(imageId, callbackFunction) { // #203
    return obtainSingleValue(ServerCode.GetImage, AnswerType.BYTE_ARRAY, callbackFunction,
      function(b) {
        b.pushInt(imageId, 'imageId');
      });
  };

  this.getHotspotsLen = function(imageId, callbackFunction) { // #204
    return obtainSingleValue(ServerCode.ImgGetHotspotsLen, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushInt(imageId, 'imageId');
      });
  };

  this.getHotspots = function(imageId, callbackFunction) { // #205
    return obtainSingleValue(ServerCode.GetHotSpots, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(imageId, 'imageId');
      });
  };

  this.getListItemsLen = function(listId, callbackFunction) { // #206
    return obtainSingleValue(ServerCode.GetListItemsLen, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushInt(listId, 'listId');
      });
  };

  this.getListItems = function(listId, callbackFunction) { // #207
    return obtainSingleValue(ServerCode.GetListItems, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(listId, 'listId');
      });
  };

  this.addDecorationStyle = function(decorationStyle, rtfFont, rtfColor, size, rtfAttributes, 
              callbackFunction) { // #208
    return sendDataWithNoReply(ServerCode.AddDecorationStyle, callbackFunction,
      function(b) {
        b.pushShorts(decorationStyle, 'decorationStyle', rtfFont, ParamType.RtfFont, 
          rtfColor, ParamType.RtfColor, size, 'size', rtfAttributes, 'rtfAttributes');
      });
  };

  this.setDecorationStyle = function(itemId, decorationStyle, callbackFunction) { // #209
    return sendDataWithNoReply(ServerCode.SetDecorationStyle, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushShort(decorationStyle, 'decorationStyle');
      });
  };

  this.addNarrate2 = function(itemId, medcinId, encounterTime, prefix, modifier, result, status, onset, 
              duration, rDoc, chartFlag, medcinGroup, decorationStyle, callbackFunction) { // #210
    return sendDataWithNoReply(ServerCode.AddNarrate2, callbackFunction,
      function(b) {
        b.pushInts(itemId, 'itemId', medcinId, 'medcinId');
        b.pushStrings(encounterTime, 'encounterTime', prefix, 'prefix', modifier, 'modifier', 
          result, 'result', status, 'status', onset, 'onset', duration, 'duration');
        b.pushInt(rDoc, 'rDoc');
        b.pushShorts(chartFlag, 'chartFlag', medcinGroup, ParamType.MedcinGroup, 
          decorationStyle, 'decorationStyle');
      });
  };

  this.addNarrate2Ex = function(itemId, episode, note, rxStr, valueStr, unit, rangeNormalLow, rangeNormalHigh, 
              lTag, sTag, callbackFunction) { // #211
    return sendDataWithNoReply(ServerCode.AddNarrate2Ex, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushStrings(episode, 'episode', note, 'note', rxStr, 'rxStr', valueStr, 'valueStr', unit, 'unit');
        b.pushDoubles(rangeNormalLow, 'rangeNormalLow', rangeNormalHigh, 'rangeNormalHigh');
        b.pushInt(lTag, 'lTag');
        b.pushString(sTag, 'sTag');
      });
  };

  this.histGroupNumber = function(seq, medcinGroup, callbackFunction) { // #212
    return sendBufferedHistoryData(ServerCode.HistGroupNumber, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushShort(medcinGroup, ParamType.MedcinGroup);
      });
  };

  this.histSetDecorationStyle = function(seq, decorationStyle, callbackFunction) { // #213
    return sendBufferedHistoryData(ServerCode.HistSetDecorationStyle, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushShort(decorationStyle, 'decorationStyle');
      });
  };

  this.histAddNarrate2 = function(seq, medcinId, encounterTime, prefix, modifier, result, status, onset, 
              duration, rDoc, chartFlag, medcinGroup, decorationStyle, callbackFunction) { // #214
    return sendBufferedHistoryData(ServerCode.HistAddNarrate2, callbackFunction,
      function(b) {
        b.pushInts(seq, 'seq', medcinId, 'medcinId');
        b.pushStrings(encounterTime, 'encounterTime', prefix, 'prefix', modifier, 'modifier', 
          result, 'result', status, 'status', onset, 'onset', duration, 'duration');
        b.pushInt(rDoc, 'rDoc');
        b.pushShorts(chartFlag, 'chartFlag', medcinGroup, ParamType.MedcinGroup, 
          decorationStyle, 'decorationStyle');
      });
  };

  this.histAddNarrate2Ex = function(seq, episode, note, rxStr, valueStr, unit, rangeNormalLow, rangeNormalHigh, 
              lTag, sTag, callbackFunction) { // #215
    return sendBufferedHistoryData(ServerCode.HistAddNarrate2Ex, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushStrings(episode, 'episode', note, 'note', rxStr, 'rxStr', valueStr, 'valueStr', unit, 'unit');
        b.pushDoubles(rangeNormalLow, 'rangeNormalLow', rangeNormalHigh, 'rangeNormalHigh');
        b.pushInt(lTag, 'lTag');
        b.pushString(sTag, 'sTag');
      });
  };

  this.medispanIds = function(medcinId, callbackFunction) { // #216
    return obtainValueFromMedcinId(medcinId, ServerCode.MedispanIds, AnswerType.STRING, callbackFunction);
  };

  this.histList = function(medcinIds, mode, callbackFunction) { // #217
    return obtainSingleValue(ServerCode.HistList, AnswerType.FINDING_LIST, callbackFunction,
      function(b) {
        b.pushString(medcinIds, 'medcinIds');
        b.pushShort(mode, 'mode');
      });
  };

  this.medispanEx = function(medispanId, details, callbackFunction) { // #219
    return obtainSingleValue(ServerCode.MedispanEx, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(medispanId, 'medispanId');
        b.pushString(details, 'details');
      });
  };

  this.checkAlert = function(encounterTime, medcinIds, itemIds, seqs, flags, callbackFunction) { // #220
    return obtainSingleValue(ServerCode.CheckAlert, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(encounterTime, 'encounterTime', medcinIds, 'medcinIds', itemIds, 'itemIds', 
          seqs, 'seqs');
        b.pushInt(flags, 'flags');
      });
  };

  this.gpFlags = function(medcinId, callbackFunction) { // #222
    return obtainCacheValue(medcinId, ServerCode.GpFlags, 'gpFlags', callbackFunction);
  };

  this.getSubgroupSequence = function(medcinGroup, mode, callbackFunction) { // #225
    return obtainSingleValue(ServerCode.GetSubgroupSequence, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushShorts(medcinGroup, ParamType.MedcinGroup, mode, 'mode');
      });
  };

  this.setSubgroupSequence = function(sequence, callbackFunction) { // #226
    return sendDataWithNoReply(ServerCode.SetSubgroupSequence, callbackFunction,
      function(b) {
        b.pushString(sequence, 'sequence');
      });
  };

  this.getImageIdEx = function(system, region, view, attributes, callbackFunction) { // #227
    return obtainSingleValue(ServerCode.GetImageIdEx, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushShorts(system, 'system', region, 'region', view, 'view', attributes, 'attributes');
      });
  };

  this.getReferenceInfo = function(source, id, referenceInfo, callbackFunction) { // #228
    return obtainSingleValue(ServerCode.GetReferenceInfo, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(source, 'source', id, 'id', referenceInfo, ParamType.ReferenceInfo);
      });
  };

  this.codeFromMedcin = function(medcinId, codeSet, mode, callbackFunction) { // #229

    var when = false;
    try {
      if (mode === 0) {
        if (checkForSeveralErrors(callbackFunction, ServerCode.CodeFromMedcin, AnswerType.SHORT)) {
          return constructAppropriateError(callbackFunction, ServerCode.CodeFromMedcin, AnswerType.SHORT);
        }
        medcinCache = medcinCache || new medicomp.Cache(thisConnection);
        var deferred = Q.defer();
        medcinCache.getCodeLink(medcinId, codeSet, function(err, data) {
          when = true;
          if(err) {
            deferred.reject(err);
          } else
          {
            deferred.resolve(data);
          }
        });
        deferred.promise.nodeify(callbackFunction);
        return deferred.promise;
      } else {
        return obtainSingleValue(ServerCode.CodeFromMedcin, AnswerType.STRING, callbackFunction,
          function(b) {
            b.pushInts(medcinId, 'medcinId', codeSet, ParamType.CodeSet, mode, 'mode');
          });
      }
    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction, when);
    }

  };

  this.setCodeDate = function(codeDate, callbackFunction) { // #230
    return obtainSingleValue(ServerCode.SetCodeDate, AnswerType.true, callbackFunction,
      function(b) {
        b.pushString(codeDate, 'codeDate');
      });
  };

  this.setAlertLookBackPeriod = function(duration, callbackFunction) { // #231
    return sendDataWithNoReply(ServerCode.SetAlertLookBack, callbackFunction,
      function(b) {
        b.pushString(duration, 'duration');
      });
  };

  this.setAlertSuppression = function(suppress, callbackFunction) { // #232
    return sendDataWithNoReply(ServerCode.SetAlertSuppress, callbackFunction,
      function(b) {
        b.pushString(suppress, 'suppress');
      });
  };

  this.cgn = function(medcinId, callbackFunction) { // #233
    return obtainValueFromMedcinId(medcinId, ServerCode.Cgn, AnswerType.SHORT, callbackFunction);
  };

  this.tgn = function(medcinId, callbackFunction) { // #234
    return obtainValueFromMedcinId(medcinId, ServerCode.Tgn, AnswerType.SHORT, callbackFunction);
  };

  this.baseGroup = function(medcinId, callbackFunction) { // #235
    return obtainValueFromMedcinId(medcinId, ServerCode.BaseNarGroup, AnswerType.SHORT, callbackFunction);
  };

  this.GetItemData = function(itemId, fields, callbackFunction) { // #236
    return obtainSingleValue(ServerCode.GetItemData, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushString(fields, 'fields');
      });
  };

  this.histGetItemData = function(seq, fields, callbackFunction) { // #237
    return obtainSingleValue(ServerCode.HistGetItemData, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(fields, 'fields');
      });
  };

  this.screenForCodes = function(codeSets, callbackFunction) { // #238
    return obtainSingleValue(ServerCode.ScreenForCodes, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushString(codeSets, 'codeSets');
      });
  };

  this.addSequence = function(itemId, sequence, callbackFunction) { // #239
    return sendDataWithNoReply(ServerCode.AddSequence, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushShort(sequence, 'sequence');
      });
  };

  this.addSequenceEx = function(sequences, callbackFunction) { // #240
    return sendDataWithNoReply(ServerCode.AddSequenceEx, callbackFunction,
      function(b) {
        b.pushString(sequences, 'sequences');
      });
  };

  this.getSequence = function(itemId, callbackFunction) { // #241
    return obtainSingleValue(ServerCode.GetSequence, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
      });
  };

  this.histAddSequence = function(seq, sequence, callbackFunction) { // #242
    return sendDataWithNoReply(ServerCode.HistAddSequence, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushShort(sequence, 'sequence');
      });
  };

  this.setRtfStyles = function(styles, callbackFunction) { // #243
    return sendDataWithNoReply(ServerCode.SetRtfStyles, callbackFunction,
      function(b) {
        b.pushString(styles, 'styles');
      });
  };

  this.setParagraphStyles = function(styles, callbackFunction) { // #244
    return sendDataWithNoReply(ServerCode.SetParagraphStyles, callbackFunction,
      function(b) {
        b.pushString(styles, 'styles');
      });
  };

  this.setChapter = function(chapter, callbackFunction) { // #245
    return sendDataWithNoReply(ServerCode.SetChapter, callbackFunction,
      function(b) {
        b.pushShort(chapter, 'chapter');
      });
  };

  this.addChapter = function(itemId, chapter, callbackFunction) { // #246
    return sendDataWithNoReply(ServerCode.AddChapter, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushShort(chapter, 'chapter');
      });
  };

  this.histAddChapter = function(seq, chapter, callbackFunction) { // #247
    return sendBufferedHistoryData(ServerCode.HistAddChapter, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushShort(chapter, 'chapter');
      });
  };

  this.imageSearch = function(keyWords, systems, callbackFunction) { // #248
    return obtainSingleValue(ServerCode.ImageSearch, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(keyWords, 'keyWords', systems, 'systems');
      });
  };

  this.codeFromItem = function(itemId, codeSet, mode, callbackFunction) { // #249
    return obtainSingleValue(ServerCode.CodeFromItem, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(itemId, 'itemId', codeSet, ParamType.CodeSet, mode, 'mode');
      });
  };

  this.histCodeFromItem = function(seq, codeSet, mode, callbackFunction) { // #250
    return obtainSingleValue(ServerCode.HistCodeFromItem, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(seq, 'seq', codeSet, ParamType.CodeSet, mode, 'mode');
      });
  };

  this.getImageProperties = function(imageId, callbackFunction) { // #251
    return obtainSingleValue(ServerCode.GetImageProperties, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(imageId, 'imageId');
      });
  };

  this.getSubgroup = function(itemId, callbackFunction) { // #252
    return obtainSingleValue(ServerCode.CodeSubGroup, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
      });
  };

  this.codeFromParms = function(age, medcinId, codeSet, mode, value, gender, posNeg, 
              callbackFunction) { // #253
    return obtainSingleValue(ServerCode.CodeFromParms, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(age, 'age', medcinId, 'medcinId', codeSet, ParamType.CodeSet, mode, 'mode');
        b.pushStrings(value, 'value', gender, 'gender', posNeg, 'posNeg');
      });
  };

  this.histAddRangeScale = function(seq, scale, callbackFunction) { // #254
    return sendBufferedHistoryData(ServerCode.HistAddRangeScale, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushShort(scale, 'scale');
      });
  };

  this.histGetGroupNumber = function(seq, callbackFunction) { // #255
    return obtainSingleValue(ServerCode.HistGetGroupNumber, AnswerType.SHORT, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
      });
  };

  this.formatDate = function(date, format, callbackFunction) { // #256
    return obtainSingleValue(ServerCode.FormatDate, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushStrings(date, 'date', format, 'format');
      });
  };

  this.histGridLayout = function(gridLayoutModes, datePrecision, dateSortOrder, encounterTime, 
              callbackFunction) { // #257
    return sendDataWithNoReply(ServerCode.HistGridLayout, callbackFunction,
      function(b) {
        b.pushInt(gridLayoutModes, 'gridLayoutModes');
        b.pushShorts(datePrecision, ParamType.DatePrecision, dateSortOrder, ParamType.DateSortOrder);
        b.pushString(encounterTime, 'encounterTime');
      });
  };

  this.histDataFilter = function(dataFilterMode, mask, dateFrom, dateTo, timeFrom, timeTo, 
              callbackFunction) { // #258
    return sendDataWithNoReply(ServerCode.HistDataFilter, callbackFunction,
      function(b) {
        b.pushInts(dataFilterMode, 'dataFilterMode', mask, 'mask');
        b.pushStrings(dateFrom, 'dateFrom', dateTo, 'dateTo', timeFrom, 'timeFrom', timeTo, 'timeTo');
      });
  };

  this.addSpecifier = function(itemId, specifier, callbackFunction) { // #259
    return sendDataWithNoReply(ServerCode.AddSpecifier, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushString(specifier, 'specifier');
      });
  };

  this.histAddSpecifier = function(seq, specifier, callbackFunction) { // #260
    return sendBufferedHistoryData(ServerCode.HistAddSpecifier, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(specifier, 'specifier');
      });
  };

  this.baseUserFinding = function(callbackFunction) { // #261
    return obtainSingleValue(ServerCode.BaseUserFinding, AnswerType.INT, callbackFunction);
  };

  this.addEmData = function(mode, encounterItems, extraItems, callbackFunction) { // #262
    return sendDataWithNoReply(ServerCode.AddEMData, callbackFunction,
      function(b) {
        b.pushInt(mode, 'mode');
        b.pushStrings(encounterItems, 'encounterItems', extraItems, 'extraItems');
      });
  };

  this.addFindingImage = function(itemId, align, border, clear, horizontalSpace, verticalSpace, imagePath, 
              callbackFunction) { // #263
    return sendDataWithNoReply(ServerCode.AddFindingImage, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushString(align, 'align');
        b.pushShorts(border, 'border', clear, 'clear', horizontalSpace, 'horizontalSpace', 
          verticalSpace, 'verticalSpace');
        b.pushString(imagePath, 'imagePath');
      });
  };

  this.histAddFindingImage = function(seq, align, border, clear, horizontalSpace, verticalSpace, imagePath, 
              callbackFunction) { // #264
    return sendBufferedHistoryData(ServerCode.HistAddFindingImage, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushString(align, 'align');
        b.pushShorts(border, 'border', clear, 'clear', horizontalSpace, 'horizontalSpace', 
          verticalSpace, 'verticalSpace');
        b.pushString(imagePath, 'imagePath');
      });
  };

  this.userFindingProperties = function(userId, properties, callbackFunction) { // #265
    return sendDataWithNoReply(ServerCode.UserFindingProperties, callbackFunction,
      function(b) {
        b.pushInt(userId, 'userId');
        b.pushString(properties, 'properties');
      });
  };

  this.getCaption = function(mode, code, callbackFunction) { // #266
    return obtainSingleValue(ServerCode.GetCaption, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInts(mode, 'mode', code, 'code');
      });
  };

  this.medcinIdFromNodeKey = function(nodeKey, callbackFunction) { // #267
    return obtainSingleValue(ServerCode.MedcinIdFromNodekey, AnswerType.INT, callbackFunction,
      function(b) {
        b.pushString(nodeKey, 'nodeKey');
      });
  };

  this.addNarrateCode = function(itemId, mode, codeStr, callbackFunction) { // #268
    return sendDataWithNoReply(ServerCode.AddNarrateCode, callbackFunction,
      function(b) {
        b.pushInts(itemId, 'itemId', mode, 'mode');
        b.pushString(codeStr, 'codeStr');
      });
  };

  this.histAddNarrateCode = function(seq, mode, codeStr, callbackFunction) { // #269
    return sendBufferedHistoryData(ServerCode.HistAddNarrateCode, callbackFunction,
      function(b) {
        b.pushInts(seq, 'seq', mode, 'mode');
        b.pushString(codeStr, 'codeStr');
      });
  };

  this.getCodeDescription = function(codeSet, code, callbackFunction) { // #270
    return obtainSingleValue(ServerCode.GetCodeDescription, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(codeSet, ParamType.CodeSet);
        b.pushString(code, 'code');
      });
  };

  this.addEncounterHeadings = function(encounterTime, mode, headings, callbackFunction) { // #271
    return sendDataWithNoReply(ServerCode.AddEncounterHeadings, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
        b.pushInt(mode, 'mode');
        b.pushString(headings, 'headings');
      });
  };

  this.histAddEncounterHeadings = function(encounterTime, mode, headings, callbackFunction) { // #272
    return sendBufferedHistoryData(ServerCode.HistAddEncounterHeadings, callbackFunction,
      function(b) {
        b.pushString(encounterTime, 'encounterTime');
        b.pushInt(mode, 'mode');
        b.pushString(headings, 'headings');
      });
  };

  this.getServerProperties = function(serverItems, mode, callbackFunction) { // #274
    return obtainSingleValue(ServerCode.GetServerProperties, AnswerType.STRING, callbackFunction,
      function(b) {
        b.pushInt(serverItems, 'serverItems');
        b.pushShort(mode, 'mode');
      });
  };

  this.setSubgroup = function(itemId, subgroup, callbackFunction) { // #275
    return sendDataWithNoReply(ServerCode.SetSubgroup, callbackFunction,
      function(b) {
        b.pushInt(itemId, 'itemId');
        b.pushShort(subgroup, 'subgroup');
      });
  };

  this.histSetSubgroup = function(seq, userSubgroup, callbackFunction) { // #276
    return sendBufferedHistoryData(ServerCode.HistSetSubgroup, callbackFunction,
      function(b) {
        b.pushInt(seq, 'seq');
        b.pushShort(userSubgroup, 'userSubgroup');
      });
  };

  this.cost = function(medcinId, callbackFunction) { // #277
    return obtainSingleValue(ServerCode.Cost, AnswerType.DOUBLE, callbackFunction,
      function(b) {
        b.pushInt(medcinId, 'medcinId');
      });
  };


  // public extra helper methods that probably don't exist in other APIs.

  this.callInSequence = function(arrayOfCalls, optionalReturnValues, finalCallback) {
    // they might pass in the callback as the 2nd parameter
    var theCallback = finalCallback;
    if (finalCallback === undefined && typeof optionalReturnValues === 'function') {
      theCallback = optionalReturnValues;
    }

    if (checkForSeveralErrors(theCallback, 1000, 1000)) {
      return constructAppropriateError(theCallback, 1000, 1000);
    }

//    var weHaveErroredOut = false;

    var deferred = Q.defer();
//    if (configuration.returnExtraTestInformation) {
      this.howManyMethodsCalled = 0;
//    }
    var that = this;

    function callTheMethod(methodAndParameters) {
//      if (configuration.returnExtraTestInformation) {
        that.howManyMethodsCalled++;
//      }
      if (typeof thisConnection[methodAndParameters[0]] === 'function') {
        var parameters = methodAndParameters.slice(1);
        if (optionalReturnValues !== undefined && optionalReturnValues.constructor === Array  ) {
          if (Object.prototype.toString.call(optionalReturnValues).slice(8, -1)) {
            var callbackFunction = function(err, data) {
              optionalReturnValues.push(data);
            };
            parameters.push(callbackFunction);
          }
        }
        return thisConnection[methodAndParameters[0]].apply(thisConnection, parameters);
      } else {
        var err = new Error ('Method "' + methodAndParameters[0] + '" doesn\'t exist.  Execution of callInSequence ' +
        'has been terminated (' + (that.howManyMethodsCalled - 1).toString() + ' previous methods successfully called.)');
        err.code = ErrorCode.SpecifiedMethodDoesNotExist;
//        return packageAsyncError(err);
        throw (err);
      }
    }

    function setUpTheNextOne (lastPromise, arrayOfMethodsAndParameters, whichToSetUpNow) { //}, finalCallback) {
      lastPromise.then(function (){
        try {

          var thisPromise = callTheMethod(arrayOfMethodsAndParameters[whichToSetUpNow]);
          if (whichToSetUpNow < arrayOfMethodsAndParameters.length - 1 ) {
              setUpTheNextOne(thisPromise, arrayOfMethodsAndParameters, whichToSetUpNow + 1, theCallback);
          }
          else {
              thisPromise.then(function (data) {
                deferred.resolve(data);
              }, function (err) {
                err.message = 'In ' + getOrdinal(whichToSetUpNow + 1) + ' method "' +
                  arrayOfMethodsAndParameters[whichToSetUpNow][0] + '", ' + err.message;
                deferred.reject(err);
              });
          }
        }
        catch (e) {
          //if (e.type === 'non_object_property_call') {
          //  var err = new Error ("");
          //  deferred.reject(e);
          //
          //}
          deferred.reject(e);
        }

      }, function(err){
        err.message = 'In ' + getOrdinal(whichToSetUpNow) + ' method "' +
          arrayOfMethodsAndParameters[whichToSetUpNow -1][0] + '", ' + err.message;
        deferred.reject(err);
      });
    }

    //var firstPromise = callTheMethod(arrayOfCalls[0]);
    var bogusDeferred = Q.defer();
    bogusDeferred.resolve({});

    setUpTheNextOne(bogusDeferred.promise, arrayOfCalls, 0);

    deferred.promise.nodeify(theCallback);
    return deferred.promise;

  };

  var getOrdinal = function(n) {
    var s=['th','st','nd','rd'],
      v=n%100;
    return n+(s[(v-20)%10]||s[v]||s[0]);
  };

  this.getCachedProperties = function (medcinId, callbackFunction) {

    if (checkForSeveralErrors(callbackFunction, ServerCode.NodeKey, AnswerType.SHORT)) {
      return constructAppropriateError(callbackFunction, ServerCode.NodeKey, AnswerType.SHORT);
    }

    try {

      medcinCache = medcinCache || new medicomp.Cache(thisConnection);

      var cachePromise = medcinCache.getPropertyValuesPromise(medcinId);

      cachePromise.nodeify(callbackFunction);
      return cachePromise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction);
    }

  };


  this.getCachedCodes = function (medcinId, callbackFunction) {

    if (checkForSeveralErrors(callbackFunction, ServerCode.CodeFromMedcin, AnswerType.SHORT)) {
      return constructAppropriateError(callbackFunction, ServerCode.CodeFromMedcin, AnswerType.SHORT);
    }

    try {

      medcinCache = medcinCache || new medicomp.Cache(thisConnection);

      var deferred = Q.defer();
      medcinCache.getAllTheCodesInABigWad(medcinId, function(err, data) {
        if (err) {
          deferred.reject(err);
        } else {
          deferred.resolve(data);
        }
      });
      deferred.promise.nodeify(callbackFunction);
      return deferred.promise;

    }
    catch (e) {
      return createGeneralAsyncError(e, callbackFunction);
    }

  };

  var errorToJSON = function(err) {
    var alt = {};

    Object.getOwnPropertyNames(err).forEach(function (key) {
      alt[key] = this[key];
    }, err);

    return alt;

  };
  //Object.defineProperty(Error.prototype, 'toMedcinClientJSON', {
  //  value: function () {
  //    var alt = {};
  //
  //    Object.getOwnPropertyNames(this).forEach(function (key) {
  //      alt[key] = this[key];
  //    }, this);
  //
  //    return alt;
  //  },
  //  configurable: true
  //});

};


module.exports = Connection;
