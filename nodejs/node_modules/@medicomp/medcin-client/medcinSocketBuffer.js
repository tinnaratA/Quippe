'use strict';
/*jshint bitwise: false*/

//var net = require('net');
//var Q = require ("Q");
//var medicomp = medicomp || require("./index");

var MedcinSocketBuffer = function(serverCode) {

  function getTwoBytesFromShort(numberToAddAs2Bytes) {
    return getACertainNumberOfBytesFromNumber(numberToAddAs2Bytes, 2);
  }

  function getFourBytesFromInteger(numberToAddAs4Bytes) {
    return getACertainNumberOfBytesFromNumber(numberToAddAs4Bytes, 4);
  }

  this.bufferArray = [];
  var serverCodeBytes = getTwoBytesFromShort(serverCode);
  var Validator = require('./medcinValidator');
  var validator = new Validator();

  this.resetValidator = function() {
    validator = new Validator();
  };

  this.pushShort = function(numberToAddAs2Bytes, parameterName) {

    var validated = parameterName.key ?
        validator.limitedSet(parameterName, numberToAddAs2Bytes)
      : validator.short(parameterName, numberToAddAs2Bytes);

    //var validated;
    //if (parameterName.key) {
    //  validated = validator.limitedSet(parameter_name, number_to_add_as_4_bytes);
    //} else {
    //  validated = validator.short(parameterName, numberToAddAs2Bytes);
    //}
    var twoBytesToPush = getTwoBytesFromShort(validated);
    this.bufferArray = this.bufferArray.concat(twoBytesToPush);
  };

  this.pushShorts = function() {
    for (var i = 0; i < arguments.length; i+=2) {
      this.pushShort(arguments[i], arguments[i+1]);
    }
  };

  this.pushInt = function(numberToAddAs4Bytes, parameterName) {

    var validated = parameterName.key ?
        validator.limitedSet(parameterName, numberToAddAs4Bytes)
      : validator.int(parameterName, numberToAddAs4Bytes);

    var fourBytesToPush = getFourBytesFromInteger(validated);
    this.bufferArray = this.bufferArray.concat(fourBytesToPush);

  };

  this.pushInts = function() {
    for (var i = 0; i < arguments.length; i+=2) {
      this.pushInt(arguments[i], arguments[i+1]);
    }
  };

  this.pushDouble = function(numberToAddAs8Bytes, parameterName) {
    var eightBytesToPush = get8BytesFromDouble(validator.double(parameterName, numberToAddAs8Bytes));
    this.bufferArray = this.bufferArray.concat(eightBytesToPush);
  };

  this.pushDoubles = function() {
    for (var i = 0; i < arguments.length; i+=2) {
      this.pushDouble(arguments[i], arguments[i+1]);
    }
  };

  this.pushString = function(stringToAddAsNullTerminatedBytes, parameterName) {
    var validated = validator.string(parameterName, stringToAddAsNullTerminatedBytes);
    var buf = new Buffer(validated);
    var arrayOfBytes =  Array.prototype.slice.call(buf, 0).concat(0);
    this.bufferArray = this.bufferArray.concat(arrayOfBytes);
  };

  this.pushStrings = function() {
    for (var i = 0; i < arguments.length; i+=2) {
      this.pushString(arguments[i], arguments[i+1]);
    }
  };


  this.wrapUpBuffer = function() {
    var howManyBytesWeHaveUsed = this.bufferArray.length;
    var lengthBytes = getFourBytesFromInteger(howManyBytesWeHaveUsed + 6);
    //noinspection JSCheckFunctionSignatures
    this.bufferArray = serverCodeBytes.concat(lengthBytes).concat(this.bufferArray);
  };

  this.getFinalPackedString = function() {
//    var AltBufferArrayAsString = this.bufferArray.toString('utf8');

    return this.bufferArray.toString(); //('ascii');
  };

    function getACertainNumberOfBytesFromNumber(number, howManyBytes) {
        var bytes = new Array(howManyBytes - 1);
        var x = number;
        for (var i = howManyBytes - 1; i > 0; i--) {
            bytes[i]=x & (255);
            x=x>>8;
        }
        bytes[0]=x & (255);
        return bytes;
    }

    function get8BytesFromDouble(numberToAddAs4Bytes) {
//    return getACertainNumberOfBytesFromNumber(numberToAddAs4Bytes, 4);
    var buf = new Buffer(8);
    buf.writeDoubleBE(numberToAddAs4Bytes,0);
    return Array.prototype.slice.call(buf, 0);
  }


};

module.exports = MedcinSocketBuffer;