/*** Created by pkarcher on 1/9/2015.*/
'use strict';

require('should');
var medicomp = medicomp || require('../index');

describe('medicomp.ResultBuffer', function () {

  describe('when popping values from the buffer', function () {

    it('popString returns the correct values', function () {
      var rb = new medicomp.ResultBuffer([0, 113, 0, 0, 0, 15, 126, 84, 32, 116, 101, 115, 116, 115, 0, 0, 52, 55, 0,
          87, 104, 97, 116, 32, 116, 104, 101, 32, 64, 35, 36, 64, 32, 33, 63, 33, 0]);
      rb.byteArray.length.should.equal(31);
      rb.popString().should.equal('~T tests');
      rb.popString().should.equal('');
      rb.popString().should.equal('47');
      rb.popString().should.equal('What the @#$@ !?!');
      (rb.popString() === null).should.equal(true);
    });

    it('popShort returns the correct values', function () {
      var rb = new medicomp.ResultBuffer([0, 113, 0, 0, 0, 16, 0, 42,
        100, 1, 255, 255, 236, 120, 122, 46]);
      rb.popShort().should.equal(42);
      rb.popShort().should.equal(25601);
      rb.popShort().should.equal(-1);
      rb.popShort().should.equal(-5000);
      rb.popShort().should.equal(31278);
      (rb.popShort() === null).should.equal(true);
    });

    it('popInt returns the correct values', function () {
      var rb = new medicomp.ResultBuffer([0, 113, 0, 0, 0, 26, 0, 15, 66, 64, 253, 127, 33, 128,
        0, 0, 0, 0, 127, 177, 104, 19, 255, 255, 255, 0]);
      rb.popInt().should.equal(1000000);
      rb.popInt().should.equal(-42000000);
      rb.popInt().should.equal(0);
      rb.popInt().should.equal(2142332947);
      rb.popInt().should.equal(-256);
      (rb.popInt() === null).should.equal(true);
    });

    it('popDouble returns the correct values', function () {
      var rb = new medicomp.ResultBuffer([0, 113, 0, 0, 0, 26, 64, 68, 0, 0, 0, 0, 0, 0, 64, 55, 87, 206, 217, 22, 135, 43,
        192, 175, 64, 51, 38, 23, 193, 190, 190, 221, 211, 96, 203, 216, 237, 40]);
      rb.popDouble().should.equal(40);
      rb.popDouble().should.equal(23.343);
      rb.popDouble().should.equal(-4000.0999);
      rb.popDouble().should.equal(-0.000007111);
      (rb.popDouble() === null).should.equal(true);
    });

    it('popByte returns the correct values', function () {
      var rb = new medicomp.ResultBuffer([0, 113, 0, 0, 0, 9, 0, 42, 255]);
      rb.popByte().should.equal(0);
      rb.popByte().should.equal(42);
      rb.popByte().should.equal(255);
      (rb.popByte() === null).should.equal(true);
    });

  });

});
