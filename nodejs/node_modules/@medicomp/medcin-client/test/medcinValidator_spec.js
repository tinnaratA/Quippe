/*** Created by pkarcher on 2/4/2015.*/
'use strict';

var should = require('should');
var medicomp = medicomp || require('../index');
var specHelper = require('./SpecHelper');
var ParamType = require('../internalEnums').ParamTypes;

var validator;

var reportError = function (intro) {
  if (specHelper.doExtraTestReporting) {
    console.log('\r\n' + intro + ': --> ' + validator.lastError);
  }
};


describe('medicomp.validator', function () {

  describe('string', function () {

    it('does nothing if string parameter is valid', function () {
      validator = new medicomp.Validator();
      validator.string('taco', 'asdfasdf').should.equal('asdfasdf');
    });

    it('accepts anything passed in except Dates, Arrays, and Error objects ' +
    '', function () {
      validator = new medicomp.Validator();
      validator.string('taco', 23).should.equal('23');
      validator.string('ninja', 89.2335).should.equal('89.2335');
      // the below are not any sort of spec or desired behavior, but just illustrating what will happen
      // in some weird situations.  This what we want?  Does it matter?
      validator.string('odd job', true).should.equal('true');
      validator.string('jaws', {biff: 7}).should.equal('[object Object]');
      should(function(){validator.string('Vader', [1, 2]);}).throw();
      reportError ('6th (string) parameter Vader an Array');
      should(function(){validator.string('Wilson', new Error('what?'));}).throw();
      reportError ('7th (string) parameter Wilson an Error object');
//      validator.string('Vader', [1, 2]).should.equal('1,2');
//      validator.string('Wilson', new Error('what?')).should.equal('Error: what?');
    });

    it('does not accept Date type or undefined', function () {
      validator = new medicomp.Validator();
      validator.string('boston', 'All work and no play makes Patrick a dull boy.');
      validator.string('lexington', 'Itchy');
      validator.string('concord', 'Scratchy');
      validator.string('sperryville', '');
      should(function(){validator.string('gordita', new Date(1972,11,26));}).throw();
      reportError ('5th (string) parameter gordita a Date object');
      should(function(){validator.string('tamale', new Date(1972,11,26,7,7,7));}).throw();
      reportError ('6th (string) parameter tamale a Date object');
    });

    it('takes null and "" by default, but not undefined', function () {
      validator = new medicomp.Validator();
      validator.string('anchovie', null).should.equal('');
      validator.string('stew', '').should.equal('');
      should(function(){validator.string('severes', undefined);}).throw();
      reportError ('3rd (string) parameter severes undefined');
    });

  });

  describe('short', function () {

    it('does nothing if variable can be coerced to short, but throws error if not', function () {

      validator = new medicomp.Validator();

      validator.short('chocolate', 32029).should.equal(32029);

      should(function(){validator.short('strawberry', 42389);}).throw();
      reportError ('2nd parameter strawberry to big for signed short');

      validator.short('vanilla', -7).should.equal(-7);

      should(function(){validator.short('butter pecan', 'lemon');}).throw();
      reportError ('4th parameter bp was non-numeric string');

      validator.short('cookie doh', '234').should.equal(234);
      validator.short('cookie doh', ' -1234').should.equal(-1234);

      should(function(){validator.short('fudge_ripple', [4,5]);}).throw();
      reportError ('7th parameter fr was actually array of shorts');

      should(function(){validator.short('butterPecan', 876.543);}).throw();
      reportError ('8th parameter butterPecan was the float 876.543');

    });

  });

  describe('int', function () {

    it('does nothing if variable is valid, but throws error if not valid', function () {

      validator = new medicomp.Validator();

      validator.int('captain america', 423890).should.equal(423890);

      should(function(){validator.int('hulk', 2147483649);}).throw();
      reportError ('2nd parameter hulk too big for signed integer');

      validator.int('black widow', -7).should.equal(-7);

      should(function(){validator.int('thor', 'lemon');}).throw();
      reportError ('4th parameter thor was non-numeric string');

      validator.int('cookie doh', '234').should.equal(234);

      should(function(){validator.int('ironMan', new Date(1972,11,26));}).throw();
      reportError ('6th parameter ironMan was actually a Date type');

      should(function(){validator.short('hawkEye', 400.01);}).throw();
      reportError ('7th parameter hawkEye was the float 400.01');

    });

  });

  describe('double', function () {

    it('does nothing if variable is valid, but throws error if not valid', function () {

      validator = new medicomp.Validator();

      validator.double('Bilbo', 7777777777777777777777777777777777777777777777777777);
      validator.double('Frodo', -7777777777777777777777777777777777777777777777777777)
        .should.equal(-7777777777777777777777777777777777777777777777777777);
      validator.double('Sam', -0.00000000000234234324239048093423408903)
        .should.equal(-0.00000000000234234324239048093423408903);
      should(function(){validator.double('Peregrin', 'lemon');}).throw();
      reportError('4th parameter Pippin was non-numeric string');
      validator.double('Fatty Bolger', '-23740972835.234897324');
      should(function(){validator.double('meriadoc', Date.new(1972,11,26));}).throw();
      reportError('6th parameter meriadoc was actually a Date type');

    });

  });


  //describe("listSize", function () {
  //
  //  it("returns the same value if it's valid", function () {
  //
  //    validator = new medicomp.Validator();
  //
  //    should(function()(validator.list_size(1)).to eq 1
  //    should(function()(validator.list_size('3')).to eq 3
  //    should(function(){validator.list_size(0)}).throw();
  //    reportError("3rd parameter 'list_size' was 0");
  //    should(function(){validator.list_size('taco')}).throw();
  //    reportError("4th parameter 'list_size' was 'taco'");
  //
  //  });
  //
  //});

  describe('limitedSet', function () {

    it('returns success or failure based on pre-set valid values', function () {

      validator = new medicomp.Validator();

      validator.limitedSet(ParamType.ReferenceInfo, 0).should.equal(0);
      validator.limitedSet(ParamType.ReferenceInfo, 8).should.equal(8);
      should(function(){validator.limitedSet(ParamType.ReferenceInfo, -1);}).throw();
      should(function(){validator.limitedSet(ParamType.ReferenceInfo, 4);}).throw();
      reportError('4th parameter \'reference info\' was invalid value 4');
      validator.limitedSet(ParamType.NarrativeContext, 4).should.equal(4);
      should(function(){validator.limitedSet(ParamType.NarrativeOutput, 4);}).throw();
      validator.limitedSet(ParamType.RtfElement, 15).should.equal(15);
      validator.limitedSet(ParamType.RtfElement, 105).should.equal(105);
      should(function(){validator.limitedSet(ParamType.RtfElement, 55);}).throw();
      reportError('9th parameter \'rtfElement\' was invalid value 55');
      validator.limitedSet(ParamType.CodeSet, 33).should.equal(33);
      should(function(){validator.limitedSet(ParamType.CodeSet, 34);}).throw();
      reportError('11th parameter \'code_set\' was invalid value 34');

    });

  });

});
