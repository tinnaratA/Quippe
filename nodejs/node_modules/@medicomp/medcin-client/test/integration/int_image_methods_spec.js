/**
* Created by pkarcher on 3/16/2015.
*/
'use strict';

//var Q = require ('Q');
var specHelper = require('../SpecHelper');
var medicomp = medicomp || require(__dirname + '/../../index');
var fs = require('fs');

var conn;
var aValidImageId;

var assertItAndDone = function assertItAndDone (err, done, assertion) {
  if (err) {
    done(err);
  }
  else {
    assertion();
    done();
  }
};

describe('(int)medicomp.Connection image methods', function () {

  beforeEach(function(done) {
    conn = new medicomp.Connection(specHelper.getTestConfiguration());
    conn.connectionPromise.then(function() { done(); },
                                function(err) { done(err); });
  });

  afterEach(function() {
    conn.medcinEnd();
  });

  describe('when calling imageSupport method', function () { // #200
    it('works', function (done) {
      conn.connectionPromise.then(function () {
        conn.imageSupport(function(err, data) {
          assertItAndDone(err, done, function (){ data.should.equal(1); });
        });
      });
    });
  });

  describe('when calling getImageId method', function () { // #201
    it('works for one', function (done) {
      conn.connectionPromise.then(function () {
        conn.getImageId(1,2,2, function(err, data) { // #18
          assertItAndDone(err, done, function (){ data.should.be.greaterThan (0); });
        });
      });
    });

    it('works for another one', function (done) {
      conn.connectionPromise.then(function () {
        conn.getImageId(1,5,4, function(err, data) { // #27
          assertItAndDone(err, done, function (){ data.should.be.greaterThan (0); });
        });
      });
    });

    it('and another one', function (done) {
      conn.connectionPromise.then(function () {
        conn.getImageId(0,0,0, function(err, data) {
          aValidImageId = data;
          assertItAndDone(err, done, function (){ data.should.be.greaterThan (0); });
        });
      });
    });
  });

  describe('when calling getImageLen method', function () { // #202
    it('works', function (done) {
      conn.connectionPromise.then(function () {
        conn.getImageLen(aValidImageId, function(err, data) {
          assertItAndDone(err, done, function (){ data.should.be.greaterThan (0); });
        });
      });
    });
  });

  describe('when calling getImage method', function () { // #203
    it('gets an image Array of bytes', function (done) {
      conn.connectionPromise.then(function () {
        conn.getImage(aValidImageId, function(err, data) {

//        Uncomment these lines to write the file out so you can check it out.
          fs = require('fs');
          var buf = new Buffer(data);
          fs.writeFile(__dirname + '/' + aValidImageId + '.png', buf, function (err) {
            if (err) {
              throw (err);
            }
          });

          assertItAndDone(err, done, function () {
            Object.prototype.toString.call(data).should.equal('[object Array]');
            data.length.should.be.greaterThan (0);
          });
        });
      });
    });
  });

  describe('when calling getImageIdEx method', function () { // #227
    it('works', function (done) {
      conn.connectionPromise.then(function () {
        // #27  the only combination I could find that returned anything.
        conn.getImageIdEx(1, 5, 4, 0, function(err, data) {
          assertItAndDone(err, done, function (){ data.should.be.greaterThan (0); });
        });
      });
    });
  });

});
