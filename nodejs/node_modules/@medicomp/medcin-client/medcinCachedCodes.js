/*** Created by pkarcher on 2/3/2015.*/
'use strict';

var medicomp = medicomp || require('./index');
//var Q = require ("Q");
//var ServerCode = require("./ServerCodes");

var CodeSet  = {
  None: 0,
  CCC: 1,
  Medispan: 2,
  SNOMED: 3,
  LabCorp: 4,
  ICD10: 5,
  ICD: 6,
  ICD2: 7,
  ICDOM: 8,
  ICDOT: 9,
  ICDH: 10,
  ICDF: 11,
  ICDNEC: 12,
  ICDCAT: 13,
  ICDALT: 14,
  ICDOSpec: 15,
  ICDOther: 16,
  ICDProc: 17,
  ACC: 18,
  CPT: 19,
  CPTMod: 20,
  CPTAMod: 21,
  HCPC: 22,
  DSM: 23,
  CAS: 24,
  LOINC: 25,
  CDT: 26,
  ICDMan: 27,
  FDB: 28,
  Multum: 29,
  Quest: 30,
  RxNorm: 31,
  CVX: 32,
  UNII: 33,
  CVXH: 36,
  FirstConsult: 37,
  NANDA: 38,
  DODUC: 39
};

var CachedCodes = function(medcinId, codesList) {

  this.medcinId = medcinId;

  this.codesList = codesList;

  this.codeFromMedcin = function (codeSet) {

    if (typeof codeSet === 'string') {codeSet = parseInt(codeSet);}

    var lastMapSet = 0;
    var useMulti = [CodeSet.ICD10, CodeSet.SNOMED, CodeSet.RxNorm, CodeSet.LOINC]
        .indexOf(codeSet) > -1;
    var stringToReturn = '';
    if (medcinId === 0) {
      return '';
    }

    for (var i = 0; i < codesList.length; i++) {
      var aCode = codesList[i];

      if (aCode.codeSet > codeSet) {
        return stringToReturn;
      }

      if (aCode.codeSet === codeSet) {
        if (!useMulti) {
          return aCode.code;
        }
        if (stringToReturn === '') {
          lastMapSet = aCode.mapSet;
        } else {
          if (aCode.mapSet !== lastMapSet) {
            stringToReturn = stringToReturn + '|';
            lastMapSet = aCode.mapSet;
          } else {
            stringToReturn = stringToReturn + '\\';
          }
        }
        stringToReturn = stringToReturn + aCode.code;
      }

    }

    return stringToReturn;

  };

};

// This chunk of code adds explicit methods called "SNOMED", "ICD10", etc. to the
// CachedCodes prototype
function makeCodeProperty (CC, theCode, theNumber) {
  Object.defineProperty(CC.prototype, theCode, {
    get: function() {
      return this.codeFromMedcin(theNumber);
    }
  });
}
for (var code in CodeSet) {
  if (CodeSet.hasOwnProperty(code) ){
    makeCodeProperty(CachedCodes, code, CodeSet[code]);
  }
}


module.exports = CachedCodes;