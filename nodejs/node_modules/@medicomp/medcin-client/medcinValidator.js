/*** Created by pkarcher on 2/4/2015.*/
'use strict';

var ParamType = require('./internalEnums').ParamTypes;
var ErrorCode = require('./internalEnums').ErrorCodes;

var Validator = function () {

  var counter = 0;

  var that = this;

  this.lastError = null;

  function flag(message, code, possibleCallbackFunction) {

    var which = '#' + counter;
    if (counter < 9) {
      which = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th'][counter - 1];
    }

    that.lastError = which + ' ' + message;

    var newError = new Error(that.lastError);
    if (code) {
      newError.code = code;
    }
    if (typeof possibleCallbackFunction === 'function') {
      newError.possibleCallbackFunction = possibleCallbackFunction;
    }
    throw newError;

  }

  this.string = function (nameOfVariable, value) {
    counter++;

    if (typeof value === 'function') {
      return flag ('parameter ' + nameOfVariable + ' is a function, which is not an accepted parameter type.  ' +
        'possibly a parameter was skipped and the callback function slipped into its spot.',
        ErrorCode.ParameterActuallyFunction, value);
    }

    if (value === undefined) {
      flag ('parameter ' + nameOfVariable + ' is undefined, which is not an accepted parameter value.',
        ErrorCode.ParameterMissing);
    }
    else if (value === null) {
      return '';
    }
    else if (value instanceof Date || Object.prototype.toString.call(value) === '[object Date]') {
      flag ('parameter ' + nameOfVariable + ' not a valid string.  The date object is not a valid format for Medcin ' +
        'client date parameters.  Pass a string type in the format specified in the Medcin Client API documentation.',
        ErrorCode.ParameterWrongType);
    }
    else if (value instanceof Array || value instanceof Error) {
      flag ('parameter ' + nameOfVariable + ' not a valid string.  We\'re pretty flexible on what we accept for ' +
        'string parameters, but you passed in something really weird like an Array or Error object.',
        ErrorCode.ParameterWrongType);
    }
    else if (!(value instanceof String)) {
      return value.toString();
    }
    else {
      return value;
    }
  };

  this.short = function (nameOfVariable, value) {

    var theNumber = validateNumber(nameOfVariable, value, 2, flag);

    if (theNumber > 32767 || theNumber < -32768) {
      flag('parameter ' + nameOfVariable + ' was a valid number (' + value + '), but not in a valid range.  ' +
      'It must be between -32768 and 32767, inclusive.', ErrorCode.ParameterOutOfRange);
    }

    return theNumber;
  };

  this.int = function (nameOfVariable, value) {

    var theNumber = validateNumber(nameOfVariable, value, 4, flag);

    if (theNumber > 2147483647 || theNumber < -2147483648) {
      flag('parameter ' + nameOfVariable + ' was a valid number (' + value + '), but not in a valid range.  ' +
      'It must be between -2147483648 and 2147483647, inclusive.', ErrorCode.ParameterOutOfRange);
    }

    return theNumber;
  };

  this.double = function (nameOfVariable, value) {
    return validateNumber(nameOfVariable, value, 8, flag);
  };


  this.limitedSet = function(type, value) {

    var validValues;
    var validity;

    var validatedNumber = validateNumber(type.name, value, 0, flag);

    switch (type.key) {
      // *** below here is generated ***
      case ParamType.DebugOutputLevel.key :
        validValues = arrayFromRange(0,4);
        break;
      case ParamType.ListSize.key :
        validValues = arrayFromRange(1,3);
        break;
      case ParamType.TermType.key :
        validity = '0, 1, 2, 3, 5, 6, or 7.  (4 is not valid!)';
        validValues = arrayFromRange(0,3).concat(arrayFromRange(5,7));
        break;
      case ParamType.CodeSet.key :
        validity = 'range between 0 and 39, inclusive, but excluding 34 & 35';
        validValues = arrayFromRange(0,33).concat(arrayFromRange(36,39));
        break;
      case ParamType.MedcinGroup.key :
        validValues = arrayFromRange(0,64).concat(arrayFromRange(98,101));
        break;
      case ParamType.NarrativeOutput.key :
        validValues = arrayFromRange(0,3);
        break;
      case ParamType.NarrativeContext.key :
        validValues = arrayFromRange(0,6);
        break;
      case ParamType.DatePrecision.key :
        validValues = [63, 65, 68, 72, 73, 77, 83, 84, 87, 89, 90];
        break;
      case ParamType.RtfElement.key :
        validity = '0 through 16 inclusive, or 100 through 107 inclusive';
        validValues = arrayFromRange(0,16).concat(arrayFromRange(100,107));
        break;
      case ParamType.RtfFont.key :
        validValues = [0, 1, 2];
        break;
      case ParamType.RtfColor.key :
        validity = '0 through 15 inclusive';
        validValues = arrayFromRange(0, 15);
        break;
      case ParamType.BorderColor.key :
        validity = '0 through 15 inclusive';
        validValues = arrayFromRange(0, 15);
        break;
      case ParamType.DocCode.key :
        validValues = [0, 1, 2];
        break;
      case ParamType.ReferenceInfo.key :
        validValues = arrayFromRange(0,3).concat([8]);
        break;
      case ParamType.DateSortOrder.key :
        validValues = [0, 1];
        break;
      case ParamType.LinkPmh.key :
        validValues = [0, 1, 2];
        break;
      // *** above here is generated ***
      default:
        flag ('parameter ' + type + ' is set to have unique value constraints, but those constraints are not defined.');
    }
    if (validValues.indexOf(validatedNumber) === -1) {
      if (validity === null) {
        validity = validValues.toString();
      }
      flag ('parameter ' + type.name + ' was a valid number (' + validatedNumber +
        '), but was not one of the specific valid values:  ' + validity + ' .', ErrorCode.ParameterOutOfRange);
    }
    return validatedNumber;
  };

  function arrayFromRange(first, last) {
    var newArray = [];
    for (var i = first; i < last +1; i++) {
      newArray.push(i);
    }
    return newArray;
  }


  function validateNumber(nameOfVariable, value, bytes, flag) {
    counter++;

    if (typeof value === 'function') {
      return flag ('parameter ' + nameOfVariable + ' is a function, which is not an accepted parameter type.  ' +
        'possibly a parameter was skipped and the callback function slipped into its spot.',
        ErrorCode.ParameterActuallyFunction, value);
    }

    if (value === null) { // jshint ignore:line
      return flag ('parameter ' + nameOfVariable + ' is ' + typeof value + ', which is not an accepted parameter value.', ErrorCode.ParameterMissing);
    }

    if (value === undefined) { // jshint ignore:line
      return flag ('parameter ' + nameOfVariable + ' is undefined, which is not an accepted parameter value.', ErrorCode.ParameterMissing);
    }

    if (typeof value === 'string' && value !== "0" && value == 0) { // jshint ignore:line
      return flag ('parameter ' + nameOfVariable + ' is a string that could not be converted into a number.', ErrorCode.ParameterWrongType);
    }

    if (isNaN(value)) {
      return flag ('parameter ' + nameOfVariable + ' is a "' + Object.prototype.toString.call(value) + '" that could not be converted into a number.',
        ErrorCode.ParameterWrongType);
    }

    if (value instanceof Array) {
      return flag ('parameter ' + nameOfVariable + ' is an Array, which is not an accepted parameter value.',
        ErrorCode.ParameterWrongType);
    }

    var theNumber;

    if (bytes < 6) {

      theNumber = parseInt(value, 10);

      //var nacho = (typeof theNumber === 'number');
      //var taco = (theNumber != value);
      //var fajita = (theNumber !== value);

      if ((typeof theNumber === 'number') && theNumber != value) {
        return flag ('parameter ' + nameOfVariable + ' is supposed to be an integer, but is a float (' + value + ') .',
          ErrorCode.ParameterWrongType);
      }

    } else {

      theNumber = (typeof value === 'number') ? value : parseFloat(value);

    }

    if (isNaN(theNumber)) {
      flag('parameter ' + nameOfVariable + ' was of type ' + typeof value + ' and could not be converted to a number.',
        ErrorCode.ParameterWrongType);
    }

    return theNumber;
  }


};

module.exports = Validator;
