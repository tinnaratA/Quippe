/*** Created by pkarcher on 2/11/2015.*/
'use strict';

require('should');
var medicomp = medicomp || require('../../index');
var ErrorTestingHelper = require('./ErrorTestingHelper');

require ('Q');
var specHelper = require('../SpecHelper');
//require('../../connection');


describe('calling methods in various messed up ways', function () {

  describe('When methods are called without waiting for the connection to be established (#1)', function () {

    it('gives good error', function(done) {

      var ETH = new ErrorTestingHelper(done,
        'When methods are called without waiting for the connection to be established');

      var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {
          niceConsistentErrors[0].should.have.property('code');
          niceConsistentErrors[0].code.should.equal('mc-NC1');
      };

      var functionThatPreparesConnection = function functionThatPreparesConnection() {
        var conn = new medicomp.Connection(specHelper.getTestConfiguration());
        conn.connectionPromise.then(function(conn){
          conn.medcinEnd();
        });
        return conn;
      };

      ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, functionThatPreparesConnection,
        ETH.constructStandardTestCalls());

    });
  });

  if (specHelper.doTimeConsumingTests) {
    describe('When methods are called after a connection failed to happen (#2)', function () {
      it('gives good error', function(done) {

        var ETH = new ErrorTestingHelper(done,
          'When methods are called after a connection failed to happen');

        var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {
            niceConsistentErrors[0].should.have.property('code');
            niceConsistentErrors[0].code.should.equal('mc-NC2');
        };

        var conn = new medicomp.Connection({host: 1234, port: 4321});

        conn.connectionPromise.then(null, function() {
          ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, conn, ETH.constructStandardTestCalls());
        });

      });
    });
  }

  describe('When calling methods where the last parameter is not given (#3)', function () {
    it('gives good error', function(done) {

      var ETH = new ErrorTestingHelper(done, 'When calling methods where the last parameter is not given');

      var incompleteCalls = [['codeFromMedcin', 313196, 3], //, 1],
        ['codeFromMedcin', 1583, 3],//, 0],
        ['getCachedCodes'],//, 32881],
        ['setDebugOutput'],//, 2],
        ['activateExpansion'],//, 102905],
        ['codeFromMedcin', 313196, 3], //, 1],
        ['getProperty', 102905, 'Takes'],
        ['histAddDocName', 5], //, 'Dr. Bob']
        ['wordSearch']];//, 0] ]

      var copyOfArray = [];
      incompleteCalls.slice().forEach(function(methodAndParameters) {
        copyOfArray.push(methodAndParameters.slice());
      });
      incompleteCalls.push(['callInSequence', copyOfArray]);

      incompleteCalls = incompleteCalls.concat([['getCachedProperties'], ['getCachedCodes']]);

      var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {

          niceConsistentErrors[0].should.have.property('code');
          niceConsistentErrors[0].code.should.equal('mc-PV1');

          var expectedErrorCodeForWhenCallbackIsIncluded = 'mc-PV2';
          if (ETH.currentMethodName === 'callInSequence') {
            expectedErrorCodeForWhenCallbackIsIncluded = 'mc-PV1'; // because callback function is not passed to validator;
          }
          niceConsistentErrors[1].should.have.property('code');
          niceConsistentErrors[1].code.should.equal(expectedErrorCodeForWhenCallbackIsIncluded);
          niceConsistentErrors[2].should.have.property('code');
          niceConsistentErrors[2].code.should.equal(expectedErrorCodeForWhenCallbackIsIncluded);
      };

      var conn = new medicomp.Connection(specHelper.getTestConfiguration());

      conn.connectionPromise.then(function(conn){
        ETH.specialConfiguration.errorConsistency = [false, true, true];
        ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, conn, incompleteCalls );
      });

    });
  });

  describe('When calling methods where a number parameter is null or undefined or undefined string (#4)', function () {

    it('gives good error', function(done) {

      var ETH = new ErrorTestingHelper(done,
        'When calling methods where a number parameter is null or undefined or undefined string');

      var incompleteCalls = [['codeFromMedcin', null, 3, 1],
        ['codeFromMedcin', undefined, 3, 0],
        ['getCachedCodes', null],
        ['setDebugOutput', undefined],
        ['activateExpansion', null],
        ['codeFromMedcin', 313196, 3, undefined],
        ['getProperty', 102905, undefined, 0],
        ['histAddDocName', null, 'Dr. Bob'],
        ['wordSearch', undefined]];

      var copyOfArray = [];
      incompleteCalls.slice().forEach(function(methodAndParameters) {
        copyOfArray.push(methodAndParameters.slice());
      });
      incompleteCalls.push(['callInSequence', copyOfArray]);

      incompleteCalls = incompleteCalls.concat([['getCachedProperties', undefined], ['getCachedCodes', null]]);

      var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {
          niceConsistentErrors[0].should.have.property('code');
          niceConsistentErrors[0].code.should.equal('mc-PV1');
      };

      var conn = new medicomp.Connection(specHelper.getTestConfiguration());
      conn.connectionPromise.then(function(conn){
        ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, conn, incompleteCalls);
      });

    });
  });

  describe('When calling methods where a number parameter is an invalid type (#5)', function () {
    it('gives good error', function(done) {

      var ETH = new ErrorTestingHelper(done,
        'When calling methods where a number parameter is an invalid type');

      var incompleteCalls = [['codeFromMedcin', 313196, 'z', 1],
        ['codeFromMedcin', 1583, 17.5, 0],
        ['getCachedCodes', new Date(1972, 11, 26)],
        ['setDebugOutput', [2345, 2]],
        ['activateExpansion', '18.2'],
        ['codeFromMedcin', 313196, new Error('muffin'), 1],
        ['getProperty', '102905', ['marinara', 'lasagna'], 0 ],
        ['histAddDocName', new medicomp.SocketBuffer(45), 'Dr. Bob'],
        ['wordSearch', new Date(1971, 9, 21)] ];

      var copyOfArray = [];
      incompleteCalls.slice().forEach(function(methodAndParameters) {
        copyOfArray.push(methodAndParameters.slice());
      });
      incompleteCalls.push(['callInSequence', copyOfArray]);

      incompleteCalls = incompleteCalls.concat([['getCachedProperties', 324.1], ['getCachedCodes', 'wilson']]);

      var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {
        niceConsistentErrors[0].should.have.property('code');
        niceConsistentErrors[0].code.should.equal('mc-PV3');
      };

      var conn = new medicomp.Connection(specHelper.getTestConfiguration());
      conn.connectionPromise.then(function(conn){
        ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, conn, incompleteCalls);
      });

    });
  });

  describe('When calling methods with wrong enums or number out or range (#6)', function () {
    it('gives good error', function(done) {

      var ETH = new ErrorTestingHelper(done,
        'When calling methods with wrong enums or number out or range');

      var outOfRangeCalls = [['activateDx', 3, 4],
        ['activateDx', 4, 7],
        ['getCachedCodes', 2147483648],
        ['setDebugOutput', 5],
        ['activateExpansion', -3000000000],
        ['addDxPrompt', 100000, 100000, '', 0, 0],
        ['addDxPrompt', 100000, 200000, '', 1, 34000],
        ['histAddDocName', 3000000000, 'Dr. Bob']];

      var copyOfArray = [];
      outOfRangeCalls.slice().forEach(function(methodAndParameters) {
        copyOfArray.push(methodAndParameters.slice());
      });
      outOfRangeCalls.push(['callInSequence', copyOfArray]);

      outOfRangeCalls = outOfRangeCalls.concat([['getCachedProperties', 2500000000], ['getCachedCodes', 3000000000]]);

      var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {
        niceConsistentErrors[0].should.have.property('code');
        niceConsistentErrors[0].code.should.equal('mc-PV4');
      };

      var conn = new medicomp.Connection(specHelper.getTestConfiguration());
      conn.connectionPromise.then(function(conn){
        ETH.specialConfiguration.addAndProcessCallback = false;
        ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, conn, outOfRangeCalls);
      });

    });
  });

  describe('When calling callInSequence with methods that don\'t exist (#8)', function () {
    it('gives good error', function(done) {

      var ETH = new ErrorTestingHelper(done,
        'When calling callInSequence with methods that don\'t exist');

      var firstSet = [['tacoHell', 313196, 3, 1],
        ['codeFromMedcin', 1583, 3, 0],
        ['getCachedCodes', 32881],
        ['setDebugOutput', 2],
        ['activateExpansion', 102905],
        ['codeFromMedcin', 313196, 3, 1],
        ['getProperty', 102905, 'Takes', 0]];

      var secondSet = [['codeFromMedcin', 313196, 3, 1],
        ['codeFromMedcin', 1583, 3, 0],
        ['getCachedCodes', 32881],
        ['tacoHeaven', 2],
        ['activateExpansion', 102905],
        ['codeFromMedcin', 313196, 3, 1],
        ['getProperty', 102905, 'Takes', 0]];

      var thirdSet = [['codeFromMedcin', 313196, 3, 1],
        ['codeFromMedcin', 1583, 3, 0],
        ['getCachedCodes', 32881],
        ['setDebugOutput', 2],
        ['activateExpansion', 102905],
        ['codeFromMedcin', 313196, 3, 1],
        ['tacoTuesday', 102905, 'Takes', 0]];

      var flawedCalls = ([['callInSequence', firstSet]]);
      flawedCalls.push(['callInSequence', secondSet]);
      flawedCalls.push(['callInSequence', thirdSet]);

      var functionToMakeSureErrorWasCorrect = function functionToMakeSureErrorWasCorrect(niceConsistentErrors) {
        niceConsistentErrors[0].should.have.property('code');
        niceConsistentErrors[0].code.should.equal('mc-PV6');
      };

      var conn = new medicomp.Connection(specHelper.getTestConfiguration());
      conn.connectionPromise.then(function(conn){
        ETH.tryTheseOneAfterAnother(functionToMakeSureErrorWasCorrect, conn, flawedCalls);
      });

    });
  });


});
