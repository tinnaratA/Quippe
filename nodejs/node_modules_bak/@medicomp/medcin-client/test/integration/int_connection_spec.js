/*** Created by pkarcher on 12/19/2014.*/
'use strict';

var should = require('should');
var medicomp = medicomp || require(__dirname + '/../../index');
//var medicomp = medicomp || require('medicomp');

var specHelper = require(__dirname + '/../SpecHelper');
//require(__dirname + '/../../connection');

var lintDummy;

describe('(int)medicomp.Connection', function () {

  if(specHelper.doTimeConsumingTests) {

    describe('when trying to connect with bad credentials', function () {

      it('fails correctly and clearly, by promise', function (done) {
        var mc = specHelper.getTestConfiguration();
        mc.host = 'Frodo7';
        var conn = new medicomp.Connection(mc);
        lintDummy = conn.should.be.an.Object;
        (conn.isConnected === null).should.equal(true);
        (conn.isOpen() === null).should.equal(true);
        conn.connectionPromise.then(function(){ //data
          return done(new Error('with bad host, connection should communicate failure.'));
        }, function(err) {
          //noinspection BadExpressionStatementJS
          err.should.be.an.Object; // jshint ignore:line
          //noinspection BadExpressionStatementJS
          err.inner.should.be.an.Object; // jshint ignore:line
          conn.isConnected.should.equal(false);
          conn.isOpen().should.equal(false);
          //noinspection BadExpressionStatementJS
          conn.lastError.should.be.an.Object; // jshint ignore:line
          //noinspection BadExpressionStatementJS
          conn.lastError.inner.should.be.an.Object; // jshint ignore:line
          done();
        });
      });

      it('fails correctly and clearly, by callback', function (done) {
//        var conn = mc.getConnection(function(err, nullConnParameter) {
        var config = new medicomp.Configuration();
        config.port = '24601';
        var conn = new medicomp.Connection(config, function(err, connectionObject) {
        //noinspection BadExpressionStatementJS
        err.should.be.an.Object; // jshint ignore:line
        conn.isConnected.should.equal(false);
        conn.isOpen().should.equal(false);
        //noinspection BadExpressionStatementJS
        conn.lastError.should.be.an.Object; // jshint ignore:line
        //noinspection BadExpressionStatementJS
        conn.lastError.inner.should.be.an.Object; // jshint ignore:line
        //noinspection BadExpressionStatementJS
        should(connectionObject === undefined).be.true; // jshint ignore:line
        done();
        });

      });

    });

  } else {
    describe('when connecting with bad credentials', function () {
      it ('maybe bad host/port connecting fails correctly, and maybe not.  Turn the "bad connection" tests ' +
        'back on in SpecHelper.js by turning the "doTimeConsumingConnectionFailureTests" variable to true.');
    });
  }

  describe('when trying to connect with an old client version', function () {
    it('fails clearly with correct error message', function(done) {
//      NoConnectionProbablyBadVersion : 'mc-NC3',
      var clientVersion = {      major1 : '1',
        minor2 : '19',
        build3 : '20102',
        revision4 : '3',
        full : '2.19.20100.3'
      };
      var fakeConfig = specHelper.getTestConfiguration();
      fakeConfig.version = clientVersion;
      var conn = new medicomp.Connection(fakeConfig);
      conn.connectionPromise.then(function() {
          medicomp.clientVersion = undefined;
          done(new Error('Given old version, connection should have errored out, but did now'));
        }, function(err) {
          try {
            //noinspection BadExpressionStatementJS
            err.should.be.an.Object;
            err.should.have.property('code'); //should. exist(err.code, "expected Error.code property to exist.");
            err.code.should.equal('mc-NC3');
            conn.isConnected.should.equal(false);
            conn.isOpen().should.equal(false);
            done();
          } catch(e) {
            done(e);
          }
      });
    });
  });

  describe('when trying to connect with good credentials', function () {

    it('connects correctly and clearly, by promise', function (done) {
      try {
        var conn = new medicomp.Connection(specHelper.getTestConfiguration());
        //noinspection BadExpressionStatementJS
        conn.should.be.an.Object; // jshint ignore:line
        (conn.isConnected === null).should.equal(true);
        (conn.isOpen() === null).should.equal(true);
        conn.connectionPromise.then(function (conn) {
          conn.isConnected.should.equal(true); // jshint ignore:line
          conn.isOpen().should.equal(true);
          (conn.lastError === null).should.equal(true);
          done();
        }, function () { //(err)
          return done('it should never get here');
        });
      } catch (e) {
        done(e);
      }
        //noinspection BadExpressionStatementJS
    });

    it('connects correctly and clearly, by callback', function (done) {

      var testCallback = function(err, conn) {
          (err === null).should.equal(true);
          conn.isConnected.should.equal(true);
          conn.isOpen().should.equal(true);
          (conn.lastError === null).should.equal(true);
          done();
      };

      //noinspection JSUnusedLocalSymbols
        new medicomp.Connection(specHelper.getTestConfiguration(), testCallback);

    });

    it('knows the server version after connecting', function (done) {

      var testCallback = function(err, conn) {
        var serverVersion = conn.serverVersion;
        var split = serverVersion.split('.');
        split.length.should.equal(4);
        split[0].should.equal('2');
        done();
      };

      //noinspection JSUnusedLocalSymbols
      new medicomp.Connection(specHelper.getTestConfiguration(), testCallback);

    });

    it('connects and then calls a few simple methods successfully', function (done) {

      //var mc = new medicomp.Client(specHelper.getTestConfiguration());
      //var conn = mc.getConnection();
      var conn = new medicomp.Connection(specHelper.getTestConfiguration());
      conn.connectionPromise
        .then(function(){
          conn.medcinInit();
          })
        .then(function() {
          // turning Nagle off and then on, just to make sure it works either way.
          conn.setNoDelay(true);
          var result = conn.getProperty(102905, 'Takes', 0);
          return result.then(function(data) {
              data.should.equal('');
            }, function(err) {
              console.log(err);
              done('An error happened doing a basic socket method call (codeFromMedcin): ' + err);
            });
          })
        .then(function() {
          conn.setNoDelay(false);
          var result = conn.sDocPos(10); // headache
          result.then(function() {
            done();
          }, function(err) {
            console.log(err);
            done('An error happened doing a basic socket method call (s_doc_pos): ' + err);
          });
        })
        .then(null, function(){ //(err)
          return done('it should never get here');
        });

    });

  });

});
