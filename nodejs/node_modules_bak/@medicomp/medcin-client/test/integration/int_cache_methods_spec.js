/*** Created by pkarcher on 2/2/2015.*/
'use strict';

//var should = require('should');


//var fs = require('fs');
//var parseString = require('xml2js').parseString;
var Q = require ('q');
var specHelper = require('../SpecHelper');
//require(__dirname + '/../../connection');
var medicomp = medicomp || require(__dirname + '/../../index');
var conn;

describe('(int) cache methods', function () {

  describe('when using cachedProperties method', function () {

    it('it returns an object with all 19 of the cached properties', function (done) {

      conn = new medicomp.Connection(specHelper.getTestConfiguration());

      specHelper.getCallsFromFile('cachedproperty_methods').then(function(calls) {
          
        var functionToCallAndTestPropertySets = function (propertiesToCheckForThisMedcinId) {

          if (propertiesToCheckForThisMedcinId === null || propertiesToCheckForThisMedcinId === undefined  ) {
              return specHelper.createPromiseError('A group of code sequences for testing getCachedProperties was all messed up.');
          }

          var medcinId = propertiesToCheckForThisMedcinId[0].medcinId;

          var deferred = Q.defer();

          try {
            conn.getCachedProperties(medcinId).then(function(cacheProperties) {
                propertiesToCheckForThisMedcinId.forEach( function(call) {
                  cacheProperties[call.method].should.equal(call.expect.value);
                });
              }, function(err) {
                conn.medcinEnd().then(function() {done(err);});
              }
            );
            deferred.resolve();
          }
          catch (e) {
            e.message = 'In (getCachedProperties) ' + propertiesToCheckForThisMedcinId[0].file + '.xml on ' + 
                propertiesToCheckForThisMedcinId.lastCall.name + ': ' + e.message;
            deferred.reject(e);
          }
          return deferred.promise;
        };

        chunkCallsByMedcinIdAndThenTestTheChunksUsing(calls, functionToCallAndTestPropertySets, done);

      }, function(err) {
        done(err);
      });

    });
  });


  describe('when using getCachedCodes method', function () {

    it('it returns the crazy object with all the Code values', function (done) {

      conn = new medicomp.Connection(specHelper.getTestConfiguration());

      specHelper.getCallsFromFile('cachedcode_methods').then(function(calls) {

        var functionToCallAndTestCodeSets = function (codesToCheckForThisMedcinId) {

          if (codesToCheckForThisMedcinId === null || codesToCheckForThisMedcinId === undefined  ) {
            return specHelper.createPromiseError('A group of code sequences for testing getCachedCodes was all messed up.');
          }

          var medcinId = codesToCheckForThisMedcinId[0].medcinId;

          var deferred = Q.defer();

          try {
            conn.connectionPromise.then(function(){
              conn.getCachedCodes(medcinId).then(function(cacheCodes) {
                  var callWeAreCurrentTrying;
                  try {
                    codesToCheckForThisMedcinId.forEach( function(call) {
                      callWeAreCurrentTrying = call;
                      var answer = cacheCodes.codeFromMedcin(call.params[1].value);
                      answer.should.equal(call.expect.value);
                    });
                    deferred.resolve();
                  }
                  catch (e) {
                    conn.medcinEnd().then(function() {
                      var clearErr = new Error('We calling method call "' + callWeAreCurrentTrying.name + '", ' + e.message);
                      clearErr.inner = e;
                      done(clearErr);
                    });
                    deferred.reject(e);
                  }
                }, function(err) {
                  //done(err);
                  conn.medcinEnd().then(function() {done(err);});
                }
              );
            }, function(err) {
              done(err);
            });
          }
          catch (e) {
            e.message = 'In (getCachedCodes) ' + codesToCheckForThisMedcinId.lastCall.file + '.xml on ' + 
                codesToCheckForThisMedcinId.lastCall.name + ': ' + e.message;
            deferred.reject(e);
          }

          return deferred.promise;
        };

        chunkCallsByMedcinIdAndThenTestTheChunksUsing(calls, functionToCallAndTestCodeSets, done);

      }, function(err) {
        done(err);
      });

    });

    it('the object it returns utilized explicit code properties', function (done) {

      conn = new medicomp.Connection(specHelper.getTestConfiguration());

      conn.connectionPromise .then(function() {
        try {

          conn.getCachedCodes(1583).then(function(cacheCodes) {
              try {
                cacheCodes.SNOMED.should.equal('29857009\\230145002');
                cacheCodes.ICD10.should.equal('R07.9!H');
                cacheCodes.ICD.should.equal('');
              } catch (e) {
                done(e);
              }
            }).then(function() {
              conn.getCachedCodes(353).then(function (cacheCodes) {
                cacheCodes.SNOMED.should.equal('267036007');
                cacheCodes.ICD10.should.equal('R06.00!H|R06.09!H|R06.0!H');
                cacheCodes.ICD.should.equal('786.09');
            }).then(function () {
              conn.getCachedCodes(32881).then(function (cacheCodes) {
                cacheCodes.CCC.should.equal('');
                cacheCodes.SNOMED.should.equal('195967001|233686006|160377001');
                cacheCodes.ICD10.should.equal('J45.90!H|J45.998!H|J45!H|J45.99!H|J45.9!H|Z82.5!H');
                cacheCodes.ICDF.should.equal('V17.5');
                cacheCodes.ICDCAT.should.equal('493!H');
                cacheCodes.ICDOther.should.equal('493.9!H');

                cacheCodes.FirstConsult.should.equal('1016540');
                //cacheCodes..should.equal('');
                //cacheCodes..should.equal('');
              }).then(function() {
                done();
              }, function (err) {
                //done(err);
                conn.medcinEnd().then(function () {
                  done(err);
                });
              });
            });
          }, function (err) {
            //done(err);
            conn.medcinEnd().then(function () {
              done(err);
            });
          });
        }
        catch (e) {
//          e.message = 'In (getCachedCodes) ' + codesToCheckForThisMedcinId.lastCall.file + '.xml on ' + codesToCheckForThisMedcinId.lastCall.name + ': ' + e.message;
          done(e);
        }
      }, function(err) {
//        err.message = 'In (getCachedCodes) ' + codesToCheckForThisMedcinId.lastCall.file + '.xml on ' + codesToCheckForThisMedcinId.lastCall.name + ': ' + err.message;
        done(err);
      });

    });

  });


  function chunkCallsByMedcinIdAndThenTestTheChunksUsing(calls, functionToTestEachChunkWith, done) {
    var currentWorkingMedcinId = calls[0].getArrayOfParameterValues()[0];
    var currentWorkingGroup = [];
    var allTheGroups = [currentWorkingGroup];
    calls.forEach(function (call) {
      call.medcinId = call.getArrayOfParameterValues()[0];
      if (call.medcinId !== currentWorkingMedcinId) {
        currentWorkingMedcinId = call.medcinId;
        currentWorkingGroup = [];
        allTheGroups.push(currentWorkingGroup);
      }
      currentWorkingGroup.push(call);
    });

    conn.connectionPromise.then(function () {

      function setUpTheNextOne(lastPromise, arrayOfCodeSets, whichToSetUpNow, done) {
        lastPromise.then(function () {
          var thisPromise = functionToTestEachChunkWith(arrayOfCodeSets[whichToSetUpNow]);
          if (whichToSetUpNow < arrayOfCodeSets.length - 1) {
            setUpTheNextOne(thisPromise, arrayOfCodeSets, whichToSetUpNow + 1, done);
          }
          else {
            thisPromise.then(function () {
              conn.medcinEnd().then(function () {
                done();
              });
            }, function (err) {
              conn.medcinEnd().then(function () {
                done(err);
              });
            });
          }
        }, function (err) {
          conn.medcinEnd().then(function () {
            done(err);
          });
        });
      }

      var bogusDeferred = Q.defer();
      bogusDeferred.resolve({});

      setUpTheNextOne(bogusDeferred.promise, allTheGroups, 0, done);

    }, function(err) {
      done(err);
    });
  }



});
