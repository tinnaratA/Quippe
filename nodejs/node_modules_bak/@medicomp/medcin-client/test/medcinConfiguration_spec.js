//var assert = require("assert");
//var should = require("should");
//var Q = require ("Q");
'use strict';

var fs = require('fs');
//var specHelper = require('./SpecHelper');
require('should');

var medicomp = medicomp || require('../index');

//var whereVersionFileAt;
//if (specHelper.runningInWebStorm) {
//    whereVersionFileAt = './VERSION';
//} else {
//    whereVersionFileAt = '../VERSION';
//}

describe('medicomp.Configuration', function() {

  describe('(dealing with Port and Host stuff)', function() {

    before(function () {
    });

    it('is correctly grabbed from medicomp.Client module', function() {
      var client = new medicomp.Client();
      client.should.be.of.type('object');
      client.configuration.should.be.of.type('object');
    });

    it('starts off with the right default values', function() {
      var client = new medicomp.Client();
      client.configuration.host.should.equal('localhost');
      client.configuration.port.should.equal(8080);
    });

    it('returns the same updated values if those are given', function() {
      var client = new medicomp.Client();
      client.configuration.host = '10.11.12.13';
      client.configuration.port = 8765;
      client.configuration.host.should.equal('10.11.12.13');
      client.configuration.port.should.equal(8765);
    });

    it('returns correct values if whole configuration object is created and set', function() {
      var configuration = new medicomp.Configuration();
      configuration.host = '10.9.8.7';
      configuration.port = 8642;
      var client = new medicomp.Client();
      client.configuration = configuration;
      client.configuration.host.should.equal('10.9.8.7');
      client.configuration.port.should.equal(8642);
    });

  });


  describe('(dealing with Version stuff)', function() {

    // so we can put the existing versionAsync back when we're finished testing.
    var currentVersion = '';

    before(function (done) {
      fs = require('fs');
      fs.readFile(__dirname + '/../VERSION', 'utf8', function (err,data) {
        if (err) {
          throw (err);
        }
        currentVersion = data;
        done();
      });
    });

    after(function(done) {
      fs = require('fs');
      fs.writeFile(__dirname + '/../VERSION', currentVersion, function (err) {
        if (err) {
          throw (err);
        }
        done();
      });
    });

    it('returns some reasonable versionAsync information', function(done) {
      var client = new medicomp.Client();
      var versionPromise = client.configuration.versionAsync;
      versionPromise.then(function(version){
        try {
        version.toString().length.should.be.above(0);
        version.full.length.should.be.above(0);
        done();
        } catch (e) {
          done(e);
        }
      });
    });

    it('returns correct versionAsync information', function(done) {
      fs = require('fs');
      fs.writeFile(__dirname + '/../VERSION', '4.3.2.1', function (err) {
      var client = new medicomp.Client();
        if (err) {
          done (err);
        }
        var versionPromise = client.configuration.versionAsync;
        versionPromise.then(function (version) {
          try {
            version.toString().should.equal('4.3.2.1');
            version.full.should.equal('4.3.2.1');
            version.major1.should.equal('4');
            version.minor2.should.equal('3');
            version.build3.should.equal('2');
            version.revision4.should.equal('1');
            done();
          } catch (e) {
            done(e);
          }
        });
      });
    });

    it('returns more correct versionAsync information', function(done) {
      fs = require('fs');
      fs.writeFile(__dirname + '/../VERSION', '2.2.19713.777', function (err) {
        var client = new medicomp.Client();
        if (err) {
//          done (err);
        }
        var versionPromise = client.configuration.versionAsync;
        versionPromise.then(function(version){
          try {
            version.toString().should.equal('2.2.19713.777');
            version.full.should.equal('2.2.19713.777');
            version.major1.should.equal('2');
            version.minor2.should.equal('2');
            version.build3.should.equal('19713');
            version.revision4.should.equal('777');
            done();
          } catch (e) {
            done(e);
          }
        });
      });
    });

  });





  describe('(dealing with Version stuff)', function() {

    // so we can put the existing versionAsync back when we're finished testing.
    var currentVersion = '';

    before(function (done) {
      fs = require('fs');
      fs.readFile(__dirname + '/../VERSION', 'utf8', function (err,data) {
        if (err) {
          throw (err);
        }
        currentVersion = data;
        done();
      });
    });

    after(function(done) {
      fs = require('fs');
      fs.writeFile(__dirname + '/../VERSION', currentVersion, function (err) {
        if (err) {
          throw (err);
        }
        done();
      });
    });

    it('returns some reasonable versionAsync information', function(done) {
      var client = new medicomp.Client();
      var versionPromise = client.configuration.versionAsync;
      versionPromise.then(function(version){
        try {
          version.toString().length.should.be.above(0);
          version.full.length.should.be.above(0);
          done();
        } catch (e) {
          done(e);
        }
      });
    });

    it('returns correct versionAsync information', function(done) {
      fs = require('fs');
      fs.writeFile(__dirname + '/../VERSION', '4.3.2.1', function (err) {
        var client = new medicomp.Client();
        if (err) {
          done (err);
        }
        var versionPromise = client.configuration.versionAsync;
        versionPromise.then(function (version) {
          try {
            version.toString().should.equal('4.3.2.1');
            version.full.should.equal('4.3.2.1');
            version.major1.should.equal('4');
            version.minor2.should.equal('3');
            version.build3.should.equal('2');
            version.revision4.should.equal('1');
            done();
          } catch (e) {
            done(e);
          }
        });
      });
    });

    it('returns more correct versionAsync information', function(done) {
      fs = require('fs');
      fs.writeFile(__dirname + '/../VERSION', '2.2.19713.777', function (err) {
        var client = new medicomp.Client();
        if (err) {
//          done (err);
        }
        var versionPromise = client.configuration.versionAsync;
        versionPromise.then(function(version){
          try {
            version.toString().should.equal('2.2.19713.777');
            version.full.should.equal('2.2.19713.777');
            version.major1.should.equal('2');
            version.minor2.should.equal('2');
            version.build3.should.equal('19713');
            version.revision4.should.equal('777');
            done();
          } catch (e) {
            done(e);
          }
        });
      });
    });

  });


  describe('instantiating a Connection with no Configuration passed in', function() {

    it('utilizes default configuration', function() {
      var conn = new medicomp.Connection();
      var config = conn.getConfiguration();
      config.should.be.an.Object;
      config.host.should.equal('localhost');
      config.port.should.equal(8080);
    });

  });




});