/*** Created by pkarcher on 12/17/2014.*/
'use strict';


require('should');
var medicomp = medicomp || require('../index');


describe('medicomp.Socket', function() {

  describe('(when relying on defaults)', function() {

    it('correctly uses defaults from configuration object', function() {
      var config = new medicomp.Configuration();
      config.actuallyConnect = false;
      var theSocket = new medicomp.Socket(config);
      theSocket.host.should.equal(config.host);
      theSocket.port.should.equal(config.port);
      theSocket.actuallyTryToConnect.should.equal(false);
      theSocket.doWeEvenTry.should.equal(true);
    });

    it('correctly uses configured defaults', function() {
      var config = new medicomp.Configuration();
      config.host = 'NinjaComp';
      config.port = '1222';
      config.actuallyConnect = false;
      var theSocket = new medicomp.Socket(config);
      theSocket.host.should.equal('NinjaComp');
      theSocket.port.should.equal(1222);
      theSocket.actuallyTryToConnect.should.equal(false);
      theSocket.doWeEvenTry.should.equal(true);
    });

    it('correctly uses specific values on property bag', function() {
      var settings = {
        host: {toString : function() {return 'TacoTower';}},
        port: {toString : function() {return '8765';}},
        actuallyConnect : false
      };
      var theSocket = new medicomp.Socket(settings);
      theSocket.host.should.equal('TacoTower');
      theSocket.port.should.equal(8765);
      theSocket.actuallyTryToConnect.should.equal(false);
      theSocket.doWeEvenTry.should.equal(true);
    });

    it('responds to invalid values with stable but clearly communicated non-connecting state', function () {
      var settings = {
        host: {toString : function() {return 'TacoTower';}},
        port: {toString : function() {return 'Santa';}},
        actuallyConnect : false
      };
      var theSocket = new medicomp.Socket(settings);
      theSocket.host.should.equal('TacoTower');
      //noinspection BadExpressionStatementJS
      theSocket.port.should.be.NaN; // jshint ignore:line
      theSocket.actuallyTryToConnect.should.equal(false);
      theSocket.doWeEvenTry.should.equal(false);
    });

    it('responds to insufficient property bag correctly', function () {
      var settings = {
        host: {toString : function() {return 'TacoTower';}},
        port: {toString : function() {return 'Santa';}},
        actuallyConnect : false
      };
      var theSocket = new medicomp.Socket(settings);
      theSocket.host.should.equal('TacoTower');
      //noinspection BadExpressionStatementJS
      theSocket.port.should.be.NaN; // jshint ignore:line
      theSocket.actuallyTryToConnect.should.equal(false);
      theSocket.doWeEvenTry.should.be.equal(false);
    });


  });

});
