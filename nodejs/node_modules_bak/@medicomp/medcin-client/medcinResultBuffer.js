/*** Created by pkarcher on 1/9/2015.*/
'use strict';

//var net = require('net');
//var Q = require ("Q");

var MedcinResultBuffer = function(serverResults) {

  var byteArray;

  if (serverResults instanceof Buffer) {
    byteArray = Array.prototype.slice.call(serverResults, 0);
  } else {
    byteArray = serverResults;
  }

  this.popString = function() {
    var whereTheNullAt = byteArray.indexOf(0);

    if (whereTheNullAt === -1) {
      return null;
    }

    if (whereTheNullAt === 0) {
      byteArray = byteArray.slice(1);
      return '';
    }

    var theBuffer = new Buffer(byteArray.slice(0, whereTheNullAt));
    byteArray = byteArray.slice(whereTheNullAt + 1);
    return theBuffer.toString();
  };

  this.popShort = function() {
    if (byteArray.length < 2) {
      return null;
    } else {
      var twoBytes = new Buffer([byteArray[0], byteArray[1]]);
      byteArray = byteArray.slice(2);
      return twoBytes.readInt16BE(0);
    }
  };

  this.popInt = function() {
    if (byteArray.length < 4) {
      return null;
    } else {
      var twoBytes = new Buffer([byteArray[0], byteArray[1], byteArray[2], byteArray[3]]);
      byteArray = byteArray.slice(4);
      return twoBytes.readInt32BE(0);
    }

  };

  this.popDouble = function() {
    if (byteArray.length < 8) {
      return null;
    } else {
      var twoBytes = new Buffer([byteArray[0], byteArray[1], byteArray[2],
        byteArray[3], byteArray[4], byteArray[5], byteArray[6], byteArray[7]]);
        byteArray = byteArray.slice(8);
      return twoBytes.readDoubleBE (0);
    }

  };

  this.theStraightBytes = function() {
    return byteArray;
  };

  this.popByte = function() {
    if (byteArray.length < 1) {
      return null;
    } else {
      var twoBytes = new Buffer([byteArray[0]]);
      byteArray = byteArray.slice(1);
      return twoBytes.readUInt8 (0);
    }

  };

  if ([113, 114, 116].indexOf(byteArray[1]) < 0) {
    throw new Error('Socket returned data, but not in a recognized format.');
  }
  this.popShort(); // should always be 113, which mean
  this.popShort();
  this.popShort();

  this.byteArray = byteArray;

};

module.exports = MedcinResultBuffer;