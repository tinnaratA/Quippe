# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := build_managed
### Rules for action "compile_mono_embed":
quiet_cmd_binding_gyp_build_managed_target_compile_mono_embed = ACTION binding_gyp_build_managed_target_compile_mono_embed $@
cmd_binding_gyp_build_managed_target_compile_mono_embed = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p src/mono; dmcs -sdk:4.5 -target:exe "-out:build/$(BUILDTYPE)/MonoEmbedding.exe" "src/mono/*.cs"

src/mono/monoembedding.exe: obj := $(abs_obj)
src/mono/monoembedding.exe: builddir := $(abs_builddir)
src/mono/monoembedding.exe: TOOLSET := $(TOOLSET)
src/mono/monoembedding.exe: $(srcdir)/src/mono/*.cs FORCE_DO_CMD
	$(call do_cmd,binding_gyp_build_managed_target_compile_mono_embed)

all_deps += src/mono/monoembedding.exe
action_binding_gyp_build_managed_target_compile_mono_embed_outputs := src/mono/monoembedding.exe


### Rules for final target.
# Build our special outputs first.
$(obj).target/build_managed.stamp: | $(action_binding_gyp_build_managed_target_compile_mono_embed_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_build_managed_target_compile_mono_embed_outputs): | $(builddir)/edge.node

$(obj).target/build_managed.stamp: TOOLSET := $(TOOLSET)
$(obj).target/build_managed.stamp: $(builddir)/edge.node FORCE_DO_CMD
	$(call do_cmd,touch)

all_deps += $(obj).target/build_managed.stamp
# Add target alias
.PHONY: build_managed
build_managed: $(obj).target/build_managed.stamp

# Add target alias to "all" target.
.PHONY: all
all: build_managed

