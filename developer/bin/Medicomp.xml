<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Medicomp</name>
    </assembly>
    <members>
        <member name="T:Medicomp.BufferedInput">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:Medicomp.BufferedInput.readbuf">
            <summary>
            This is the internal buffer.
            </summary>
        </member>
        <member name="M:Medicomp.BufferedInput.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            This creates a new buffer of the given length in bytes.
            </summary>
            <param name="msglen">The length in bytes for the new buffer.</param>
            <param name="encoder">The encoder object used to encode the string.</param>
        </member>
        <member name="M:Medicomp.BufferedInput.AllocateBuffer(System.Int32)">
            <summary>
            This method allocates the receive buffer
            </summary>
            <param name="msglen"></param>
        </member>
        <member name="M:Medicomp.BufferedInput.popstring">
            <summary>
            This recovers a string parameter from the current buffer.
            </summary>
            <returns>The string is returned.</returns>
        </member>
        <member name="M:Medicomp.BufferedInput.popdouble">
            <summary>
            This recovers a packed value as a double.
            </summary>
            <returns>The value is returned as a double.</returns>
        </member>
        <member name="M:Medicomp.BufferedInput.popint">
            <summary>
            This recovers a packed value as an integer.
            </summary>
            <returns>The value is returned as an integer.</returns>
        </member>
        <member name="M:Medicomp.BufferedInput.popshort">
            <summary>
            This recovers a packed value as a short.
            </summary>
            <returns>The value is returned as a short.</returns>
        </member>
        <member name="M:Medicomp.BufferedInput.popshortchar">
            <summary>
            This recovers a character value as a short.
            </summary>
            <returns>The character value is returned as a short.</returns>
        </member>
        <member name="M:Medicomp.BufferedInput.CopyBufferTo(System.Byte[],System.Int32)">
            <summary>
            This will copy the contents of the buffer starting at the 
            current buffer position to the destination buffer for
            the number of bytes indicated.
            </summary>
            <param name="dest">The destination buffer to receive the source bytes.</param>
            <param name="len">The length in bytes to copy.</param>
        </member>
        <member name="T:Medicomp.serverapis">
            <summary>
            Enumerates the server APIs    /// </summary>
            <remarks>This enum may be useful for determining the name of a server API
             when parsing the APIHits property returned by GetServerProperties.</remarks>
        </member>
        <member name="F:Medicomp.serverapis.MEDCININIT">
            <summary>Server code for MedcinInit API</summary>
        </member>
        <member name="F:Medicomp.serverapis.MEDCINEND">
            <summary>Server code for MedcinEnd API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETDEBUGOUTPUT">
            <summary>Server code for SetDebugOutput API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETDATADIR">
            <summary>Server code for SetDataDir API</summary>
        </member>
        <member name="F:Medicomp.serverapis.REGISTERCALLBACK">
            <summary>Server code for RegisterCallBack API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CLEARCHART">
            <summary>Server code for ClearChart API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDCHART">
            <summary>Server code for AddChart API</summary>
        </member>
        <member name="F:Medicomp.serverapis.REMOVECHART">
            <summary>Server code for RemoveChart API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CALCULATE">
            <summary>Server code for Calculate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HAVELIST">
            <summary>Server code for HaveList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATE">
            <summary>Server code for Activate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETIPDX">
            <summary>Server code for GetIPDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDDX">
            <summary>Server code for AddDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CLEARDX">
            <summary>Server code for ClearDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATEDX">
            <summary>Server code for ActivateDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HAVEDX">
            <summary>Server code for HaveDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATEEXPANSION">
            <summary>Server code for ActivateExpansion API</summary>
        </member>
        <member name="F:Medicomp.serverapis.WORDSEARCH">
            <summary>Server code for WordSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HAVEWORDSEARCH">
            <summary>Server code for HaveWordSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATEWORDSEARCH">
            <summary>Server code for ActivateWordSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RANGENORMALHIGH">
            <summary>Server code for RangeNormalHigh API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RANGENORMALLOW">
            <summary>Server code for RangeNormalLow API</summary>
        </member>
        <member name="F:Medicomp.serverapis.UNITGUESS">
            <summary>Server code for UnitGuess API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TESTVALUECONVERT">
            <summary>Server code for TestValueConvert API</summary>
        </member>
        <member name="F:Medicomp.serverapis.UNITENUM">
            <summary>Server code for UnitEnum API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CALCSCALE">
            <summary>Server code for CalcScale API</summary>
        </member>
        <member name="F:Medicomp.serverapis.QUALIFIERLIST">
            <summary>Server code for QualifierList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.QUALIFIERDESC">
            <summary>Server code for QualifierDesc API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NODEKEY">
            <summary>Server code for Nodekey API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TERMTYPE">
            <summary>Server code for Termtype API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SPECIALTY">
            <summary>Server code for Specialty API</summary>
        </member>
        <member name="F:Medicomp.serverapis.UNIT">
            <summary>Server code for Unit API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SEARCH">
            <summary>Server code for Search API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SVOICE">
            <summary>Server code for SVoice API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NOMIN">
            <summary>Server code for Nomin API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NVOICE">
            <summary>Server code for NVoice API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SDOCPOS">
            <summary>Server code for SDocPos API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SDOCNEG">
            <summary>Server code for SDocNeg API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SPATPOS">
            <summary>Server code for SPatPos API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SPATNEG">
            <summary>Server code for SPatNeg API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PDOCPOS">
            <summary>Server code for PDocPos API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PDOCNEG">
            <summary>Server code for PDocNeg API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PPATPOS">
            <summary>Server code for PPatPos API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PPATNEG">
            <summary>Server code for PPatNeg API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RXCODE">
            <summary>Server code for RxCode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TESTCODE">
            <summary>Server code for TestCode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RISKCODE">
            <summary>Server code for RiskCode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PRIVACY">
            <summary>Server code for Privacy API</summary>
        </member>
        <member name="F:Medicomp.serverapis.COMPLEX">
            <summary>Server code for Complex API</summary>
        </member>
        <member name="F:Medicomp.serverapis.UDFCODELIST">
            <summary>Server code for usfCodeList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.EXPANDCODEHINT">
            <summary>Server code for ExpandCodehint API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETPROPERTY">
            <summary>Server code for GetProperty API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NODELEVEL">
            <summary>Server code for NodeLevel API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PARAFLOW">
            <summary>Server code for ParaFlow API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SENTFLOW">
            <summary>Server code for SentFlow API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TITLE">
            <summary>Server code for Title API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SUBS">
            <summary>Server code for Subs API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PARENTMEDCINID">
            <summary>Server code for ParentMedcinid API</summary>
        </member>
        <member name="F:Medicomp.serverapis.FLAGS">
            <summary>Server code for Flags API</summary>
        </member>
        <member name="F:Medicomp.serverapis.EFLAGS">
            <summary>Server code for EFlags API</summary>
        </member>
        <member name="F:Medicomp.serverapis.MANAGEMENT">
            <summary>Server code for Management API</summary>
        </member>
        <member name="F:Medicomp.serverapis.AFLAGS">
            <summary>Server code for AFlags API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CAFLAGS">
            <summary>Server code for CAFlags API</summary>
        </member>
        <member name="F:Medicomp.serverapis.QFLAGS">
            <summary>Server code for QFlags API</summary>
        </member>
        <member name="F:Medicomp.serverapis.STARTAGE">
            <summary>Server code for StartAge API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ENDAGE">
            <summary>Server code for EndAge API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDUSERFINDING">
            <summary>Server code for AddUserFinding API</summary>
        </member>
        <member name="F:Medicomp.serverapis.USERFINDINGCODES">
            <summary>Server code for UserFindingCodes API</summary>
        </member>
        <member name="F:Medicomp.serverapis.USERFINDINGRANGE">
            <summary>Server code for UserFindingRange API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TRANSCRIBE">
            <summary>Server code for Transcribe API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TRANSCRIBEFLAG">
            <summary>Server code for TranscribeFlag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NARRATE">
            <summary>Server code for Narrate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TRANSCRIBEITEM">
            <summary>Server code for TranscribeItem API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDNARRATE">
            <summary>Server code for AddNarrate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDEPISODE">
            <summary>Server code for AddEpisode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDVALUE">
            <summary>Server code for AddValue API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDNOTE">
            <summary>Server code for AddNote API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDRXSTR">
            <summary>Server code for AddRxStr API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CLEARNARRATIVE">
            <summary>Server code for ClearNarrative API</summary>
        </member>
        <member name="F:Medicomp.serverapis.DELETENARRATE">
            <summary>Server code for DeleteNarrate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDDOCNAME">
            <summary>Server code for AddDocname API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDDEMOGRAPHICS">
            <summary>Server code for AddDemographics API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDENCOUNTER">
            <summary>Server code for AddEncounter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETGROUPSEQUENCE">
            <summary>Server code for GetGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETGROUPSEQUENCE">
            <summary>Server code for SetGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETGROUPNUMBER">
            <summary>Server code for GetGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GROUPNAME">
            <summary>Server code for GroupName API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETNARRATIVEFORMAT">
            <summary>Server code for GetNarrativeFormat API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETNARRATIVEFORMAT">
            <summary>Server code for SetNarrativeFormat API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETNARRATIVEOUTPUT">
            <summary>Server code for GetNarrativeOutput API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETNARRATIVEOUTPUT">
            <summary>Server code for SetNarrativeOutput API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETNARRATIVECONTEXT">
            <summary>Server code for GetNarrativeContext API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETNARRATIVECONTEXT">
            <summary>Server code for SetNarrativeContext API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETTIMEFORMAT">
            <summary>Server code for GetTimeFormat API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETTIMEFORMAT">
            <summary>Server code for SetTimeFormat API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETTIMEDSECTIONS">
            <summary>Server code for GetTimedSections API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETTIMEDSECTIONS">
            <summary>Server code for SetTimedSections API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RTFSTYLE">
            <summary>Server code for RTFStyle API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PARAGRAPHSTYLE">
            <summary>Server code for ParagraphStyle API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDITEMTAG">
            <summary>Server code for AddItemtag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETSHOWITEMTAG">
            <summary>Server code for SetShowItemtag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETSHOWITEMTAG">
            <summary>Server code for GetShowItemtag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ITEMSTAG">
            <summary>Server code for ItemSTag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ITEMLTAG">
            <summary>Server code for ItemLTag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETSHOWITEMID">
            <summary>Server code for SetShowItemid API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETSHOWMEDCINID">
            <summary>Server code for SetShowMedcinid API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETVERSION">
            <summary>Server code for GetVersion API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RETURNDATA">
            <summary>Server code for ReturnData Operation code</summary>
        </member>
        <member name="F:Medicomp.serverapis.MEDCINCALLBACK">
            <summary>Server code for MedcinCallBack Operation code</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETGROUPNUMBER">
            <summary>Server code for SetGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CLIENTCACHE">
            <summary>Server code for ClientCache API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDDXPROMPT">
            <summary>Server code for AddDxPrompt API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETPATIENTGENERIC">
            <summary>Server code for SetPatientGeneric API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETPATIENT">
            <summary>Server code for SetPatient API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CLEARCHARTFINDINGS">
            <summary>Server code for ClearChartFindings API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETMESSAGESTRING">
            <summary>Server code for GetMessageString API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETMESSAGESTRING">
            <summary>Server code for SetMessageString API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETNARRATEOPTIONS">
            <summary>Server code for GetNarrateOptions API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETNARRATEOPTIONS">
            <summary>Server code for SetNarrateOptions API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NARRATEEX">
            <summary>Server code for NarrateEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETSTATEKEY">
            <summary>Server code for GetStateKey API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RESTORESTATE">
            <summary>Server code for RestoreState API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NARRATEGROUPS">
            <summary>Server code for NarrateGroups API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATEEM">
            <summary>Server code for ActivateEM API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATEEMPROMPT">
            <summary>Server code for ActivateEMPrompt API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CALCULATEEM">
            <summary>Server code for CalculateEM API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ACTIVATEEXPANSIONEX">
            <summary>Server code for ActivateExpansionEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.LINKFINDINGS">
            <summary>Server code for LinkFindings API</summary>
        </member>
        <member name="F:Medicomp.serverapis.INFO_LATHD">
            <summary>Server code for InfoLathd</summary>
        </member>
        <member name="F:Medicomp.serverapis.BUILDLISTMODE">
            <summary>Server code for BuildListMode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETUFTAG">
            <summary>Server code for GetUFTag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETUFTAG">
            <summary>Server code for SetUFTag API</summary>
        </member>
        <member name="F:Medicomp.serverapis.TSEARCH">
            <summary>Server code for TSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.STERSEPOS">
            <summary>Server code for STersePos API</summary>
        </member>
        <member name="F:Medicomp.serverapis.STERSENEG">
            <summary>Server code for STerseNeg API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PTERSEPOS">
            <summary>Server code for PTersePos API</summary>
        </member>
        <member name="F:Medicomp.serverapis.PTERSENEG">
            <summary>Server code for PTerseNeg API</summary>
        </member>
        <member name="F:Medicomp.serverapis.DOSELIST">
            <summary>Server code for DoseList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.BRANDLIST">
            <summary>Server code for BrandList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.DOSE">
            <summary>Server code for Dose API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTFLUSH">
            <summary>Server code for HistFlush API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTNARRATE">
            <summary>Server code for HistNarrate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTTRANSCRIBEITEM">
            <summary>Server code for HistTranscribeItem API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDNARRATE">
            <summary>Server code for HistAddNarrate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDEPISODE">
            <summary>Server code for HistAddEpisode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDVALUE">
            <summary>Server code for HisAddValue API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDNOTE">
            <summary>Server code for HistAddNote API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDRXSTR">
            <summary>Server code for HistAddRxStr API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTDELETE">
            <summary>Server code for HistDelete API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTLINKFINDINGS">
            <summary>Server code for HistLinkFindings API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDDOCNAME">
            <summary>Server code for HistAddDocname API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDENCOUNTER">
            <summary>Server code for HistAddEncounter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTPACKET">
            <summary>Server code for HistPacket Operation code</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTACTIVATE">
            <summary>Server code for HistActivate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTACTIVATEDX">
            <summary>Server code for HistActivateDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTLOCATE">
            <summary>Server code for HistLocate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTACTIVATEWORDSEARCH">
            <summary>Server code for HistActivateWordSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDCHART">
            <summary>Server code for HistAddChart API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDDX">
            <summary>Server code for HistAddDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTCALCULATE">
            <summary>Server code for HistCalculate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTCLEARCHART">
            <summary>Server code for HistClearChart API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTCLEARCHARTFINDINGS">
            <summary>Server code for HistClearChartFindings API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTCLEARDX">
            <summary>Server code for HistClearDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTHAVEDX">
            <summary>Server code for HistHaveDx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTHAVELIST">
            <summary>Server code for HistHaveList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTHAVEWORDSEARCH">
            <summary>Server code for HistHaveWordSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTRELEASEPOOL">
            <summary>Server code for HistReleasePool API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTREMOVECHART">
            <summary>Server code for HistRemoveChart API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTRETRIEVEENCOUNTER">
            <summary>Server code for HistRetrieveEncounter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTRETRIEVEORDER">
            <summary>Server code for HistRetrieveOrder API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTWORDSEARCH">
            <summary>Server code for HistWordSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTSETPOOLID">
            <summary>Server code for HistSetPoolId API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTSETPOOLPID">
            <summary>Server code for HistSetPoolPid API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTCREATEPOOL">
            <summary>Server code for HistCreatePool API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDORDER">
            <summary>Server code for HistAddOrder API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTDELETEENCOUNTER">
            <summary>Server code for HistDeleteEncounter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTENCOUNTERLIST">
            <summary>Server code for HistEncounterList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDFULIST">
            <summary>Server code for HistAddFuList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETBUILDLISTMODE">
            <summary>Server code for GetBuildListMode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETGROUPSEQUENCEEX">
            <summary>Server code for GetGroupSequenceEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETGROUPSEQUENCEEX">
            <summary>Server code for SetGroupSequenceEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETDOCTORID">
            <summary>Server code for SetDoctorID API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETDOCTORNAME">
            <summary>Server code for GetDoctorName API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SAVEUDF">
            <summary>Server code for SaveUdf API</summary>
        </member>
        <member name="F:Medicomp.serverapis.NEXTUDF">
            <summary>Server code for NextUdf API</summary>
        </member>
        <member name="F:Medicomp.serverapis.RTFINDENTLEVEL">
            <summary>Server code for RtfIndentLevel API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTSETDOCTORID">
            <summary>Server code for HistSetDoctorId API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGIMAGESUPPORT">
            <summary>Server code for ImageSupport API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETIMAGEID">
            <summary>Server code for GetImageId API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETIMAGELEN">
            <summary>Server code for GetImageLen API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETIMAGE">
            <summary>Server code for GetImage API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETHOTSPOTSLEN">
            <summary>Server code for GetHotSpotsLen API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETHOTSPOTS">
            <summary>Server code for GetHotSpots API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETLISTITEMSLEN">
            <summary>Server code for GetListItemsLen API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETLISTITEMS">
            <summary>Server code for GetListItems API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDDECORATIONSTYLE">
            <summary>Server code for AddDecorationStyle API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETDECORATIONSTYLE">
            <summary>Server code for SetDecorationStyle API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDNARRATE2">
            <summary>Server code for AddNarate2 API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDNARRATE2EX">
            <summary>Server code for AddNarate2Ex API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTGROUPNUMBER">
            <summary>Server code for HistGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTSETDECORATIONSTYLE">
            <summary>Server code for HistSetDecorationStyle API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDNARRATE2">
            <summary>Server code for HistAddNarrate2 API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDNARRATE2EX">
            <summary>Server code for HistAddNarrate2Ex API</summary>
        </member>
        <member name="F:Medicomp.serverapis.MEDISPANIDS">
            <summary>Server code for MedispanIds API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTLIST">
            <summary>Server code for HistList API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SEPID">
            <summary>Server code for SepID API</summary>
        </member>
        <member name="F:Medicomp.serverapis.MEDISPANEX">
            <summary>Server code for MedispanEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CHECKALERT">
            <summary>Server code for CheckAlert</summary>
        </member>
        <member name="F:Medicomp.serverapis.EM95CAT">
            <summary>Server code for EM95Cat API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GPFLAGS">
            <summary>Server code for GpFlags API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ICDMAN">
            <summary>Server code for ICDMan API</summary>
        </member>
        <member name="F:Medicomp.serverapis.EM95ITEM">
            <summary>Server code for EM95Item API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETSUBGROUPSEQUENCE">
            <summary>Server code for GetSubGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETSUBGROUPSEQUENCE">
            <summary>Server code for SetSubGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMGGETIMAGEIDEX">
            <summary>Server code for GetImageIdEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETREFERENCEINFO">
            <summary>Server code for GetReferenceInfo API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CODEFROMMEDCIN">
            <summary>Server code for CodeFromMedcin API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETCODEDATE">
            <summary>Server code for SetCodeDate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETALERTLOOKBACK">
            <summary>Server code for SetAlertLookBack API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETALERTSUPPRESS">
            <summary>Server code for SetAlertSuppress API</summary>
        </member>
        <member name="F:Medicomp.serverapis.FINDINGCGN">
            <summary>Server code for FindingCgn API</summary>
        </member>
        <member name="F:Medicomp.serverapis.FINDINGTGN">
            <summary>Server code for FindingTgn API</summary>
        </member>
        <member name="F:Medicomp.serverapis.BASENARGROUP">
            <summary>Server code for BaseNarGroup API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETITEMDATA">
            <summary>Server code for GetItemData API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTGETITEMDATA">
            <summary>Server code for HistGetItemData API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SCREENFORCODES">
            <summary>Server code for ScreenForCodes</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDSEQUENCE">
            <summary>Server code for AddSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDSEQUENCEEX">
            <summary>Server code for AddSequenceEx API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETSEQUENCE">
            <summary>Server code for GetSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDSEQUENCE">
            <summary>Server code for HistAddSequence API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETRTFSTYLES">
            <summary>Server code for SetRtfStyles API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETPARAGRAPHSTYLES">
            <summary>Server code for SetParagraphStyles API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETCHAPTER">
            <summary>Server code for SetChapter</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDCHAPTER">
            <summary>Server code for AddChapter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDCHAPTER">
            <summary>Server code for HistAddChapter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.IMAGESEARCH">
            <summary>Server code for ImageSearch API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CODEFROMITEM">
            <summary>Server code for CodeFromItem API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTCODEFROMITEM">
            <summary>Server code for HistCodeFromItem API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETIMAGEPROPERTIES">
            <summary>Server code for GetImageProperties API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETSUBGROUP">
            <summary>Server code for GetSubGroup API</summary>
        </member>
        <member name="F:Medicomp.serverapis.CODEFROMPARMS">
            <summary>Server code for CodeFromParms API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDRANGESCALE">
            <summary>Server code for HistAddRangeScale API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTGETGROUPNUMBER">
            <summary>Server code for HistGetGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.serverapis.FORMATDATE">
            <summary>Server code for FormatDate API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTGRIDLAYOUT">
            <summary>Server code for HistGridLayout API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTDATAFILTER">
            <summary>Server code for HistDataFilter API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDSPECIFIER">
            <summary>Server code for HistAddSpecifier API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDSPECIFIER">
            <summary>Server code for HistAddSpecifier API</summary>
        </member>
        <member name="F:Medicomp.serverapis.BASEUSERFIND">
            <summary>Server code for BaseUserFinding API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDEMDATA">
            <summary>Server code for AddEMData API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDFINDINGIMAGE">
            <summary>Server code for AddFindingImage API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDFINDINGIMAGE">
            <summary>Server code for HistAddFindingImage API</summary>
        </member>
        <member name="F:Medicomp.serverapis.USERFINDINGPROPERTIES">
            <summary>Server code for UserFindingProperties API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETCAPTION">
            <summary>Server code for GetCaption API</summary>
        </member>
        <member name="F:Medicomp.serverapis.MEDCINIDFMNODEKEY">
            <summary>Server code for MedcinidFromNodekey API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDNARRATECODE">
            <summary>Server code for AddNarrateCode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDNARRATECODE">
            <summary>Server code for HistAddNarrateCode API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETCODEDESCRIPTION">
            <summary>Server code for GetCodeDescription API</summary>
        </member>
        <member name="F:Medicomp.serverapis.ADDENCOUNTERHEADINGS">
            <summary>Server code for AddEncounterHeadings API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTADDENCOUNTERHEADINGS">
            <summary>Server code for HistAddEncounterHeadings API</summary>
        </member>
        <member name="F:Medicomp.serverapis.REGISTERCLIENT">
            <summary>Server code for RegisterClient API</summary>
        </member>
        <member name="F:Medicomp.serverapis.GETSERVERPROPERTIES">
            <summary>Server code for GetServerProperties API</summary>
        </member>
        <member name="F:Medicomp.serverapis.SETSUBGROUP">
            <summary>Server code for SetSubGroup API</summary>
        </member>
        <member name="F:Medicomp.serverapis.HISTSETSUBGROUP">
            <summary>Server code for HistSetSubGroup API</summary>
        </member>
        <member name="F:Medicomp.serverapis.COST">
            <summary>Server code for Cost API</summary>
        </member>
        <member name="T:Medicomp.ServerItems">
            <summary>
            This enumerates the choices for retrieving information on the server
            </summary>
        </member>
        <member name="F:Medicomp.ServerItems.All">
            <summary>All information as noted below</summary>
        </member>
        <member name="F:Medicomp.ServerItems.OpenConnections">
            <summary>Number of open connections</summary>
        </member>
        <member name="F:Medicomp.ServerItems.Disconnections">
            <summary>Total number of disconnections</summary>
        </member>
        <member name="F:Medicomp.ServerItems.MaximumConnections">
            <summary>Highest number of simultanious connections</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheMisses">
            <summary>Number of cache misses (adds record to cache)</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheSwapOuts">
            <summary>Swapped out of cache</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheDirectHits">
            <summary>cache hits most recently used</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheHitsInArray">
            <summary>cache hits in array</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheHitsSearch">
            <summary>Number of memio cache searches</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheBytesActual">
            <summary>Actual cache size in bytes</summary>
        </member>
        <member name="F:Medicomp.ServerItems.CacheSizeCurrent">
            <summary>Current size of cache in bytes</summary>
        </member>
        <member name="F:Medicomp.ServerItems.NumberTransactions">
            <summary>Number of transactions</summary>
        </member>
        <member name="F:Medicomp.ServerItems.StatesSaved">
            <summary>State save requests</summary>
        </member>
        <member name="F:Medicomp.ServerItems.StatesRestored">
            <summary>State restore requests</summary>
        </member>
        <member name="F:Medicomp.ServerItems.StatesMaximum">
            <summary>Maximum concurrent saved states</summary>
        </member>
        <member name="F:Medicomp.ServerItems.StatesLost">
            <summary>Number of states that could not be restored due to cache overflow</summary>
        </member>
        <member name="F:Medicomp.ServerItems.AverageTime">
            <summary>Average time per request (milliseconds)</summary>
        </member>
        <member name="F:Medicomp.ServerItems.TotalTime">
            <summary>Total time processing requests milliseconds</summary>
        </member>
        <member name="F:Medicomp.ServerItems.MaximumMedcinid">
            <summary>Maximum Medcinid in the database</summary>
        </member>
        <member name="F:Medicomp.ServerItems.LowestUserfind">
            <summary>Lowest user finding number</summary>
        </member>
        <member name="F:Medicomp.ServerItems.HighestUserfind">
            <summary>Highest user finding number</summary>
        </member>
        <member name="F:Medicomp.ServerItems.LicenseInfo">
            <summary>License expiration in days</summary>
        </member>
        <member name="F:Medicomp.ServerItems.DataPath">
            <summary>Path of server data files</summary>
        </member>
        <member name="F:Medicomp.ServerItems.VersionInfo">
            <summary>Version information: data and server</summary>
        </member>
        <member name="F:Medicomp.ServerItems.ServerIP">
            <summary>IP address or hostname</summary>
        </member>
        <member name="F:Medicomp.ServerItems.ServerPort">
            <summary>Listening port</summary>
        </member>
        <member name="F:Medicomp.ServerItems.NumberThreads">
            <summary>Number of concurrent threads in Asynchronous mode</summary>
        </member>
        <member name="F:Medicomp.ServerItems.NetIn">
            <summary>Kiloytes read on all sockets</summary>
        </member>
        <member name="F:Medicomp.ServerItems.NetOut">
            <summary>Kiloytes sent on all sockets</summary>
        </member>
        <member name="F:Medicomp.ServerItems.PerSec">
            <summary>Transactions Per Second</summary>
        </member>
        <member name="F:Medicomp.ServerItems.MaxPerSec">
            <summary>Maximum Transactions Per Second</summary>
        </member>
        <member name="F:Medicomp.ServerItems.VarPath">
            <summary>1073741824: Data path for variable data</summary>
        </member>
        <member name="F:Medicomp.ServerItems.APIHits">
            <summary>-2147483648: Comma-delimited counts of API hits: 1 to maxmsgid</summary>
        </member>
        <member name="T:Medicomp.RTFelements">
            <summary>
            This enumerates the choices for narrative elements (initial rtfStyle conditions appear in parentheses)
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementGroup">
            <summary>
            This references Group headings (medFontRoman, medColorBlue, 24, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementTable">
            <summary>
            This references Table headings (medFontRoman, medColorBlack, 24, medPlain, 0, 'R2.5,R3.75,R5.0').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementTableBody">
            <summary>
            This references Table bodies (medFontRoman, medColorBlack, 20, medPlain, 0, 'R2.5,R3.75,R5.0').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementBody">
            <summary>
            This references body text in prose-styled paragraphs (medFontRoman, medColorBlack, 20, 
            medPlain, 0, '0.25').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementStressRestHead">
            <summary>
            This references Stress At-Rest Table headings headings (medFontRoman, medColorBlack, 24, medPlain, 
            0, 'r1,r1.75,r2.5,r3.25,r4,r4.75,r5.5').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementStressRestBody">
            <summary>
            This references Stress At-Rest Table bodies (medFontRoman, medColorBlack, 20, medPlain, 
            0, 'r1,r1.75,r2.5,r3.25,r4,r4.75,r5.5').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementStressTMHead">
            <summary>
            This references Stress Treadmill Table headings headings (medFontRoman, medColorBlack, 24, 
            medPlain, 0, 'r1,r1.75,r2.5,r3,r3.75,r4.5,r5,r5.5').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementStressTMBody">
            <summary>
            This references Stress Treadmill Table bodies (medFontRoman, medColorBlack, 20, medPlain, 
            0, 'r1,r1.75,r2.5,r3,r3.75,r4.5,r5,r5.5').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementStressECGHead">
            <summary>
            This references Stress ECG Table headings headings (medFontRoman, medColorBlack, 24, medPlain, 
            0, 'r1,r1.5,r2,r2.5,r3,r3.5,r4,r4.5,r5,,r5.5,r6').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementStressECGBody">
            <summary>
            This references Stress ECG Table bodies (medFontRoman, medColorBlack, 20, medPlain, 0, 
            'r1,r1.5,r2,r2.5,r3,r3.5,r4,r4.5,r5,,r5.5,r6').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementBodyOutline">
            <summary>
            This references body text in outline-style paragraphs (medFontRoman, medColorBlack, 20, 
            medPlain, 0, '0.25').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementHeader">
            <summary>
            This references the optional Narrative Header (medFontRoman, medColorBlack, 20, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementSubHead">
            <summary>
            This references Sub headings (medFontRoman, medColorBlack, 20, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementSectionHead">
            <summary>
            This references Section headings (medFontRoman, medColorBlack, 20, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementFreeText">
            <summary>
            This references free text findings (medFontRoman, medColorBlack, 20, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementCaption">
            <summary>
            This references in-line caption text (medFontRoman, medColorBlack, 20, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementTagText">
            <summary>
            This references string tags that are emitted (medFontRoman, medColorBlack, 20, medPlain, 0, '').
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCHead">
            <summary>
            This references the Nurse Plan of Care heading
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCDiagnoses">
            <summary>
            This references the Nurse Plan of Care clinical diagnoses
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCOrders">
            <summary>
            This references the Nurse Plan of Care clinical orders
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCRNDiagnoses">
            <summary>
            This references the Nurse Plan of Care nursing diagnoses
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCRNInterventions">
            <summary>
            This references the Nurse Plan of Care interventions
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCRNActions">
            <summary>
            This references the Nurse Plan of Care intervention actions
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCSubHead">
            <summary>
            This references the Nurse Plan of Care sub header
            </summary>
        </member>
        <member name="F:Medicomp.RTFelements.medElementPOCRNDiagnosesGoal">
            <summary>
            This references the Nurse Plan of Care nursing diagnoses goal
            </summary>
        </member>
        <member name="T:Medicomp.RTFfonts">
            <summary>
            This enumerates the choices for narrative font (font names used are shown in parentheses) 
            </summary>
        </member>
        <member name="F:Medicomp.RTFfonts.medFontRoman">
            <summary>
            Roman is a font that uses serifs (Times New Roman).
            </summary>
        </member>
        <member name="F:Medicomp.RTFfonts.medFontSwiss">
            <summary>
            Swiss is a sans-serif font. (Arial)
            </summary>
        </member>
        <member name="F:Medicomp.RTFfonts.medFontFixed">
            <summary>
            Fixed is a fixed-pitch font (Courier New).
            </summary>
        </member>
        <member name="T:Medicomp.RTFcolors">
            <summary>
            This enumerates the allowable choices for color used in narative elements and borders.
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorBlack">
            <summary>
            Equivalent to RGB(0,0,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorBlue">
            <summary>
            Equivalent to RGB(0,0,255)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorAqua">
            <summary>
            Equivalent to RGB(0,255,255)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorLime">
            <summary>
            Equivalent to RGB(0,255,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorFuschia">
            <summary>
            Equivalent to RGB(255,0,255)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorRed">
            <summary>
            Equivalent to RGB(255,0,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorYellow">
            <summary>
            Equivalent to RGB(255,255,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorWhite">
            <summary>
            Equivalent to RGB(255,255,255)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorNavy">
            <summary>
            Equivalent to RGB(0,0,128)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorTeal">
            <summary>
            Equivalent to RGB(0,128,128)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorGreen">
            <summary>
            Equivalent to RGB(0,128,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorPurple">
            <summary>
            Equivalent to RGB(128,0,128)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorMaroon">
            <summary>
            Equivalent to RGB(128,0,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorOlive">
            <summary>
            Equivalent to RGB(128,128,0)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorGray">
            <summary>
            Equivalent to RGB(128,128,128)
            </summary>
        </member>
        <member name="F:Medicomp.RTFcolors.medColorSilver">
            <summary>
            Equivalent to RGB(192,192,192)
            </summary>
        </member>
        <member name="T:Medicomp.RTFattributes">
            <summary>
            This enumerates the allowable choices for narrative font attributes. Attributes may
            be specified using any combination of the enumerated values.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medPlain">
            <summary>
            This specifies plain text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medBold">
            <summary>
            This specifies <b>bold</b> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medItalic">
            <summary>
            This specifies <i>italicized</i> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medBoldItalic">
            <summary>
            This specifies <b><i>bolded and italicized</i></b> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medUnderline">
            <summary>
            This specifies <u>underlined</u> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medBoldUnderline">
            <summary>
            This specifies <b><u>bolded and underlined</u></b> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medItalicUnderline">
            <summary>
            This specifies <i><u>italicized and underlined</u></i> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medBoldItalicUnderline">
            <summary>
            This specifies <b><i><u>bolded, italicized, and underlined</u></i></b> text.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medStrikethrough">
            <summary>
            This specifies <strike>strike through text</strike>.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medCaps">
            <summary>
            This specifies TEXT IN ALL CAPITALS. The medCaps setting is supported only for the following 
            heading-type elements: medElementGroup, medElementTable, medElementStressRestHead, 
            medElementStressTMHead, medElementStressECGHead, medElementSubHead, medElementSectionHead, 
            and medElementCaption. 
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medTabParagraph">
            <summary>
            The medTabParagraph setting is supported to provide a work-around for the Microsoft RichText 
            control that does not properly support the \fi RTF code. By setting this attribute along with 
            a tabstop at L0.25 for the medElementBody element, MEDCIN will emit a \tab at a body element 
            paragraph start instead of the \fi360 default.
            </summary>
        </member>
        <member name="F:Medicomp.RTFattributes.medBlankLineBefore">
            <summary>
            The medBlankLineBefore setting is provided to work around controls that do not support a margin 
            above paragraph style (i.e. Rich Text \sbn RTF code). The blank line before setting is 
            supported for RTF and HTML.
            </summary>
        </member>
        <member name="T:Medicomp.BorderFrames">
            <summary>
            This enumerates the allowable choices that can be used in combination to specify a narrative 
            paragraph border. Borders are applied only to table elements for HTML output, and all elements 
            for RTF output. Note, however, that the Microsoft RichText control does not support borders. 
            Nevertheless, the RTF output from the narrative generator emits the RTF border codes (the result 
            may be seen in Microsoft Word). BorderFrames is used in the ParagraphStyle method.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameNone">
            <summary>
            This specifies no frame.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameTop">
            <summary>
            This specifies a horizontal line above the paragraph.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameLeft">
            <summary>
            This specifies a vertical line to the left of the paragraph.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameBottom">
            <summary>
            This specifies a horizontal line below the paragraph.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameRight">
            <summary>
            This specifies a vertical line to the right of the paragraph.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameBox">
            <summary>
            This specifies a box surrounding the paragraph.
            </summary>
        </member>
        <member name="F:Medicomp.BorderFrames.medFrameShadow">
            <summary>
            This specifies a shadow box; it applies only to RTF.
            </summary>
        </member>
        <member name="T:Medicomp.ListSizes">
            <summary>
            This enumeration provides for different list sizes typically used with prompting functions. 
            </summary>
        </member>
        <member name="F:Medicomp.ListSizes.medListSmall">
            <summary>
            A small list typically is restricted to records in the diagnostic table that have the 
            iprompt field set to 2
            </summary>
        </member>
        <member name="F:Medicomp.ListSizes.medListLarge">
            <summary>
            A large list starts with records in the diagnostic table with the iprompt field set to 
            1 or 2, and then children are removed if parental findings are not in the chart data.
            </summary>
        </member>
        <member name="F:Medicomp.ListSizes.medListFull">
            <summary>
            A full list is all diagnostic table records that have a iprompt field set to 1 or 2.
            </summary>
        </member>
        <member name="T:Medicomp.LinkPMHs">
            <summary>
            The LinkPMH method has been discontinued. This enumeration exists solely for historical purposes.
            </summary>
        </member>
        <member name="F:Medicomp.LinkPMHs.medHPILinkOff">
            <summary>
            No linkage
            </summary>
        </member>
        <member name="F:Medicomp.LinkPMHs.medHPILinkBefore">
            <summary>
            Place relevant PMH before HPI negative section
            </summary>
        </member>
        <member name="F:Medicomp.LinkPMHs.medHPILinkAfter">
            <summary>
            Place relevant PMH after HPI negative section.
            </summary>
        </member>
        <member name="T:Medicomp.NarrativeFormats">
            <summary>
            This enumerates the type of format for the encounter narrative. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatEdit">
            <summary>
            The narrate output is set one finding per line using sentence table doctor text. 
            Group headings are generated where appropriate. 
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatOutline">
            <summary>
            Similar to medFormatNarrate; however, paragraphs generated for the Review of Systems 
            and Physical groups will use a hanging indent paragraph style for NarrativeOutput 
            other than medOutputPlain.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatNarrative">
            <summary>
            Paragraphs are generated using a first-line indent. Note that this style may be changed 
            for NarrativeOutput other than medOutputPlain by assigning a ParagraphStyle to medElementBody.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatTerse">
            <summary>
            This format is reserved for future use.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatTree">
            <summary>
            This format is used with the narrateex API for requesting encounter data in bulk.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatUseCodeStrOnly">
            <summary>
            This flag can be specified to designate that where a code string has been added 
            to a finding instance in the encounter using the AddNarrateCode API, 
            the narration should emit only the code string description and optionally any attached note text.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatUseMedcinUseCodeStr">
            <summary>
            This flag can be specified to designate that where a code string has been added to a finding instance 
            in the encounter using the AddNarrateCode API, the narration should emit the normal 
            Medcin description followed by the code string description.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatUseCodeStrUseMedcin">
            <summary>
            This flag can be specified to designate that where a code string has been added to a finding instance 
            in the encounter using the AddNarrateCode API, the narration should emit the code string 
            description followed by the normal Medcin description.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatAddTextDelimiter">
            <summary>
            This specifies that a delimiter will be added to surround the CodeStr text string
            when the format specifies use of a CodeStr. It will be prefixed with the message 
            string identified by MSG_CODEOPEN (the Medcin default is "[[") and suffixed with 
            the message string identified by MSG_CODECLOS (the Medcin default is "]]").
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeFormats.medFormatAddCodeToCodeStr">
            <summary>
            This specifies that the code will be added to the CodeStr text string as a
            prefix when the format specifies use of a CodeStr (i.e. code: codestr). (e.g. "001: Cholera").
            </summary>
        </member>
        <member name="T:Medicomp.NarrativeTags">
            <summary>
            This enumerates the allowable choices for displaying a client tag (number and/or string) to 
            the marrative finding text. The newstate may consist of the sum of two or more values. 
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagNone">
            <summary>
            No tag is prefixed to finding text.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagLong">
            <summary>
            The item lTag, if any, is prefixed to the generated text.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagString">
            <summary>
            The item sTag, if not used for medTagAsHREF, is prefixed to the generated text. If the sTag 
            contains multiple fields, the fields can be selectively presented by using the NarrateGroups 
            API. The string will be presented using the medTagText element styling.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagAll">
            <summary>
            Both tags are prefixed to the generated text.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagAsHREF">
            <summary>
            When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as an HTML 
            link (HREF=) using the lTag field of the itemtag. If medTagLong is not specified and medTagString 
            is, then the string tag will be used for the link and will be unavailable for showing. The text 
            encompassed by the link will be the first word of the corresponding finding text (or first two 
            words if the first word is shorter than five characters). The tag will be prefixed with 'C:\' 
            so that a web browser control considers the URL to be local to the machine. For example, using 
            medTagLong+medTagAsHREF and an itemtag of 17, the URL reference will be, 'C:\17'. When the 
            NarrativeOutput property is set to medOutputRTF, the lTag field will be emitted formatted as 
            rtf hidden text by surrounding the tag string with '\v' and '\v0' rtf codes. A full rtf reader 
            will properly format the text as hidden. The medTagAsHREF property is ignored if NarrativeOutput 
            is neither medOutputHTML nor medOutputRTF. Note that the prefix string, 'c:\' used to construct 
            the URL reference can be altered by changing MessageString(MSG_HREFPREFIX).
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagStringPost">
            <summary>
            The item sTag, if not used for medTagAsHREF,  is postfixed to the generated text following any 
            attached note. If the sTag contains multiple fields, fields may be selected for presentation 
            using the NarrateGroups API. The tag string is preceded with a MSG_SHOWOPEN string and 
            succeeded with a MSG_SHOWCLOSED string. The string will be presented using the medTagText 
            element styling.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeTags.medTagBookmark">
            <summary>
            When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as a bookmark. 
            Your application can then use this bookmark for navigation using an HTML rendering engine. 
            The bookmark will use the long tag if specified, or the itemid if the long tag is 0. The 
            bookmark can be used independently of or concurrently with the HREF. Bookmarks are constructed 
            as NAME='ltag' or NAME='itemid' and are within the scope of the finding anchor tag.
            </summary>
        </member>
        <member name="T:Medicomp.ShowOptions">
            <summary>
            This ShowOptions enumeration is a composite of ShowItemid, ShowMedcinid, and NarrativeTags. The 
            argument may consist of the sum of two or more values. This is used with the NarrateEx mthod.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowNone">
            <summary>
            No tag is prefixed to finding text.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowTagLong">
            <summary>
            The item lTag, if any, is prefixed to the generated text.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowTagString">
            <summary>
            The item sTag, if not used for medTagAsHREF, is prefixed to the generated text. If the sTag 
            contains multiple fields, the fields can be selectively presented by using the NarrateGroups 
            API. The string will be presented using the medTagText element styling.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowTagAsHREF">
            <summary>
            When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as an HTML 
            link (HREF=) using the lTag field of the itemtag. If medTagLong is not specified and medTagString 
            is, then the string tag will be used for the link and will be unavailable for showing. The text 
            encompassed by the link will be the first word of the corresponding finding text (or first two 
            words if the first word is shorter than five characters). The tag will be prefixed with 'C:\' 
            so that a web browser control considers the URL to be local to the machine. For example, using 
            medTagLong+medTagAsHREF and an itemtag of 17, the URL reference will be, 'C:\17'. When the 
            NarrativeOutput property is set to medOutputRTF, the lTag field will be emitted formatted as 
            rtf hidden text by surrounding the tag string with '\v' and '\v0' rtf codes. A full rtf reader 
            will properly format the text as hidden. The medTagAsHREF property is ignored if NarrativeOutput 
            is neither medOutputHTML nor medOutputRTF. Note that the prefix string, 'c:\' used to construct 
            the URL reference can be altered by changing MessageString(MSG_HREFPREFIX).
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowAsHREF">
            <summary>
            Same as medShowTagAsHREF
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowTagStringPost">
            <summary>
            The item sTag, if not used for medTagAsHREF,  is postfixed to the generated text following any 
            attached note. If the sTag contains multiple fields, fields may be selected for presentation 
            using the NarrateGroups API. The tag string is preceded with a MSG_SHOWOPEN string and 
            succeeded with a MSG_SHOWCLOSED string. The string will be presented using the medTagText 
            element styling.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowMedcinid">
            <summary>
            When specified, the Medcinid will be prefixed to the generated text.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowItemid">
            <summary>
            When specified, the itemid will be prefixed to the generated text.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowBookmark">
            <summary>
            When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as a bookmark. 
            Your application can then use this bookmark for navigation using an HTML rendering engine. 
            The bookmark will use the long tag if specified, or the itemid if the long tag is 0. The 
            bookmark can be used independently of or concurrently with the HREF. Bookmarks are constructed 
            as NAME='ltag' or NAME='itemid' and are within the scope of the finding anchor tag.
            </summary>
        </member>
        <member name="F:Medicomp.ShowOptions.medShowChapters">
            <summary>
            Used with narrateex for outline tree to include chapters.
            </summary>
        </member>
        <member name="T:Medicomp.NarrateOptions">
            <summary>
            This enumerates the options used to customize the narrative generation. A combination of two or more values is acceptable. 
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medOptionNone">
            <summary>
            All options disabled.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoGroupHeadings">
            <summary>
            Group headings are suppressed.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoDoctorHeadings">
            <summary>
            Doctor headings, such as 'The doctor ordered the following therapy' are suppressed.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoPatientHPIString">
            <summary>
            The patient HPI string, 'The patient is a nn year old gender, …', is suppressed.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNumberedUseBullets">
            <summary>
            Lines of output which are normally numbered lists (i.e. medications, therapies) will instead be 
            bulleted (supported only for HTML and RTF output).
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medInlineBulletsHPI">
            <summary>
            Special bullet mode for HPI narrative group.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medBodyOnly">
            <summary>
            Limit the narrative output of Rich Text or HTML to that of the body portion of the document. 
            The string returned from narrate can then replace the Document.Body.InnerHTML of the 
            WebBrowser control, or be combined with the heading generated from a blank encounter in 
            medOutputRTF.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoTableRanges">
            <summary>
            Tables will not include the 'Normal range' column.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medInlineBullets">
            <summary>
            Special narrative presentation for outline format only of the G_PHYSICAL group (Physical examination) 
            which inserts a 'bullet' character as separation for positive findings and a '°' character for 
            negative findings; each finding is narrated in sentence form with some pruning of sentence 
            lead-in phrasing. Findings within a section are sequenced positives followed by negatives. 
            In addition, onset dates in the history section will present a hyphen instead of the 'as of' 
            string preceding the onset string. The HPI group will also use the positive and negative bullets.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNarrateHeader">
            <summary>
            Narrative generation will include a header string emitted prior to the first narrative group. 
            The contents of the string are formatted according to the specifications found in the 
            MSG_NARHEAD message string.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoOneLineTables">
            <summary>
            When set, physical exam and test tables (other than the stress test tables) <u>that have only one entry</u> 
            will be narrated in a prose paragraph style rather than in a table structure.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medSpaceBeforeNegHPI">
            <summary>
            A blank line will emit prior to the all-negative body systems paragraph of the HPI narrative group.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoSeparateNegHPI">
            <summary>
            HPI body systems with all negative findings are sequenced as the last section in HPI as a single 
            paragraph. Setting this option sequences the negative findings within their specified body 
            system sequence.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medCCSystemFirst">
            <summary>
            If the chief complaint narrative group contains a coded symptom finding other than the chief 
            complaint free text finding and this option is enabled, the body system of that finding will 
            be sequenced first in HPI and ROS regardless of the user's designated sub-group sequence.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoTableHeads">
            <summary>
            Tables generated using the TableHead and TableBody elements will not include the header row.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medChapterHeadings">
            <summary>
            Add chapter header on new chapters if more than 1.
            </summary>
        </member>
        <member name="F:Medicomp.NarrateOptions.medNoImageData">
            <summary>
            Suppress insertion of finding image data in the narration.
            </summary>
        </member>
        <member name="T:Medicomp.NarrativeContexts">
            <summary>
            This enumerates the type of context for the encounter narrative. 
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextNone">
            <summary>
            Nothing is generated by Narrate() or NarrateEx(); they will return a null string.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextPatient">
            <summary>
            Output is referenced for a patient. Lay text is used for sentence 
            construction and pronouns reflect first person (You, your, etc).
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextReferring">
            <summary>
            Output is referenced for a professional taken to be the referring 
            physician. Doctor text is used for sentence construction and pronouns 
            reflect second person (He, She, etc).
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextReferred">
            <summary>
            which the patient is referred. Doctor text is used for sentence construction 
            and pronouns reflect second person (He, She, etc).
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextPhysicianVisitSummary">
            <summary>
            Doctor text is used for sentence construction and pronouns reflect second 
            person (He, She, etc).
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextPatientVisitSummary">
            <summary>
            Output is referenced for a patient and is assumed to be a summary form. Lay text 
            is used for sentence construction and pronouns reflect first person (You, your, etc). 
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeContexts.medContextChart">
            <summary>
            Output is referenced for a professional and is assumed to be the chart presentation. 
            Doctor text is used for sentence construction and pronouns reflect second person (He, She, etc).
            </summary>
        </member>
        <member name="T:Medicomp.NarrativeOutputs">
            <summary>
            This enumerates the type of output for the enounter narrative. 
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeOutputs.medOutputPlain">
            <summary>
            This setting establishes the string returned by Narrate() as plain text.
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeOutputs.medOutputRtf">
            <summary>
            This setting establishes the string returned by Narrate() as Rich Text Format. 
            Narrate() output can be posted directly to a Microsoft Rich Text control
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeOutputs.medOutputHtml">
            <summary>
            This setting establishes the string returned by narrate() as HTML text. 
            If you are using the WebBrowser control and are requesting medBodyOnly narration, 
            the returned string can replace the current text of the control by
            'wbrChart.Document.body.innerHTML = Medcin.Narrate'
            </summary>
        </member>
        <member name="F:Medicomp.NarrativeOutputs.medOutputXML">
            <summary>
            This setting establishes the string returned by narrate() as an XML document.
            Note that this format is under development but can be used for evaluation purposes.
            </summary>
        </member>
        <member name="T:Medicomp.DocCodes">
            <summary>
            This enumerates the available doctor identification functions for narration when the docid for the 
            function is different than the docid for the encounter. The enumeration will be expanded as 
            additional functions are implemented.
            </summary>
        </member>
        <member name="F:Medicomp.DocCodes.medNoneEntering">
            <summary>This identifies the provider entering data as unspecified to role.</summary>
        </member>
        <member name="F:Medicomp.DocCodes.medDocEntering">
            <summary>This identifies the doctor provider as the one entering data.</summary>
        </member>
        <member name="F:Medicomp.DocCodes.medNurseEntering">
            <summary>This identifies the nurse provider as the one entering data.</summary>
        </member>
        <member name="T:Medicomp.MedcinGroups">
            <summary>
            This enumerates the available narrative groups. All miscellaneous groups are
            application defined. Group numbers greater than MaxGroup are for internal use only.
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.GroupNone">
            <summary>
            Specifies no group in some methods.
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.AllGroups">
            <summary>
            Specifies all groups in some methods.
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Allergies">
            <summary>
            Allergies
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Assessment">
            <summary>
            Assessment
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.ChiefComplaint">
            <summary>
            Chief Complaint
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.CounselingEducation">
            <summary>
            Counseling and Education
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.CurrentMedication">
            <summary>
            Current Medication
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Discussed">
            <summary>
            Discussed
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.FamilyHistory">
            <summary>
            Family History
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.History">
            <summary>
            History (Subjective)
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.HistoryPresentIllness">
            <summary>
            History Of Present Illness
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Notes">
            <summary>
            Notes
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Objective">
            <summary>
            Objective
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.PastMedicalHistory">
            <summary>
            Past Medical History
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.PersonalHistory">
            <summary>
            Personal History
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.PhysicalFindings">
            <summary>
            Physical Findings
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Plan">
            <summary>
            Plan
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.PracticeManagement">
            <summary>
            Practice Management
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.PreviousTests">
            <summary>
            Previous Tests
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.PreviousTherapy">
            <summary>
            Previous Therapy
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.ReviewOfSystems">
            <summary>
            Review Of Systems
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.ReferredHere">
            <summary>
            Referred Here
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.TestConclusions">
            <summary>
            Test Conclusions
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Tests">
            <summary>
            Tests
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Therapy">
            <summary>
            Therapy
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.RuleOut">
            <summary>
            Rule Out
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Vaccinations">
            <summary>
            Vaccinations
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.ReasonForVisit">
            <summary>
            Reason For Visit
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous1">
            <summary>
            Miscellaneous Group 1
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous2">
            <summary>
            Miscellaneous Group 2
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous3">
            <summary>
            Miscellaneous Group 3
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous4">
            <summary>
            Miscellaneous Group 4
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous5">
            <summary>
            Miscellaneous Group 5
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous6">
            <summary>
            Miscellaneous Group 6
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous7">
            <summary>
            Miscellaneous Group 7
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous8">
            <summary>
            Miscellaneous Group 8
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous9">
            <summary>
            Miscellaneous Group 9
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous10">
            <summary>
            Miscellaneous Group 10
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous11">
            <summary>
            Miscellaneous Group 11
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous12">
            <summary>
            Miscellaneous Group 12
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous13">
            <summary>
            Miscellaneous Group 13
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous14">
            <summary>
            Miscellaneous Group 14
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous15">
            <summary>
            Miscellaneous Group 15
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous16">
            <summary>
            Miscellaneous Group 16
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous17">
            <summary>
            Miscellaneous Group 17
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous18">
            <summary>
            Miscellaneous Group 18
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous19">
            <summary>
            46: Miscellaneous Group 19
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous20">
            <summary>
            Miscellaneous Group 20
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous21">
            <summary>
            Miscellaneous Group 21
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous22">
            <summary>
            Miscellaneous Group 22
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous23">
            <summary>
            Miscellaneous Group 23
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous24">
            <summary>
            Miscellaneous Group 24
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous25">
            <summary>
            Miscellaneous Group 25
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous26">
            <summary>
            Miscellaneous Group 26
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous27">
            <summary>
            Miscellaneous Group 27
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous28">
            <summary>
            Miscellaneous Group 28
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous29">
            <summary>
            56: Miscellaneous Group 29
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous30">
            <summary>
            Miscellaneous Group 30
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous31">
            <summary>
            Miscellaneous Group 31
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous32">
            <summary>
            Miscellaneous Group 32
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous33">
            <summary>
            Miscellaneous Group 33
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous34">
            <summary>
            Miscellaneous Group 34
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous35">
            <summary>
            Miscellaneous Group 35
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous36">
            <summary>
            Miscellaneous Group 36
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Miscellaneous37">
            <summary>
            64: Miscellaneous Group 37
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.MaxGroup">
            <summary>
            Maximum group number
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.EMData">
            <summary>
            Use for adding non-narrative E and M data items only
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.CarePlan">
            <summary>
            Care Plan for internal use
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.Hidden">
            <summary>
            Charts assigned to this group will not appear in the narration
            </summary>
        </member>
        <member name="F:Medicomp.MedcinGroups.VitalSignsSummary">
            <summary>
            Used for the care plan vital signs table
            </summary>
        </member>
        <member name="T:Medicomp.DatePrecisions">
            <summary>
            This enumerates the precision of a date. Representative syntax is shown in parentheses.
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionAll">
            <summary>
            0x41, 'A': Used to pass all precision strings in SetTimeFormat
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionYear">
            <summary>
            0x59, 'Y': Year precision (YYYY)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionMonth">
            <summary>
            0x4d, 'M': Month precision (YYYYMM)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionWeek">
            <summary>
            0x57, 'W': Week precision (YYYYWWW)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionDay">
            <summary>
            0x44, 'D': Day precision (YYYYMMDD)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionHour">
            <summary>
            0x48, 'H': Hour precision (YYYYMMDDHH)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionMinute">
            <summary>
            0x49, 'I': Minute precision (YYYYMMDDHHII)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionSecond">
            <summary>
            0x53, 'S': Second precision (YYYYMMDDHHIISSS)
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionTimeOnly">
            <summary>
            0x54, 'T': Time only precision for display that uses the precision of the entry.
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionTimeZone">
            <summary>
            0x5a, 'Z': This precision is actually used to pass the time zone desired for displaying date formats 
            that use the '%Z' specifier. 
            </summary>
        </member>
        <member name="F:Medicomp.DatePrecisions.medPrecisionCheck">
            <summary>
            0x3f '?': This precision is actually used to pass a format string to be checked for validity and 
            obtainable as a formatted date. It can be used to display a real-time date string used by 
            applications that want to provide a dialog for changing formats as a user preference.
            </summary>
        </member>
        <member name="T:Medicomp.TimedSections">
            <summary>
            This enumerates the available choices associated with presenting timed findings (findings with an 
            onset date more recent than the encounter date) into separate section groupings. 
            </summary>
        </member>
        <member name="F:Medicomp.TimedSections.medTimedOff">
            <summary>
            Timed findings are sequenced by finding.
            </summary>
        </member>
        <member name="F:Medicomp.TimedSections.medTimedOn">
            <summary>
            Timed findings are sequenced by onset time; no separate titling heading is presented after the first.
            </summary>
        </member>
        <member name="F:Medicomp.TimedSections.medTimedHeading">
            <summary>
            Timed findings are sequenced by onset time; a separate titling heading is presented for each 
            grouped sequence.
            </summary>
        </member>
        <member name="F:Medicomp.TimedSections.medTimedVitals">
            <summary>
            Set this flag to sequence Vital signs within the same encounter that have different onset times 
            by onset time within the current encounter time section. 
            </summary>
        </member>
        <member name="T:Medicomp.MedTermtypes">
            <summary>
            This enumerates the available terminology types of findings.
            </summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermAll">
            <summary>Used to specify all types.</summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermSymptom">
            <summary>Used to specify symptoms.</summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermPhysical">
            <summary>Used to specify physical examination.</summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermTest">
            <summary>Used to specify tests.</summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermHistory">
            <summary>Used to specify history.</summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermDisease">
            <summary>Used to specify diagnoses.</summary>
        </member>
        <member name="F:Medicomp.MedTermtypes.medTermTherapy">
            <summary>Used to specify therapy.</summary>
        </member>
        <member name="T:Medicomp.BuildListModes">
            <summary>
            The enumerates the available options that affect data returned ResponseItem lists, where applicable.
            Combinations of values are acceptable.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medNormal">
            <summary>
            Normal default operation.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medICDonly">
            <summary>
            ActivateWordSearch() and ActivateExpansion() only return findings having billable ICD codes.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medCPTonly">
            <summary>
            ActivateWordSearch() and ActivateExpansion () only return findings having CPT codes.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medSpreadsheet">
            <summary>
            Buildlist will return data formatted for building a spreadsheet display. This is currently supported 
            for HistActivate, HistActivateDx, HistList, HistWordSearch, HistRetrieveOrder, and HistRetrieveEncounter APIs.
            </summary>
            <remarks>
            In This mode, the first record contains all the encountertimes that are to be used as columns. 
            Following is the row data. Row data can be headings (normally narrative group), subheadings 
            (normally body systems or title groups), or findings. Findings that have the CalulatedDx=1 
            are first level display findings, if this argument is not set then the finding is a child 
            of the previous row and should only be displayed by expansion. A row with the subs argument 
            set to "+" indicates that at least one child is immediately following the parent rows.
            <para>Below describes the data format using this key to the Buildlist() Arguments:</para>
            <para>B=medcinid, N=nodekey, D=description, T=Termtype, P=prefix, C=calculatedDx.</para>
            <para>
            M= -1, N=HeaderInfo, D="encountertime1\tencountertime2\tencountertime3…, P=”etime1\tetime2\tetime3…”. 
            This is the first record. Each encountertime is a column, starting at column 1 and is expressed in 
            Medcin date format at the precision of the column as set by the HistGridLayout API. 
            Each etime is the corresponding column encounter time expressed as a formatted date using the 
            date format for the precision of the column but limited to a maximum precision of day (hours, minutes, 
            and seconds are not provided). The current connection’s preference for day precision time format is used, 
            except that long form month (B) is converted to short form month (b). The Prefix argument may be used 
            as a grid column heading. The Nodekey parameter contains the current spread sheet layout and filter 
            parameters as a comma-delimited string in the following order:
            </para>
            <para>DateFm, DateTo, TimeFm, TimeTo, Column Precision, Sort Order, DataFilterMode</para>
            <para>
            Since grid layout and filter properties are preserved at the server until changed, this header 
            can be useful to synchronize any caption properties you display across modules. Any date or time field 
            that is empty will be emitted as an empty string, otherwise it will be in Medcin date or time order 
            (see the HistDataFilter API). The column precision will be one of the precision characters, 
            while the Sort Order will be a 0 (ascending) or 1 (descending). An example of a string with empty times is:
            </para>
            <para>“,,,,I,0,1024”		empty dates and times, minute precision, ascending sort order, retrieve result sets.</para>
            <para>
            M= -2, D="Heading", T= group or heading number. These are the 64 groups supported by the narrative functionality. 
            Following records will belong to this group until another record with M=-2 is received indicating a new group. 
            The speadsheet mode supports the user defined group order functionality set using GroupSequence(groupNumber as Int16) = newgroupsequence.
            </para>
            <para>
            M= -3, D="SubHeading", T= body system or sub-heading number. Following records will belong to this 
            subhead until another record with M=-3 is received indicating a new subhead
            </para>
            <para>
            M &gt; 0, M is the medcinid of the row. D="description of finding", This is only for the first occurrence of this medcinid, 
            as following records with the same medcinid are displayed in different columns on the same row. P="Column Number \t Sequence number ". 
            Additional data may be concatenated on if the Buildlistmode bit 0x0010 for extended data mode is set.  
            C=true if the row is a level one display item. C=false when the row is a child. The Subs argument is a "+" when children are following.
            </para>
            <para>M=0 last record indicator.</para>
            </remarks>
        </member>
        <member name="F:Medicomp.BuildListModes.medTerse">
            <summary>
            Description data is terse (shortened text for small displays like PDAs).
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medExtended">
            <summary>
            Extended data is in the prefix field of the ResponseItem. Fields are in a tab delimited string.
            Fields will only be present if they contain data.
            </summary>
            <remarks>The following designates the character used to specify each field (each field character
            is followed by an equals sign character then the field data):
            <para>
            <list type="table">
            <listheader><term>character</term><description>Description of Data</description></listheader>
            <item><term>a</term><description>status</description></item>
            <item><term>b</term><description>referred to docid</description></item>
            <item><term>c</term><description>chartflag</description></item>
            <item><term>C</term><description>CodeStr assignment</description></item>
            <item><term>d</term><description>duration</description></item>
            <item><term>e</term><description>encountertime</description></item>
            <item><term>F</term><description>QualifierLinkSequence;QualifierLink</description></item>
            <item><term>g</term><description>Medcin flags property</description></item>
            <item><term>G</term><description>Medcin GPflags property</description></item>
            <item><term>k</term><description>episode</description></item>
            <item><term>L</term><description>RangeScale</description></item>
            <item><term>m</term><description>modifier</description></item>
            <item><term>n</term><description>note (maximum of 48 characters – see HistGetItemData)</description></item>
            <item><term>o</term><description>onset</description></item>
            <item><term>p</term><description>prefix</description></item>
            <item><term>q</term><description>+ or - (positive or negative)</description></item>
            <item><term>r</term><description>Rx string</description></item>
            <item><term>s</term><description>sequence number</description></item>
            <item><term>t</term><description>result</description></item>
            <item><term>T</term><description>terminology type</description></item>
            <item><term>u</term><description>units of measure</description></item>
            <item><term>v</term><description>value string</description></item>
            <item><term>x</term><description>rxcode if termtype is TYPE_RX</description></item>
            <item><term>y</term><description>range normal low</description></item>
            <item><term>z</term><description>range normal high</description></item>
            <item><term>$</term><description>cost property, if not 0.0</description></item>
            </list>
            </para></remarks>
        </member>
        <member name="F:Medicomp.BuildListModes.medTranscribe">
            <summary>
            The description data field is transcribed instead of using the search description. This is only 
            for the HistActive* functions.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medFollowup">
            <summary>
            Follow-up mode for retrieving relevant problem management findings from the history pool. 
            This is usually done in the spreadsheet display mode (medSpreadsheet + medFollowup).
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medBuildListUDF">
            <summary>
            Response lists will return only user defined findings.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medAllICD">
            <summary>
            Response lists will include ICD9 code unless medICDOnly is set.
            </summary>
            <remarks>
            This causes the WordSearch()/ActivateWordSearch() function set and the ActivateExpansion() function 
            to return only user-defined findings. This mode should be set prior to invoking the WordSearch() or 
            ActivateExpansion() function. In this mode ActivateExpansion() returns all children not just the immediate children. 
            To retrieve user-defined findings by class, expand the below medcinids that are the six class roots:
            <list type="bullets">
            <item><description>Symptoms - ActivateExpansion(2952) </description></item>
            <item><description>History - ActivateExpansion(5141)</description></item>
            <item><description>Physical Findings - ActivateExpansion(6000)</description></item>
            <item><description>Tests - ActivateExpansion(102905)</description></item>
            <item><description>Diagnosis - ActivateExpansion(39448)</description></item>
            <item><description>Therapy - ActivateExpansion(40000)</description></item>
            </list>
            Alternatively, calling ActivateExpansion passing 0 for the Medcinid parameter will return the six root terms
            </remarks>
        </member>
        <member name="F:Medicomp.BuildListModes.medICD10CMOnly">
            <summary>
            ActivateWordSearch() and ActivateExpansion() only return findings having reportable ICD10-CM codes.
            This enum is similar to the medICDOnly enum in that only findings with a reportable ICD10-CM code 
            will be surfaced as enterable in ActivateWordSearch and ActivateExpansion APIs. Note that the ICD-10-CM 
            codes that appear in the finding description will also include the actual ICD10CM description 
            (currently showing within square brackets) if that server global option is enabled.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medICD10CMVirtual">
            <summary>
            ActivateWordSearch() and ActivateExpansion() include ICD10 virtual findings; must be used with medICD10CMOnly.
            The feature behind this enum is functional only when medICD10CMOnly is in effect. 
            When active, the ActivateWordSearch and ActivateExpansion APIs will include a finding's virtual ICD10CM codes; 
            such codes are virtualized from ICD-10-CM code specification lookup lists. For these ResponseItem items, 
            the Medcin description will include the strings that correspond to each typeid that is used in virtualizing 
            the ICD-10-CM code; the ItemFlags Virtual Finding flag bit (Medicomp.CodeMapFlags enum) will be set; 
            the specification string will appear in the Vardata field. In addition, an arbitrary unique character will be 
            appended to the nodekey for each ResponseItem subsequent to the first item of a given Medcinid; 
            this is to ensure that the nodekey will remain unique for usage in a tree view component that may need unique key strings. 
            The purpose of this functionality is to provide a means for the application to present all the codes that would (should) 
            be applicable to the particular finding.
            </summary>
        </member>
        <member name="F:Medicomp.BuildListModes.medDataMode">
            <summary>
            Used to preovide raw data in special cases
            </summary>
        </member>
        <member name="T:Medicomp.MedAlertFlags">
            <summary>
            This enumerates preferences on alerts results and evaluation considerations.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertNone">
            <summary>
            No Results.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertResultLevel1">
            <summary>
            Results are alerts level 1.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertResultLevel2">
            <summary>
            Results are alerts level 2.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertResultLevel3">
            <summary>
            Results are alerts level 3.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertResultLevel4">
            <summary>
            Results are alerts level 4.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertResultCount">
            <summary>
            Add counts of alerts for levels 4, 3, 2, and 1 to start of results string.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertOrdersOnly">
            <summary>
            Only evaluate initiating findings with a prefix of 'O'
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medAlertLastResults">
            <summary>
            Don’t recalculate, just return alert results from last calculation.
            </summary>
        </member>
        <member name="F:Medicomp.MedAlertFlags.medIgnoreLookback">
            <summary>
            For this check, ignore any lookback period set by the SetAlertLookBackPeriod API call.
            </summary>
        </member>
        <member name="T:Medicomp.ReferenceInfos">
            <summary>
            This enumerates the options used to retrieve reference information using GetReferenceInfo.
            </summary>
        </member>
        <member name="F:Medicomp.ReferenceInfos.medRefSourceAvail">
            <summary>
            Use to determine if reference information is available for the designated source. 
            Will return a string containing either '1' if the source information is available 
            or '0' if it is not.
            </summary>
        </member>
        <member name="F:Medicomp.ReferenceInfos.medRefDocInfo">
            <summary>
            Use to retrieve the doctor information for the given Id, which is the CPNUM assigned by GSM.
            </summary>
        </member>
        <member name="F:Medicomp.ReferenceInfos.medRefPatFormList">
            <summary>
            Use to retrieve a list of Ids and Forms available for the given Id. 
            A Tab character is used to delimit the Id and Form; a NewLine as used to delimit each 
            list record.
            </summary>
        </member>
        <member name="F:Medicomp.ReferenceInfos.medRefPatInfo">
            <summary>
            Use to retrieve the patient information for the given Id, which is one of the Ids returned in the 
            list retrieved using an API call with Options=medRefPatFormList.
            </summary>
        </member>
        <member name="F:Medicomp.ReferenceInfos.medRefComment">
            <summary>
            Use with Source=0 to retrieve the finding comment, where available.
            </summary>
        </member>
        <member name="T:Medicomp.CodeLinks">
            <summary>
            This enumerates the available choices for Medcin codes.
            </summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeNone">
            <summary>No code</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCCC">
            <summary>Clinical Care Classification System for Nurses</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeMedispan">
            <summary>Medispan</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeSNOMED">
            <summary>SNOMED</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeLabCorp">
            <summary>LabCorp</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICD10">
            <summary>ICD-10</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICD">
            <summary>ICD-9</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICD2">
            <summary>Secondary ICD-9</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDOM">
            <summary>ICD field for oncology - morphology</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDOT">
            <summary>ICD field for oncology - topography</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDH">
            <summary>ICD-9 code used if prefix is HIST </summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDF">
            <summary>ICD-9 code used if prefix is FAM-HIST</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDNEC">
            <summary>ICD-9 not elsewhere classified</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDCAT">
            <summary>ICD-9 category</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDALT">
            <summary>ICD-9 alternate - used for duplicates</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDOSpec">
            <summary>ICD-9 other specified</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDOther">
            <summary>ICD-9 other</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDProc">
            <summary>ICD-9 volume 3 procedures</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeACC">
            <summary>American Cardiology Code</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCPT">
            <summary>CPT code</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCPTMod">
            <summary>CPT code modifier</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCPTAMod">
            <summary>CPT code ASTM modifier</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeHCPC">
            <summary>Health Care Procedure Code</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeDSM">
            <summary>Diagnostic and Statistical Manual of Mental Disorders</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCAS">
            <summary>Chemical Abstract Society</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeLOINC">
            <summary>Logical Observation Identifier Names and Codes</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCDT">
            <summary>Dental Billing Code</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeICDMan">
            <summary>ICD Manifestation Code</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeFDB">
            <summary>First Data Bank</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeMultum">
            <summary>Multum</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeQuest">
            <summary>Quest Diagnostics</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeRxNorm">
            <summary>RxNorm Ingredient - deprecated enum; use medCodeRxNIn</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCVX">
            <summary>CDC/HL7 Vaccines Administered</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeUNII">
            <summary>Unique Ingredient Identifier</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeCVXH">
            <summary>CDC/HL7 Vaccines Administered History</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeFirstConsult">
            <summary>First Consult TopicID</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeNANDA">
            <summary>NANDA Intl Nursing Diagnoses</summary>
        </member>
        <member name="F:Medicomp.CodeLinks.medCodeDODUC">
            <summary>DOD Unique Code</summary>
        </member>
        <member name="T:Medicomp.CodeMapFlags">
            <summary>
            This enumerates the CodeLink flags used in mapping external codes to Medcin concepts.
            </summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Unreportable">
            <summary>Mapping is not reportable for billing.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Category">
            <summary>Mapping is a category code.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Manifest">
            <summary>Mapping represents a manifestation code.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.NEC">
            <summary>Mapping represents a not elsewhere classified code.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Other">
            <summary>Mapping represents an other code.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.OtherSpecified">
            <summary>Mapping represents an other specified code.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Unspecified">
            <summary>Mapping represents an unspecified code.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Chronic">
            <summary>Mapping represents a chronic condition.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Hints">
            <summary>Mapping has a hint; replicates the more field.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Parms">
            <summary>Mapping has a specifier; replicates the more field.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Specs">
            <summary>Mapping has parameters; replicates the more field.</summary>
        </member>
        <member name="F:Medicomp.CodeMapFlags.Virtual">
            <summary>Mapping is a virtual code.</summary>
        </member>
        <member name="T:Medicomp.DataFilterMode">
            <summary>
            Bit assignments for HistDataFilter parameters
            </summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmNone">
            <summary>No parameters contain a data value.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmMask">
            <summary>Mask parameter contains a data value.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmDateFm">
            <summary>DateFm parameter contains a data value.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmDateTo">
            <summary>DateTo parameter contains a data value.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmTimeFm">
            <summary>TimeFm parameter contains a data value.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmTimeTo">
            <summary>TimeTo parameter contains a data value.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmFreeText">
            <summary>Use the values of the free text flags.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmResults">
            <summary>Use the values of the results flags.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmAddGroupFreeText">
            <summary>Include Narrative group free text findings.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmAddMappedFreeText">
            <summary>Include Mapped free text findings (test result, test order, medication order).</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmAddOrderResults">
            <summary>Include results related by orderid if order present.</summary>
        </member>
        <member name="F:Medicomp.DataFilterMode.medDfmAddResultSet">
            <summary>Include all findings matching the orderid of any finding with an orderid.</summary>
        </member>
        <member name="T:Medicomp.AflagsBits">
            <summary>
            Bit assignments for AFlags
            </summary>
        </member>
        <member name="F:Medicomp.AflagsBits.None">
            <summary>No flag bits are set.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Location">
            <summary>Finding has location for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Quality">
            <summary>Finding has quality for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Severity">
            <summary>Finding has severity for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Duration">
            <summary>Finding has duration for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Timing">
            <summary>Finding has timing for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Context">
            <summary>Finding has context for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Unilateral">
            <summary>Finding has singular laterality.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.ModifyingFactor">
            <summary>Finding has modifying factors for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.AssociatedSignsAndSymptoms">
            <summary>Finding contributes to associated signs and symptoms for E/M.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.LeftLaterality">
            <summary>Finding has left laterality.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.RightLaterality">
            <summary>Finding has right laterality.</summary>
        </member>
        <member name="F:Medicomp.AflagsBits.Bilateral">
            <summary>Finding is bilateral.</summary>
        </member>
        <member name="T:Medicomp.EFlagBits">
            <summary>
            This enumerates the bits of the EFlag value.
            </summary>
        </member>
        <member name="F:Medicomp.EFlagBits.None">
            <summary>No flag bits are set.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasDxByAge">
            <summary>Has Dx probability by age.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasRangeByAgeGender">
            <summary>Has point values based on age.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasMultipleUnits">
            <summary>Has additional units.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasDxByDemographics">
            <summary>Has IP probability based on sex, race, religion, ethnicity.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasAlertData">
            <summary>Has alert data.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasSentence">
            <summary>Finding has sentence strings.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasIndex">
            <summary>Finding has index logic.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasRxDose">
            <summary>Has dosage data.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasCPTCode">
            <summary>Has a COT code.</summary>
        </member>
        <member name="F:Medicomp.EFlagBits.HasChildren">
            <summary>Finding has details.</summary>
        </member>
        <member name="T:Medicomp.FlagBits">
            <summary>
            This enumerates the bits of the Flag value.
            </summary>
        </member>
        <member name="F:Medicomp.FlagBits.None">
            <summary>No flag bits are set.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.Retired">
            <summary>Finding is retired. It should no longer be allowed to be enntered into a chart.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.Chronic">
            <summary>Finding is considered chronic. This will apply to E/M.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.LateralityHead">
            <summary>Finding is a laterality header.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.DoNotOrder">
            <summary>Finding is not to be orderable.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.ValueText">
            <summary>Value field is typically entered as text.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.HLReversed">
            <summary>When calculating the scale, the H, L, and N results are reversed.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.Profile">
            <summary>A test has a profile or panel of results.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.InverseNormal">
            <summary>Reverse the sense of the 'N', 'A', and ' ' result qualifiers.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.DoNotTable">
            <summary>Finding should not be displayed in a tabular form.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.NotReal">
            <summary>Finding should not be entered in a patient’s chart.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.HasRange">
            <summary>Finding can have a range and scale calculated from its value.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.Once">
            <summary>Findings should processed for a Dx during IP only once.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.SpecDx">
            <summary>Test for specific disease.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.FemaleOnly">
            <summary>Finding is only pertinent to females.</summary>
        </member>
        <member name="F:Medicomp.FlagBits.MaleOnly">
            <summary>Finding is only pertinent to males.</summary>
        </member>
        <member name="T:Medicomp.GPFlagBits">
            <summary>
            Bit assignments for General Purpose Flags
            </summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.None">
            <summary>No flag bits are set.</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.Orderable">
            <summary>Finding is considered orderable</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.Resultable">
            <summary>Finding is typically for posting a result</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.HasAlerts">
            <summary>Finding has alerts</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.Commmon">
            <summary>Finding is a common diagnosis</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.HasComment">
            <summary>Finding has a comment text associated with it</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.LimitIP">
            <summary>Used internally to inhibit building out of Intelligent Prompt</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.NurseRole">
            <summary>Finding is under nurse role licensing</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.PromptStop">
            <summary>Stop looking for prompt data from parent concept</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.NurseSIG1">
            <summary>Used in conjunction with SIG2 to provide a defualt SIG: 256=routine, 512=PRN, 768=QSHIFT</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.NurseSIG2">
            <summary>Used in conjunction with SIG2 to provide a defualt SIG: 256=routine, 512=PRN, 768=QSHIFT</summary>
        </member>
        <member name="F:Medicomp.GPFlagBits.MeaningfulUse">
            <summary>Finding participates in one or more meaningful use measures</summary>
        </member>
        <member name="T:Medicomp.QFlagsBits">
            <summary>
            Bit assignments for QFlags
            </summary>
            <remarks>Qflags indicate the modifier qualifier lists appropriate for a finding.
            when more than one flag bit is set, merge the relarted lists.</remarks>
        </member>
        <member name="F:Medicomp.QFlagsBits.None">
            <summary>No flag bits are set.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Severity">
            <summary>SMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Amount">
            <summary>AMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Onset">
            <summary>OSMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Urgency">
            <summary>UMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Quality">
            <summary>QMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Degree">
            <summary>DMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="F:Medicomp.QFlagsBits.Pattern">
            <summary>PMODIFIER qualifier list is appropriate.</summary>
        </member>
        <member name="T:Medicomp.GridLayoutMode">
            <summary>
            Bit assignments for HistGridLayout parameters
            </summary>
        </member>
        <member name="F:Medicomp.GridLayoutMode.medGlmNone">
            <summary>No parameters contain a data value</summary>
        </member>
        <member name="F:Medicomp.GridLayoutMode.medGlmPrecision">
            <summary>Precision parameter contains a data value</summary>
        </member>
        <member name="F:Medicomp.GridLayoutMode.medGlmDateOrder">
            <summary>DateOrder parameter contains a data value</summary>
        </member>
        <member name="F:Medicomp.GridLayoutMode.medGlmTime">
            <summary>EncounterTime parameter contains a data value</summary>
        </member>
        <member name="F:Medicomp.GridLayoutMode.medGlmHeaderPrecision">
            <summary>HeaderPrecisionUsesColumnPrecision is passed.</summary>
        </member>
        <member name="F:Medicomp.GridLayoutMode.medGlmHeaderPrecisionUsesColumnPrecision">
            <summary>When this bit is reset, the column header dates will
            use a fixed format of Day Precision. If this bit is set, then the column
            header dates will be formatted according to the current column precision.</summary>
        </member>
        <member name="T:Medicomp.CaptionModes">
            <summary>
            Bit assignments for GetCaption Mode parameter
            </summary>
        </member>
        <member name="F:Medicomp.CaptionModes.CaptionModeGroup">
            <summary>Mode to request a narrative group caption.</summary>
        </member>
        <member name="F:Medicomp.CaptionModes.CaptionModeSubgroup">
            <summary>Mode to request a narrative subgroup caption.</summary>
        </member>
        <member name="F:Medicomp.CaptionModes.CaptionModeSection">
            <summary>Mode to request a narrative section caption.</summary>
        </member>
        <member name="F:Medicomp.CaptionModes.CaptionModeFinding">
            <summary>Mode to request a finding caption.</summary>
        </member>
        <member name="F:Medicomp.CaptionModes.CaptionModeAddID">
            <summary>Append the ID to the caption delimited with a tilde.</summary>
        </member>
        <member name="T:Medicomp.SortOrder">
            <summary>
            Enumeration for ordering grid columns by encounter date
            </summary>
        </member>
        <member name="F:Medicomp.SortOrder.SortAscending">
            <summary>Sequence from earliest date to latest date</summary>
        </member>
        <member name="F:Medicomp.SortOrder.SortDescending">
            <summary>Sequence from latest date to earliest date</summary>
        </member>
        <member name="T:Medicomp.Connection">
            <summary>
            This class provides the API of the Medcin server.
            </summary>
        </member>
        <member name="T:Medicomp.IConnection">
            <summary>
            This class provides the API of the Medcin server.
            </summary>
        </member>
        <member name="M:Medicomp.IConnection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This method is used to obtain an intelligent prompt list.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="listsize">This argument provides for three different list sizes. 
            Shortlist=1, Longlist=2, Fulllist=3</param>
            <param name="loadtype">The termtype argument restricts the returned list to the related termtypes</param>
            <returns>The list of relevant terms as an ArrayList of ResponseItem data structures.</returns>
            <remarks>The goal of this method is to calculate and then present the most 
            applicable list of terms possible to a provider for entry at the point of care.  
            The results of the calculation are returned as a list of MEDCIN terms.  
            The list can be retrieved in three sizes each varying in amount of detail, 
            and each list can be subdivided into the six term types.
            <para>A short list is restricted to records in the diagnostic table that have the 
            iprompt field set to 2. A long list starts with records in the diagnostic table 
            with the iprompt field set to 1 or 2, and then 	children are removed if parental 
            findings are not in the chart data. A full list is all records that have a 1 or 2.  
            A short list is the briefest. A long list contains more parents but children are 
            removed if respective parents are not in the chart. A full list is all of the IP findings.</para>
            <para>The ArrayList contains an item for every medcinid (with prefix) that should be added 
            to the presentation list for entry. The arguments should be all the fields that are 
            required to build a tree view for presentation. The CalculatedDx field is set to True 
            if the medcinid refers to a computed diagnosis from which the intelligent prompting 
            lists are derived from. The Description field is the description of the medcinid. 
            The Subs field indicates that the medcinid has children. Note that the data passed 
            in the fields of the ResponseItems may vary based on BuildListMode. Note that
            the same finding may appear more than once in this list where different prefixes 
            for duplicate medcinids are specified.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This function returns a prompt list that is based on the findings added using the AddDx method.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">This argument provides for three different list sizes. Shortlist=1, Longlist=2, 
            Fulllist=3.</param>
            <param name="termtype">The termtype parameter restricts the returned list to the designated terminology type</param>
            <returns>The prompt list is returned as an ArrayList of ResponseItem data structures</returns>
            <remarks><u>Implementing diagnoses based prompting</u>
            <para>In this method of prompting the user selects a list of diagnoses, problems or syndromes 
            from which to retrieve a list of related findings for entry. This method is implemented 
            similarly to Intelligent prompting. The list is entered by repeated calls to AddDx. The
            resulting prompt list is retrieved by calling ActivateDx.</para>
            <para>This algorithm needs to be passed the patient's age and gender to make the resulting 
            prompting lists more appropriate to a patient. This is done by using the same function used 
            for intelligent prompting, SetPatient(). This algorithm will use the age and gender 
            arguments last passed to this function.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.ActivateEM(System.Int32,System.String,System.Int32)">
            <summary>
            This method produces lists based on the last call to CalculateEM that show items from the encounter 
            that are relevant to calculating one of the requested 12 components.
            </summary>
            <seealso cref="M:Medicomp.Connection.CalculateEM(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.ActivateEMprompt(Medicomp.ListSizes,System.Int32,System.String,System.String,System.Int32)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="icode">The HCFA component number (1-12) for which supporting encounter data is desired. 
            The components are enumerated as follows:
            <list type="table"><listheader><term>Code</term><description>Data Content</description></listheader>
            	<item><term>1 - HPI</term><description>Produces a list of findings (itemids) and the item's 
            	attribute count for all findings in the encounter that are a part of the HPI component.</description></item>
            	<item><term>2 - ROS</term><description>Produces a list of findings (itemids) and the HCFA 
            	body system code for all findings in the encounter that are a part of the ROS component.</description></item>
            	<item><term>3 - PFSH</term><description>Produces a list of findings (itemids) and the HCFA 
            	category of Prior medical, Family history, or Social history, for all findings in the 
            	encounter that are a part of the PFSH component.</description></item>
            	<item><term>4 - Overall History</term><description>Is not applicable.</description></item>
            	<item><term>5 - EXAM</term><description>Produces a list of the last computed exam's body 
            	systems, or a list of bullets for the requested body system, or a list of findings in the 
            	encounter for the requested bullet. Uses sParam and wParam to differentiate.</description></item>
            	<item><term>6 - Overall MDM</term><description>Is not applicable.</description></item>
            	<item><term>7 - Dx/Mgt Options</term><description>Produces a list of findings (itemids) 
            	and each item's complexity for all findings in the encounter that are a part of the 
            	Dx/Mgt Options component.</description></item>
            	<item><term>8 - Complexity of Data </term><description>Produces a list of findings (itemids) 
            	for all findings in the encounter that are a part of the Complexity of Data component.</description></item>
            	<item><term>9 - Overall Risk </term><description>Is not applicable.</description></item>
            	<item><term>10 - Presenting Problem</term><description>Produces a list of findings 
            	(itemids) and each item’s risk for all findings in the encounter that are a part of the 
            	Presenting Problem component.</description></item>
            	<item><term>11 - Diagnostic Procedures Ordered</term><description>Produces a list of 
            	findings (itemids) and each item’s risk for all findings in the encounter that are a 
            	part of the Diagnostic Procedures Ordered component.</description></item>
            	<item><term>12 - Management Options Selected</term><description>Produces a list of 
            	findings (itemids) and each item’s complexity for all findings in the encounter that are 
            	a part of the Management Options Selected component.</description></item>
            </list></param>
            <param name="sparm">Used to specify a particular body system for the Exam component.</param>
            <param name="wparm">Used to specify a particular Bullet for a body system for the Exam component.</param>
            <returns>The specified data is returned as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ActivateEMprompt(Medicomp.ListSizes,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This function produces prompt lists for each of the 11 E and M physical exams as well as the ROS, 
            HPI, and PFSH components. A list can be created for the whole exam, a single body system for 
            an exam, or a single bullet for a body system.
            </summary>
            <seealso cref="M:Medicomp.Connection.CalculateEM(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="listsize">size of prompt list: 1 = show base medcinids for request, 
            2 = show base medcinids and additional children where diagnostically relevant.</param>
            <param name="icode">The HCFA component number (1-5) for which prompting data is desired. </param>
            <param name="examtype">One of the codes in the set of records from the qualifier table having the 
            codename 'EXAMTYP'. This parameter is used only when icode = 5.</param>
            <param name="sparm">Used to specify a particular body system for the Exam component.</param>
            <param name="wparm">Used to specify a particular Bullet for a body system for the Exam component.</param>
            <returns>Returns an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ActivateExpansion(System.Int32)">
            <summary>
            This method is invoked to retrieve the children findings for the passed medcinid.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The list of children findings is returned as an ArrayList of ResponseItem data structures.</returns>
            <remarks>This method of prompting is used to drill down one level from a parent nodekey and return 
            all appropriate MEDCIN terms. Only the children of the passed medcinid will be returned, not 
            grand-children or their siblings. This method is typically used to load a branch for a treeview 
            control. The subs field of the ResponseItem indicates that the finding has children and that 
            expansion of that finding can occur.
            <para>The ResponseItem description field usually contains the description field from the search 
            table in search.mdb. When invoked on behalf of the ActivateExpansion method, the description 
            argument contains the description field from the nomenclature table in nomenclature.mdb.  
            The description field from the search table is the shortest standalone description available 
            for all MEDCIN terms. The description field from the nomenclature table is the shortest 
            description field available, but it cannot stand alone, it depends upon its parent to complete 
            the context. This is the default presentation for a treeview, where the parent has a full concept 
            description and its children have only a terse description to avoid overly wordy displays.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.ActivateExpansionEx(System.Int32,System.Int16,Medicomp.ListSizes)">
            <summary>
            This method is invoked to retrieve the children findings with specified attributes for the 
            passed medcinid.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <seealso cref="M:Medicomp.Connection.Aflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="amask">A bit mask of requested attributes. Returned findings will have at least 
            one requested bit set in their Aflag field.</param>
            <param name="listsize">A value indicating the size of the list to return. This value 
            is interpreted as follows: 1 Includes only immediate children. If no immediate children exist 
            then it will include grandchildren. 2 Includes children and grandchildren of Medcinid. 
            3 Includes all children through level 9.</param>
            <returns>The resulting list is returned as an ArrayList of ResponseItem data structures.</returns>
            <remarks>This method of prompting is used to drill down from a parent nodekey and return all 
            appropriate MEDCIN terms. Only the children of the passed medcinid that embody the requested 
            attributes will be returned. This method is typically used to load a branch for a treeview 
            control. The ResponseItem subs field indicates that the finding has children that embody the 
            requested attributes and that expansion can occur.
            <para>The demo program demonstrates a possible implementation of this method. It uses a bar with 
            icons for each attribute showing green if the selected finding has children or grandchildren 
            that embody the attribute. The Caflag property for the selected Medcinid is used to determine 
            which attributes exist in its children and grandchildren. When the user selects one of the 
            green attribute icons, ActivateExpansionEx() is invoked to generate a list of findings that 
            embody the requested attribute for prompting.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.ActivateExpansionEx(System.Int32,System.Int16,System.Int16)">
            <summary>
            Overloaded method provided to correct the listsize parameter to a short rather than the enum
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="amask">A bit mask of requested attributes.</param>
            <param name="listsize">A value indicating the size of the list to return.</param>
            <returns></returns>
        </member>
        <member name="M:Medicomp.IConnection.ActivateWordSearch(Medicomp.MedTermtypes)">
            <summary>
            This method obtains the response list associated with the prior WordSearch method call.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.WordSearch(System.String)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <seealso cref="T:Medicomp.MedTermtypes"/>
            <param name="termtype">One of the MedTermtypes enumeration.</param>
            <returns>The list of findings is returned as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddChapter(System.Int32,System.Int16)">
            <summary>
            Method is used to add/edit/remove a chapter number for a finding
            </summary>
            <param name="Itemid">This number should be one of the values 
            previously returned by AddNarrate</param>
            <param name="Chapter">The zero-based chapter number to assign.</param>
            <returns>False is returned if an error is detected.</returns>
            <remarks>
            This method allows the chapter property of the designated finding to be set 
            independently of the current chapter setting. You can divide a single 
            encounter into various chapters by assigning chapter numbers. The chapter 
            number is the primary field for ordering the encounter chart records.
            <para>The chapter number is an integer value; the first chapter is numbered 0. 
            Unless chapters are assigned, all findings added to the encounter are assigned 
            to chapter 0. Thus, your application does not have to use chapters. 
            The chapter number number is assigned automatically when a finding is newly 
            added to the encounter via AddNarrate or AddNarrateEx. The chapter number 
            applied is established by the application using the SetChapter API. You can 
            change the chapter value for a designated finding by using this AddChapter API. 
            See SetChapter for more details.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            The addchart method passes patient chart information to the MEDCIN server.  
            These findings are used for the IP calculation.
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            </summary>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">minutes since birth</param>
            <param name="duration">in minutes</param>
            <param name="prefix">the prefix qualifier code</param>
            <param name="result">the result qualifier code</param>
            <param name="scale">The scale field is usually calculated using the function CalcScale.</param>
            <returns>returns True if successful, False otherwise</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)">
            <summary>
            This method is used to establish a numbered style that can be referenced to decorate the 
            finding text of a specific finding in the narrative presentation.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetDecorationStyle(System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="DecorationStyle">A non-zero number desigating the style.</param>
            <param name="Font">One of the <see cref="T:Medicomp.RTFfonts">RTFfonts</see> enumeration.</param>
            <param name="Color">One of the <see cref="T:Medicomp.RTFcolors">RTFcolors</see> enumeration.</param>
            <param name="Size">The font size is designated in half-points (i.e. 20, 24, 28, 36, etc.); use 
            of half-points is specified in the Microsoft Rich Text Format Specification.</param>
            <param name="Attributes">Any combination of the <see cref="T:Medicomp.RTFattributes">RTFattributes</see> enumeration
            incorporating plain, <b>bold</b>, <i>italic</i>, <u>underline</u>, or <strike>strikethrough</strike>.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddDemographics(System.String,System.String)">
            <summary>
            This method is used to provide demographic information for the narrative. The preferred method 
            to pass this information is the SetPatient() API as that provides the API to pass all 
            demographic information that the Medcin server uses in a single call.
            <seealso cref="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="patientname">The name of the patient formatted for presentation. For example, 
            'John Doe', 'Mrs. Smith', 'Mr. George Jetson', and 'Ms. Penelope Flowers' are all possible 
            name strings.</param>
            <param name="birthdate">The birth date of the patient. The format is 'YYYYMMDDHHIISS' where 'YYYY' 
            is the year, 'MM' is the month, 'DD' is the day, 'HH' is the hour, 'II' is the minute, 
            and 'SS' is the second. Use as much precision as the birth date is recorded (usually 'YYYYMMDD'). 
            For example, '18980507' designates May 7, 1898. If you use the hours precision, hours should 
            be in 24-hour time.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddDocName(System.Int32,System.String)">
            <summary>
            Transcribe provides functionality to create a list of doctor names referenced by a doctor 
            identification number, docid. If the rdoc argument passed to the Transcribe function is 
            non-zero, it must be one of the docid entries established in this list of doctor names. 
            The docid passed in AddEncounter is also used to associate the encounter provider by name 
            reference within the narrative. Your list must be created prior to calling Transcribe. 
            Create this list with repeated calls to AddDocName.
            </summary>
            <param name="docid">The identification numer of the provider, or 0 to pass a tab-delimited list 
            of docid^Tname pairs in the name parameter.</param>
            <param name="name">The name of the provider as you want it to appear in the narration.
            This can also contain a tab-delimited list of docids and docnames.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>If AddDocName is called with a docid which is already in the list, if the name passed 
            is identical to what is already stored in the list for that docid, the call will be ignored; 
            otherwise, the current name will replace the name previously stored in the list.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddDx(System.Int32)">
            <summary>
            This is used to pass the medcinids for the diagnoses, problems, or syndromes from which to 
            create prompting lists. If multiple medcinids are passed the resulting lists will not 
            have duplicates, and will be sorted in nodekey order.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddDxPrompt(System.Int32,System.Int32,System.String,Medicomp.ListSizes,System.Int16)">
            <summary>
            The Intelligent Prompting and Diagnosis Prompting functionality use lists of findings specific to 
            each diagnosis for creating lists for presentation to the user for entry. This method provides a 
            functionality for an application program to supplement the prompting lists based on input from 
            end users.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <param name="dx">Dx is the medcinid of the diagnosis for which the prompting list is assigned. 
            There is no inherent reason why Dx has to be a diagnosis, thus this list creation method and 
            the list retrieval method ActivateDx() may be applied to support home grown functionality. 
            For example, this technique could support maintaining prompting lists for tests that require 
            prerequisites to be input whenever the test is ordered. See Note: below.</param>
            <param name="medcinid">Medcinid is a finding that is added to the Dx's list. Medcinid could also 
            be the id of a user-defined finding. This allows users to add their own unique findings to the 
            prompting lists. If medcinid is zero, all user-defined items for the dx are dropped.</param>
            <param name="prefix">Prefix is the prefix code for the medcinid. Prefix codes are listed in the 
            documentation section entitled qualifier in chart.mdb. Example prefixes are 'H' History, 'F' 
            Family History, 'O' Order, and ' ' blank.</param>
            <param name="listsize">Listsize provides for retrieval of the prompt list in three different sizes 
            using the Activate() and ActivateDx() methods. The value of the listsize argument in these two 
            methods is: 1 = ShortList 2; = LongList; 3 = FullList. The values of listsize argument in this 
            AddUserPrompt() method are:<list type="table">
            <listheader><term>List Size</term><description>Size Function</description></listheader>
            <item><term>0</term><description>Drop item from list</description></item>
            <item><term>1</term><description>Add to Shortlist</description></item>
            <item><term>2</term><description>Eligible for LongList, Always in Fulllist</description></item>
            </list></param>
            <param name="childrendx">If the childrendx argument is non-zero, the medcinid will also be added to the lists of all children of the dx.  With this capability, findings for prompting lists can quickly be spread throughout the MEDCIN hierarchy. </param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The shortlist is the briefest, containing only the most important findings for a diagnosis. 
            A longlist contains shortlist and longlist items but some longlist items may be removed if 
            their respective parents are not in the chart. A fulllist is all of the prompt findings. 
            The '0 =  Drop' value will suppress an item in the list if the item is not a user defined item, 
            user defined items are removed from the list.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddEMData(System.Int32,System.String,System.String)">
            <summary>
            This method is used to add additional data for the purposes of E and M calculation.
            </summary>
            <param name="Mode">Currently undefined.</param>
            <param name="EncounterItems">Contains a semi-colon delimited list of existing encounter item additions.</param>
            <param name="ExtraItems">Currently undefined.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>Each encounter item addition has the following syntax:
            <para>itemid,C=Y|N,A=Y|N,P=N|E,W=Y|N,R=1-4,S=?</para>
            <para>with each comma-delimited code item according to the following table:</para>
            <para>
            <list type="table">
            <listheader><term>Code</term><description>Designated Use</description></listheader>
            <item><term>itemid</term><description>is the unique itemid used when adding the finding to the server’s encounter data, and is required.</description></item>
            <item><term>C=Y|N</term><description>Specifies if the problem is chronic (C=Y) or not (C=N). C=N is the default.</description></item>
            <item><term>A=Y|N</term><description>Specifies if the problem is active (A=Y) or not (A=N). A=N is the default.</description></item>
            <item><term>P=N|E</term><description>Specifies if the problem is new to the provider (P=N), or if the problem is existing to the provider (P=E). P=E is the default.</description></item>
            <item><term>W=Y|N</term><description>Specifies if additional workup is planned (W=Y) or if no additional workup is planned (W=N). W=N is the default.</description></item>
            <item><term>R=1-4</term><description>Specifies the application provided risk level, where applicable.</description></item>
            <item><term>S=c</term><description>Specifies a status code for the finding specifically for E and M calculations. The code passed will not be used for narration.</description></item>
            <item><term>T=cpt1:cpt2:cpt3:...cptn</term><description>Specifies one or more CPT codes that will be used solely to be stroked towards lab, radiologic, or medical test.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddEncounter(System.String,System.Int32)">
            <summary>
            This function is used to establish a physician reference for an encounter. The name string used 
            in the narrative will be associated to the docid using the list maintained by AddDocName.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearNarrative"/>
            <param name="encountertime">The encounter time to reference the encounter. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter 
            time is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. For example, '199805071610' 
            designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="docid">The docid of the provider responsible for the encounter. The AddDocname 
            method is used to associate a name with the docid.</param>
            <returns>The encounter identifier assigned by the Medcin server is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddEpisode(System.Int32,System.String)">
            <summary>
            This function is used to add episodic data to a finding previously added to the finding collection.
            <para>The episode data string will be presented prior to the onset string. In a statement of the 
            form, 'John Doe reported coughing up sputum every 2-3 hours lasting 5 minutes May 1998 for 
            2 months', 'every 2-3 hours lasting 5 minutes' is the episode, 'May 1998' is the onset, 
            and '2 months' is the duration. The phrase 'for' is introduced by the narrative generator. 
            The phrase, 'every 2-3 hours lasting 5 minutes' is the episode passed in AddEpisode.</para>
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate; 
            it is used to identify the encounter finding to asociate the epiode.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode 
            string as documented below.</param>
            <returns>If the data is successfully added, AddEpisode returns 1; otherwise it returns 0.</returns>
            <remarks>Encoded Episode Format
            <para>The episode can be passed as an encoded string that contains a packed version of the 
            episode fields; the format is 'expression|FreqFm|FreqTo|DurFm|DurTo'. The episode can be 
            expressed in either a frequency (# per unit of time) or as an interval (every # units of time). 
            This choice is made in the expression field: 'F' for frequency or 'I' for interval. Each 
            additional field is formatted as a series of digits followed by a time unit character 
            ('N' minute, 'H' hour, 'D' day, 'W' week, 'M' month, 'Y' year). The period is determined from 
            the FreqFm and FreqTo fields. The duration of the episode is determined from the DurFm and 
            DurTo fields. The string is converted to presentation format for narration.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddItemTag(System.Int32,System.Int32,System.String)">
            <summary>
            This function is used to add a client tag to a finding previously added to the finding collection.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate;
            it is used to identify the encounter finding associated with the item tag.</param>
            <param name="lTag">The tag number to be added to the finding.</param>
            <param name="sTag">The tag text to be added to the finding identified by the itemid. 
            The text can be of any length.</param>
            <returns>If the tag is successfully added, AddItemtag returns 1; otherwise it returns 0. </returns>
            <remarks>Note that you can add either or both tag units. When the tag(s) is(are) added to the 
            generated text, the lTag will be presented before the sTag. An itemtag lTag field is 
            recommended when using narrative output generated in HTML, as the itemtag lTag field can be 
            used for the HREF link (the sTag field can also be used for the link; however, it can be 
            better used for showing additional data).
            <para>The sTag field can be composed of multiple fields, each field delimited by a distinct 
            character that appears as the first character of the string. The string can be emitted 
            appearing before the finding text or following the finding text by means of the ShowItemTag 
            method.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all 
            tags can be emitted under program control by using the NarrateGroups API with a tag specifier 
            along with the ShowItemTag method. An example of an itemtag string with multiple fields 
            would be: '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold 
            data on the provider originally entering data and the provider editing data. The fields could 
            be selectively narrated by using the NarrateGroups API.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            This method is used to add a finding to the narrative finding collection.  
            <para>If itemid is passed as a negative number, then AddNarrate will assign the absolute value 
            of that number as the itemid; in this way, you can control the reference numbers assigned to 
            each finding to be a unique set. <b>Make sure that if you assign itemid numbers in this fashion, 
            each must be uniquely assigned.</b></para>
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="itemid">This number is passed to the function in order to modify any of the subsequent 
            parameter values once a finding has been added to the finding collection. If itemid is 0 or 
            negative, then the finding addition is considered to be new to the collection. To change any 
            value of a finding once added, you edit it by passing the itemid previously returned by 
            AddNarrate when adding the finding.</param>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, AddNarrate will return a 0.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <returns>If an error is encountered, a 0 will be returned. 
            Otherwise, the positive assisned itemid will be returned.</returns>
            <remarks>Also review the AddNarrate2 API. When AddNarrate is called with an itemid of 0, it returns 
            a unique number reference for the finding being added to the narrative finding collection (the number 
            to be used as itemid reference in subsequent modifications of the finding in the collection).</remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)">
            <summary>
            This function is used to add a finding to the narrative finding collection with the application 
            assigning the itemid that is used as the finding's reference in subsequent modifications of 
            the finding in the collection.
            <para>If itemid is passed as a negative number, then AddNarrate2 will assume that you are adding 
            the finding and will use the absolute value of that number as the itemid. When itemid is passed 
            as a positive number, AddNarrate2 will assume that you are changing the data of an existing 
            finding in the collection. <b>Make sure that you assign unique numbers.</b> </para>
            </summary>
            <param name="itemid">This number is passed to the function in order to modify any of the subsequent 
            parameter values once a finding has been added to the finding collection. If itemid is 
            negative, then the finding addition is considered to be new to the collection. To change any 
            value of a finding once added, you edit it by passing the positive value of the itemid 
            previously passed when adding the finding.</param>
            <param name="medcinid">The unique Medcin identification for the finding.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, it will be ignored.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <param name="groupNumber">If you wish to assign the finding to a specific narrative group instead 
            of having the narrative engine determine the group using its internal algorithm, then pass the 
            group number you wish to assign. Otherwise, groupnumber should be 0. Note that once you make a 
            non-zero specification of groupnumber for a finding, the narrative engine will continue to use 
            that assigned group number until you restore dynamic group determination by passing a 0 value 
            (See the <see cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)">GroupNumber API</see>).</param>
            <param name="DecorationStyle">If you wish to provide decoration of the text phrase for this used 
            in the narrative presentation, pass one of the decoration style numbers your application set 
            up using the AddDecorationStyle API <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)"> See the 
            AddDecorationStyle API</see> for more details about text decoration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)">
            <summary>
            This method is used to add additional data to a finding previously added to the finding collection. 
            The method does not provide a server return code so it should operate faster through the socket 
            interface to the MEDCIN server. It is equivalent to calling AddEpisode, AddNote, AddRxstr, 
            AddValue, and AddItemtag APIs. 
            </summary>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode string 
            <see cref="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)">as documented in AddEpisode</see>.</param>
            <param name="note">The note text to be added to the finding identified by the itemid. The text is 
            limited to the maximum length of a string. See the <see cref="M:Medicomp.Connection.AddNote(System.Int32,System.String)">
            AddNote API concerning marking of substrings</see> as plain text, RTF, and HTML for selectable output.</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the itemid.</param>
            <param name="valuestr">The value formated for display presentation.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr.</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalLow(System.Int32,System.String)">RangeNormalLow</see> 
            method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalHigh(System.Int32,System.String)">RangeNormalHigh </see> 
            method request for the finding.</param>
            <param name="lTag">The tag number to be added to the finding.</param>
            <param name="sTag">The tag text to be added to the finding identified by the itemid. 
            The text can be of any length.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that you can add either or both tag units. When the tag(s) is(are) added to the 
            generated text, the lTag will be presented before the sTag. An itemtag lTag field is 
            recommended when using narrative output generated in HTML, as the itemtag lTag field can be 
            used for the HREF link (the sTag field can also be used for the link; however, it can be 
            better used for showing additional data).
            <para>The sTag field can be composed of multiple fields, each field delimited by a distinct 
            character that appears as the first character of the string. The string can be emitted 
            appearing before the finding text or following the finding text by means of the ShowItemTag 
            method.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all 
            tags can be emitted under program control by using the <see cref="M:Medicomp.Connection.NarrateGroups(System.String)">
            NarrateGroups API </see> with a tag specifier along with the ShowItemTag method.
            An example of an itemtag string with multiple fields would be: 
            '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold data 
            on the provider originally entering data and the provider editing data. The fields could be 
            selectively narrated by using the NarrateGroups API.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddNote(System.Int32,System.String)">
            <summary>
            This function is used to add a free text note to a finding previously 
            added to the finding collection.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="itemid">This number should be one of the values previously 
            returned by AddNarrate</param>
            <param name="note">The marked or unmarked note text to be added to the 
            finding identified by the itemid. The text is limited to the maximum 
            length of a string.</param>
            <returns>If the note is successfully added, AddNote returns true; otherwise it returns False</returns>
            <remarks>Marking is implemented according to the following:
            <list type="bullet">
            <item>SOT control code followed by ASCII '0' – plain text to follow the finding text</item>
            <item>SOT control code followed by ASCII '1' – RTF text to follow the finding text</item>
            <item>SOT control code followed by ASCII '2' – HTML text to follow the finding text</item>
            <item>SOT control code followed by ASCII '3' – XML text to follow the finding text</item>
            <item>SOT control code followed by ASCII '8' – plain text to precede the finding text</item>
            <item>SOT control code followed by ASCII '9' – RTF text to precede the finding text</item>
            <item>SOT control code followed by ASCII 'A' – HTML text to precede the finding text</item>
            <item>SOT control code followed by ASCII 'B' – XML text to precede the finding text</item></list>
            <para>SOT is the control code x'02' or chr$(2).</para>
            <para>Text with no marking, or marked as plain text, will be filtered 
            as noted below. Sub-strings will be interpreted as follows:</para>
            <list type="bullet">
            <item>No marker found – plain text</item>
            <item>Plain Text marker found – plain text until next marker or end of string.</item>
            <item>RTF marker found – RTF until next marker or end of string.</item>
            <item>HTML marker found – HTML text until next marker or end of string.</item></list>
            <para>The following indicates the handling of narration output:</para>
            <list type="bullet">
            <item>For a finding that has unmarked free text, filtering as noted below 
            will be applied.</item>
            <item>For a finding that has marked text, if a marked sub-string is present that 
            matches the current narrative output, it will be added to the finding's free 
            text presentation.</item>
            <item>For a finding that has marked text, if a marked sub-string is not present 
            that matches the current narrative output, the following procedure will 
            be used:
            <list type="bullet">
            <item>If marked plain text is present, emit the plain text filtered according to the criteria below</item>
            <item>Otherwise emit the only marked text present (in this case, only one sub-string was present).</item></list></item></list>
            <para>The server handler for AddNote() strips a terminating period from unmarked 
            note text in addition to the filtering noted below. For marked Plain Text, 
            only filtering is performed. Therefore if you do not want the handler to 
            remove a terminating period from plain text, prefix the plain text marker.</para>
            <para>Plain text notes will accept the tilde character ('~') as a logical new 
            line and will convert it, on outline or narrative format narrated output only, 
            to the appropriate line break for each of the narrative output options 
            (plain text, Rich text, or HTML). If you want to have a tilde in the note text 
            appear as a tilde, then provide two tildes.</para>
            <para>Notes attached to findings are considered free text and are presented 
            using the styling of the Free Text element (see the rtfStyle API). 
            If the narration output is HTML or RTF, the narration generator will 
            filter the text and perform character substitutions per the following 
            table so rendering engines will correctly present the output:</para>
            <list type="table">
            <listheader><term>Character</term><description>HTML output</description><description>RTF output</description></listheader>
            <item><term>back slash</term><description>No change</description><description>back slash back slash</description></item>
            <item><term>left brace</term><description>No change</description><description>back slash left brace</description></item>
            <item><term>right brace</term><description>No change</description><description>back slash right brace</description></item>
            <item><term>ampersand</term><description>ampersand amp</description><description>No change</description></item>
            <item><term>left angle bracket</term><description>ampersand lt</description><description>No change</description></item>
            <item><term>right angle bracket</term><description>ampersand gt</description><description>No change</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddRxstr(System.Int32,System.String)">
            <summary>
            This function is used to add a prescription string to a finding previously added to the finding collection. 
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the itemid</param>
            <returns>If the rxstr is successfully added, AddRxstr returns 1; otherwise it returns 0. </returns>
        </member>
        <member name="M:Medicomp.IConnection.AddSequence(System.Int32,System.Int16)">
            <summary>
            Used to add a sequence number for an assessment finding
            </summary>
            <param name="Itemid">Designates the finding in the encounter.</param>
            <param name="Sequence">The sequence number to apply.</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddSequenceEx(System.String)">
            <summary>
            Used to add a sequence number for a list of findings
            </summary>
            <param name="Sequences">The comma delimited list using Itemid1,Sequence1,Itemid2,Sequence2, etc.</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddSpecifier(System.Int32,System.String)">
            <summary>
            This method is used to add a specifier string to an encounter finding.
            </summary>
            <param name="Itemid">The identification number assigned to the finding by your application.</param>
            <param name="Specifier">The semicolon delimited list of codespec lists.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>A codespec list is a comma-delimited list of codes. The specifier property 
            can contain more than one list of codes, with each list delimited 
            using a semicolon. The specifier starts with a field indicating the codetype 
            of the code used to obtain the lists (ex: 23;A,B,D;AB,C,DA). The specifier is used in
            conjunction with a DSM-IV code to add additional uncoded textual content to 
            commonly used in a finding's narration. The lists would be in sequence with 
            a corresponding codespec record for the DSM-IV code in question.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddUserFinding(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method adds a user-finding or modifies any of the parameter fields of an existing medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <seealso cref="M:Medicomp.Connection.UserFindingCodes(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.UserFindingRange(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Medicomp.Connection.NextUdf"/>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">Userid is the permanent id assigned to the new user-finding. In this case, 
            the userid should be greater than one million. Userid may also be the id of an existing 
            medcinid that is being modified.</param>
            <param name="parent">Parent is the parent of the user-finding. The user-finding will inherit all of 
            the properties (from the property table) of the parent. The parent may be an already added 
            user-finding. If userid is a medcinid (less than one million) this field is ignored, otherwise 
            this field is required. When a user-finding is passed into intelligent prompting via the 
            AddChart() function, the parent chain of the user-finding is followed until a MEDCIN finding 
            is found. Then the user-finding inherits the properties of the MEDCIN finding. If the userid 
            argument specifies a user-finding (greater than one million) and the parent argument is 0, 
            then the user-finding is deleted. If the userid argument specifies a user-finding (greater 
            than one million) and the parent argument is -1, then the user-finding is given a retired 
            status. Findings that are retired will not appear in prompting lists but they will still be 
            available for narration.</param>
            <param name="search">Search functions as the description field in the search table. This field is 
            a concise sentence form that is displayed whenever findings are prompted for data entry.</param>
            <param name="nomen">Nomen functions as the description field in the nomenclature table. This 
            field is a terse form that is used for displaying findings in branches of a treeview.  This 
            results in display that is less wordy and easier to follow at a glance.</param>
            <param name="sentpos">Sentpos functions as the docpos field in the sentence table. Sentpos, sentneg, 
            phrasepos, and phraseneg all support the escape codes described in the escape codes section of 
            the syntax for phrase and sentence tables section.</param>
            <param name="sentneg">Sentneg functions as the docneg field in the sentence table.</param>
            <param name="phrasepos">Phrasepos functions as the docpos field in the phrase table.</param>
            <param name="phraseneg">Phraseneg functions as the docneg field in the phrase table.</param>
            <param name="extrasearchwords">Extrasearch is a list of words that are indexed by the search engine 
            to locate this term. In addition, all words in the above text fields are also indexed.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>User-defined findings (or user-findings) are medical findings that are added by the end 
            user to supplement the MEDCIN nomenclature. The application program needs supply an edit form 
            to maintain a table of user-defined findings. When medcinserv is started, the table should be 
            passed to medcinserv using appropriate methods. Medcinserv stores this information in memory so 
            it needs to be passed at every startup. The UserFinding methods can be invoked at any time to 
            support dynamic editing.<para>Medcinserv also supports a method to save the current user-findings 
            and user-prompts in memory to two disk files. The save functionalty is invoked with the 
            SaveUdf() method. This call writes the user-findings and user-prompts to the medcin.udf and 
            medcin.udp files respectively. These files are created in the same directory as the medcin data 
            files. If medcin.udf and/or medcin.udp exist in the same directory as the medcin data files, 
            medcinserv will automatically reload the user-findings/user-prompts into ram at startup.</para>
            <para>Medcinserv integrates the user-findings with the MEDCIN findings and provides seamless 
            support for all functionality (i.e. intelligent prompting, diagnosis prompting, vocabulary 
            search, narrative support, expand children, etc).</para>
            <para>While user-findings are convenient when the user wants to enter findings that are not in the 
            MEDCIN nomenclature, user-findings have the negative aspects of only being exportable in text 
            form to other systems. Also, users usually don't develop the clinical content of their findings 
            in parallel with existing MEDCIN findings.</para>
            <para>User-findings should have permanent medcinids greater than one million to not interfere with 
            medcinid assignments. Whenever a new version of MEDCIN is released, it is desirable to be able 
            to map user-findings to MEDCIN findings if the user-finding is duplicated in the new MEDCIN 
            release. This is because the new medcinids will be specifically integrated (as opposed to 
            integrated by inheritance) with the MEDCIN knowledge base and be exportable and usable to 
            other systems at large.</para><para>User-findings may be added into any of the six existing trees 
            that are the symptom, physical finding, history, test, diagnosis, and therapy trees.  The first 
            user-finding added has to have a MEDCIN finding in any of the six trees as a parent. 
            Subsequent user-findings may have an already added user-finding as a parent or any MEDCIN 
            finding as a parent. These rules enforce building a coherent tree. A user-finding's nodekey 
            determines its location in a tree. The nodekey is assigned dynamically by medcinserv in the 
            order that user-findings are added.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddValue(System.Int32,System.String,System.String,System.Double,System.Double)">
            <summary>
            This function is used to add value-associated data to a finding previously added to the finding collection. 
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/> 
            <param name="itemid">This number should be one of the values previously returned by Add</param>
            <param name="valuestr">The value formated for display presentation</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr.</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous RangeNormalLow method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous RangeNormalHigh method request for the finding.</param>
            <returns>If the data is successfully added, AddValue returns 1; otherwise it returns 0.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Aflags(System.Int32)">
            <summary>
            This obtains the finding's attribute flag property
            </summary>
            <seealso cref="M:Medicomp.Connection.Caflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The AFlags property is returned</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Location</description></item>
                <item><term>0x0002</term><description>Quality</description></item>
                <item><term>0x0004</term><description>Severity</description></item>
                <item><term>0x0008</term><description>Duration</description></item>
                <item><term>0x0010</term><description>Timing</description></item>
                <item><term>0x0020</term><description>Context</description></item>
                <item><term>0x0040</term><description>Unilateral</description></item>
                <item><term>0x0080</term><description>Modifying factors</description></item>
                <item><term>0x0100</term><description>Associated signs and symptoms</description></item>
                <item><term>0x0200</term><description>Left laterality</description></item>
                <item><term>0x0400</term><description>Right laterality</description></item>
                <item><term>0x0800</term><description>Bi-laterality</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.BaseGroup(System.Int32)">
            <summary>
            This is used to obtain the base narrative group for a finding.
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The narrative group default for the finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.BaseUserFinding">
            <summary>
            Use this method to obtain the base number for user defined findings.
            </summary>
            <returns>The base number is returned.</returns>
            <remarks>The base user finding number should be added to your numbers 1-n
            to arrive at the actual number to be used with the AddUserFinding method. 
            Note that if NextUdf returns a number higher than BaseUserFinding, it means that the server
            already has some UDFs registered.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.BrandList(System.Int32,System.Int32)">
            <summary>
            This method obtains a list of brands and manufacturers of the specified dose.
            </summary>
            <seealso cref="M:Medicomp.Connection.Dose(System.Int32,System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.DoseList(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="doseid">The unique doesid for the dosage in question.</param>
            <returns>Returns the list of brands in the following format:
            <c>Brandname1-Manufacturer1\nBrandname2-Manufacturer2….. BrandnameN-ManufacturerN\n\0</c></returns>
            <remarks>MEDCIN has findings that are prescription medications. These medicinids can be identified 
            by the property TermType(medcinid) = TYPE_RX (0x0007) and property Rxcode(medcinid)  = 'M' for 
            non-narcotic medications or 'N' for narcotic medications. The property Flag(medcinid) has the 
            0x0010 bit set when the finding which should be restricted from being ordered (i.e. a drug 
            removed from use but needs to be entered as history). The property Eflag(medcinid) has the 
            0x1000 bit set when the finding is a prescription drug that has dose and possibly brand 
            information.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.BuildListMode(Medicomp.BuildListModes)">
            <summary>
            This method is used to alter the data returned in lists.
            </summary>
            <seealso cref="T:Medicomp.BuildListModes"/>
            <seealso cref="M:Medicomp.Connection.GetBuildListMode"/>
            <param name="mode">The mode parameter affects data passed into the ResponseItem data 
            structure and returned in ArrayList lists.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Caflags(System.Int32)">
            <summary>
            This obtains the finding's children attribute flag property. It's bits are merged from 
            the AFlags property of its children and grandchildren.
            </summary>
            <seealso cref="M:Medicomp.Connection.Aflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The CAFlags property is returned</returns>
            <remarks>
            The flag contains 16 bits, which when set, indicates that the attributes identified in 
            aflags are embodied in findings which are either children or grandchildren of this finding.
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Location</description></item>
                <item><term>0x0002</term><description>Quality</description></item>
                <item><term>0x0004</term><description>Severity</description></item>
                <item><term>0x0008</term><description>Duration</description></item>
                <item><term>0x0010</term><description>Timing</description></item>
                <item><term>0x0020</term><description>Context</description></item>
                <item><term>0x0040</term><description>Unilateral</description></item>
                <item><term>0x0080</term><description>Modifying factors</description></item>
                <item><term>0x0100</term><description>Associated signs and symptoms</description></item>
                <item><term>0x0200</term><description>Left laterality</description></item>
                <item><term>0x0400</term><description>Right laterality</description></item>
                <item><term>0x0800</term><description>Bi-laterality</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.CalcScale(System.Int32,System.String,System.Double)">
            <summary>
            This method returns the scale value of zero to seven that is used as an argument 
            in the AddChart method of intelligent prompting.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="unit">The unit of measure of the testvalue parameter</param>
            <param name="testvalue">The testvalue for which the scale is requested</param>
            <returns>The calculated scale value 0-7 is returned.</returns>
            <remarks>The scale should be calculated for each finding as it is entered and saved as 
            part of the patient's chart. This field may also prove useful for other forms of 
            analysis because it calculates the result of a finding based on a scale of one to 
            seven where zero is not applicable, one to three is lowest to low, four is normal, 
            and five to seven is high to highest. If the scale is zero the user may specify the 
            result using the result field. If the scale is not zero the result field may be filled 
            in by the application program because the low, normal or high state is known.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Calculate">
            <summary>
            This method performs the IP calculation and creates lists of findings to use as 
            prompting for data entry. These lists are reserved until new chart information 
            is added via Addchart(). The list is retrieved by using the Activate() method.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.CalculateEM(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            This method is used to calculate an E and M code using the MEDCIN findings in the current encounter 
            and additional data captured as part of your user interface. The method of calculation is based 
            on the <i>Health Care Financing Administration (HCFA) 1997 Documentation Guidelines for Evaluation 
            and Management Services</i>; the document is available from 
            <see url="http://www.cms.hhs.gov/medlearn/emdoc.asp">HCFA's web site</see>. 
            </summary>
            <param name="setting">One of the codes in the set of records from the qualifier table having the 
            codename <c>SETTINGS</c>.</param>
            <param name="service">One of the codes in the set of records from the qualifier table having the 
            codename <c>SERVICE</c>. Note that only specific services are valid for a given setting. These 
            are easily determined as follows: Services valid for a setting include those where the first 
            character of the service code matches the setting code, or where the service code begins with 
            'A' or 'B'. It is recommended that a user interface validate a services presentation list when 
            the setting selection is performed. </param>
            <param name="patientstatus">Either <c>N</c> for a new patient, or <c>E</c> for an existing patient.</param>
            <param name="examtype">One of the codes in the set of records from the qualifier table having the 
            codename <c>EXAMTYPE</c>.</param>
            <param name="facetime">The time in minutes spent total face to face with the patient. Per current 
            HCFA guidelines this time is defined: <i>For coding purposes, face to face time for these 
            services is defined as only that time that the physician spends face to face with the patient 
            and/or family. This includes the time in which the physician performs such tasks as obtaining 
            a history, performing an examination, and counseling the patient.</i>  This time entry is 
            important for those E and M codings that rely specifically on time (e.g. Hospital discharge 
            services – Final discharge).</param>
            <param name="overhalf">1 if more than 50% of the total face to face time was spent counseling; 
            0 otherwise. In the case where counseling and/or coordination of care dominates (more than 50%) 
            of the physician/patient and/or family encounter (face to face time in the office or other 
            outpatient settings, floor/unit time in the hospital or nursing facility), time is considered 
            the key or controlling factor to qualify for a particular level E and M services.</param>
            <param name="codedetails">This string is used to calculate the user-override E and M code. This is 
            a string containing twelve ASCII characters, each a 0-4 indicating the level for one of the 
            12 components. If the level is 0, the level will be computed based on the encounter data (the 
            computed levels are returned from CalculateEM()). Levels 1-4 are user-overrides. The meanings 
            for levels 1- 4 vary according to the component (see table below).</param>
            <returns>The returned string encodes three parts which are delineated with a semicolon.
            <list type="number">
            	<item>Medcinid of the calculated E and M code.</item>
            	<item>Medcinid of E and M code with user override (if any).</item>
            	<item>Computation results of the 15 components from which the two calculated E and M codes are 
            	based on.</item>
            </list><para>An example of a codestring returned is <c>42351;42351;232433423213433</c></para></returns>
            <remarks>The method employed is to suggest to the user the calculated E and M code that's based on 
            the patient's encounter data (what's documented), and to allow the user to override this code 
            by adjusting the level of any of the 12 components computed from the patient’s encounter data.
            <para>The 12 components are documented in the 1997 HCFA E and M guidelines. The patient's encounter 
            data that gets evaluated is the same as that passed via AddNarrate() and friends which is used 
            to generate a narrative of the encounter.</para>
            <para>Note that the valu field of HPI free text findings can be used to designate the level of HPI 
            for E and M purposes where uncoded data is entered as free text. Entering a <c>1</c> for the 
            value would imply level 1. Entering a <c>2</c> for the value would imply level 2. The value 
            field is ignored for narrative emission of free text. The free text HPI findings are:
            <list type="bullet">
            	<item>112342 - HPI [use for free text]</item>
            	<item>115033 - Preliminary Background HPI [use for free text]</item>
            	<item>115034 - Supplemental HPI [use for free text]</item>
            </list></para>
            <para>When specifying user overrides via codedetails, the following table will assist in 
            understanding the levels for each component.
            <list type="table">
            <listheader><term>Character Position and Component</term><description>ASCII Value</description></listheader>
            <item><term>1 - HPI</term><description>1=Brief, 2=Extended</description></item>
            <item><term>2 - ROS</term><description>1=Problem pertinent, 2=Extended, 3=Complete</description></item>
            <item><term>3 - PFSH</term><description>1=Pertinent, 2=Complete</description></item>
            <item><term>4 - Overall History</term><description>1=Problem focused, 2=Expanded problem focused, 
            3=Detailed, 4=Comprehensize; Calculated from HPI, ROS, PFSH and cannot be directly overridden.</description></item>
            <item><term>5 - EXAM</term><description>1=problem focused, 2=Expanded Problem Focused, 3=Detailed, 
            4 = Comprehensive</description></item>
            <item><term>6 - Overall MDM</term><description>1=straightforward 2=low complexity 
            3=moderate complexity 4=high complexity; Calculated from Dx/Mgt Options, Complexity of data 
            and cannot be directly overridden.</description></item>
            <item><term>7 - Dx/Mgt Options</term><description>1=Minimal, 2=Limited, 3=Multiple, 4=extensive</description></item>
            <item><term>8 - Complexity of Data</term><description>1=Minimal, 2=Limited, 3=Moderate, 4=Extensive</description></item>
            <item><term>9 - Overall Risk</term><description>1=Minimal, 2=Low, 3=Moderate, 4=High; Calculated 
            from Presenting problem, Diagnostic Procedures Ordered, Management Options Selected and cannot 
            be directly overridden.</description></item>
            <item><term>10 - Presenting Problem</term><description>1=Risk level 1, 2=Risk level 2, 3=Risk level 3, 4=risk level 4</description></item>
            <item><term>11 - Diagnostic Procedures Ordered</term><description>1=Risk level 1, 2=Risk level 2, 3=Risk level 3, 4=risk level 4</description></item>
            <item><term>12 - Management Options Selected</term><description>1=Risk level 1, 2=Risk level 2, 3=Risk level 3, 4=risk level 4</description></item>
            <item><term>13 - Overall History calculated from user override</term><description>1=Problem focused, 
            2=Expanded problem focused, 3=Detailed, 4=Comprehensize; Calculated from user override of HPI, 
            ROS, and PFSH. In returned codestring only.</description></item>
            <item><term>14 - Overall MDM calculated from user override</term><description>1=straightforward 
            2=low complexity 3=moderate complexity 4=high complexity; Calculated from user override of 
            Dx/Mgt Options, and Complexity of data. In returned codestring only.</description></item>
            <item><term>15 - Overall Risk calculated from user override</term><description>1=Minimal, 2=Low, 
            3=Moderate, 4=High; Calculated from user override of  Presenting problem, Diagnostic 
            Procedures Ordered, and Management Options Selected. In returned codestring only.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.Cgn(System.Int32)">
            <summary>
            This method obtains the body system code group number for the specified finding.
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The body system code group number is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.CheckAlert(System.String,System.String,System.String,System.String,Medicomp.MedAlertFlags)">
            <summary>
            This API uses patient data from the history pool, the current encounter, 
            and any medcinids with modifiers to find alerts.
            </summary>
            <param name="encountertime">The encounter time to reference an encounter in the History pool. 
            The format is YYYYMMDDHHIISS.</param>
            <param name="medcinids">This is a list of medcinids and associated arguments that modifiy the medcinid separated by tabs.</param>
            <param name="itemids">This is a list of itemid numbers separated by tabs. An Itemid refers to a finding in the current encounter.</param>
            <param name="seqs">This is a list of seq numbers separated by tabs. A seq number is a unique identifier for a chart record
            supplied as an argument in the HistAdd API.</param>
            <param name="flags">This is a 32 bit flags to indicate preferences on results and evaluation considerations.</param>
            <returns>The results are returned as a single null terminated string where records are delimited by a newline character, 
            and fields within a record are delimited by a tab character.</returns>
            <remarks>
            <list type="table">
            <listheader><term>Flag Value</term><description>Return Value Includes</description></listheader>
            <item><term>0x00000001</term><description>Results are alerts level 1.</description></item>
            <item><term>0x00000002</term><description>Results are alerts level 2.</description></item>
            <item><term>0x00000004</term><description>Results are alerts level 3.</description></item>
            <item><term>0x00000008</term><description>Results are alerts level 4.</description></item>
            <item><term>0x00000010</term><description>Add counts of alerts for levels 4,3,2,1 to start of results string.</description></item>
            <item><term>0x00000020</term><description>Only evaluate initiating findings with a prefix of 'O'.</description></item>
            <item><term>0x00000040</term><description>Don’t recalculate, just return alert results from last calculation.</description></item>
            <item><term>0x00000080</term><description>For this check, ignore any lookback period set by the SetAlertLookBackPeriod API call.</description></item>
            </list>
            <para><b>Results Format</b></para>
            <para>
            The results are returned as a single null terminated string where records are delimited by a newline character, 
            and fields within a record are delimited by a tab character.
            Whenever the counts of alerts is requested by setting the 0x00000010 bit in the flags argument, 
            it will appear as a record at the head of the results string as below.
            Level 4 alerts will appear 1st then level 3, level 2, and finally level1. For example,
            '1\t3\t0\t10\n' means one level 4 alert, three level 3 alerts, no level 2 alerts, and ten level 4 alerts, 
            </para>
            <para>
            Whenever the alerts data records are requested by setting the 0x00000001, 0x00000002, 0x00000004, or 0x00000008 bit 
            in the flags argument, each alert will appear as a separate record with fields delimited by tabs.  
            Alerts records will follow a counts of alerts record (if counts of alerts is requested).  
            then end of record but not necessarily the end of the string because other flags may be set.
            </para>
            <para><b>Medcinids list format</b></para>
            <para>
            This is a list of records delimited by the newline character.  Each record has several fields delimited by tabs.
            <list type="table">
            <listheader><term>Field</term><description>Field Contents</description></listheader>
            <item><term>1</term><description>Medcinid</description></item>
            <item><term>2</term><description>EncounterTime</description></item>
            <item><term>3</term><description>Prefix</description></item>
            <item><term>4</term><description>Onset</description></item>
            <item><term>5</term><description>Duration</description></item>
            <item><term>6</term><description>Result</description></item>
            <item><term>7</term><description>Value</description></item>
            <item><term>8</term><description>Unit of Measure</description></item>
            </list>
            </para>
            <para><b>Returned Alert Data Record Format</b></para>
            <para>Example: '199811041345\tIid\tIPfx\tAce inhibitors\t199811041345\tDid\tDPfx\tSwollen lips\t4\n'</para>
            <list type="table">
            <listheader><term>Field</term><description>Contents of Field</description></listheader>
            <item><term>1</term><description>The encounter date and time of the initiating finding (Nov. 4th 1998 13:45)</description></item>
            <item><term>2</term><description>The Medcinid of the initiating finding (Iid)</description></item>
            <item><term>3</term><description>The prefix of the initiating finding (IPfx)</description></item>
            <item><term>4</term><description>The initiating finding’s narrative description (Ace inhibitors)</description></item>
            <item><term>5</term><description>The encounter date and time of the discovered finding (Nov. 4th 1998 13:45)</description></item>
            <item><term>6</term><description>The Medcinid of the discovered finding (Did)</description></item>
            <item><term>7</term><description>The prefix of the discovered finding (DPfx)</description></item>
            <item><term>8</term><description>The discovered finding’s narrative description (Swollen lips)</description></item>
            <item><term>9</term><description>The alert level which is 1,2,3, or 4 (4)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.ClearChart(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method has been replaced by SetPatient and ClearChartFindings. 
            These two functions separate the functionality of the existing ClearChart() 
            function making a more logical API.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <param name="age">Patient’s age in minutes. The 15768000 is 80 year old in minutes 
            (30yrs * 365* 1440). This method is precise enough to support the algorithms.</param>
            <param name="gender">Patient’s gender. 'M' = Male, 'F' = Female, 'U' = unknown.  
            Use unknown when prompting should supply non-gender specific findings.</param>
            <param name="ethnic">One of the qualifier codes for ethnicity.</param>
            <param name="religion">One of the qualifier codes for religion.</param>
            <param name="race">One of the qualifier coes for race.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ClearChartFindings">
            <summary>
            This function clears all findings that have been added with the Addchart() function
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ClearDx">
            <summary>
            Clears the list of diagnoses, problems, and syndromes accumulated from invoking 
            the AddDx() function.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ClearNarrative">
            <summary>
            This method will remove all findings from the narrative collection maintained 
            by AddNarrate(). It will also remove all encounters from the collection 
            maintained by AddEncounter.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddEncounter(System.String,System.Int32)"/>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The following properties are set: NarrativeContext to medContextChart, 
            and NarrativeFormat to medFormatNarrative, Chapter to 0.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.CodeFromItem(System.Int32,Medicomp.CodeLinks,System.Int32)">
            <summary>
            This method obtains the code corresponding to the encounter finding identified by Itemid
            </summary>
            <param name="Itemid">The unique item identification for the encounter finding in question.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations.</param>
            <param name="Mode">Specifies the type of data returned. See table below.</param>
            <returns>The data corresponding to the CodeSet and Mode is returned for the Item.</returns>
            <remarks>This table enumerates the values supported for the Mode parameter:
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>80</term><description>If the code relating to CodeSet varies by parameter, the method will determine
             the code based on the CodeParm parameter values. If the code does not vary by parameter,
              then CodeFromMedcin(ItemId:Medcinid,CodeSet,0) will provide the string returned.</description></item>
            <item><term>All other values</term><description>Identical to CodeFromMedcin(Itemid:Medcinid,CodeSet,Mode)
             using the Medcinid of the finding identified by the Itemid.</description></item>
            </list>
            </p></remarks>
        </member>
        <member name="M:Medicomp.IConnection.CodeFromMedcin(System.Int32,Medicomp.CodeLinks,System.Int32)">
            <summary>
            This method obtains a string containing the one or more codes mapped to the Medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetCodeDate(System.String)"/>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations.</param>
            <param name="Mode">Mode is used to handle variations. See table blow.</param>
            <returns>The specified code mapping is returned.</returns>
            <remarks>Codes are available based on their effective validity by date. The server maintains the 
            effective dates on a system basis. The SetCodeDate API can be called by a client to change the 
            current code date for that client connection
            <p>This table enumerates the values supported for the Mode parameter:</p>
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>0</term><description>Retrieves only the code (or multiple code set).</description></item>
            <item><term>1</term><description>Retrieves the code as well as the description, where applicable.</description></item>
            <item><term>2</term><description>Retrieves the code hint relating to the code, where applicable.</description></item>
            <item><term>4</term><description>Retrieves the code spec relating to the code, where applicable.</description></item>
            <item><term>80</term><description>Retrieves the CodeParm recordset relating to the code, where applicable.
             The table is returned as a single string with each record delimited using a newline character and each field within
             a record delimited by a tab character. The field layout is:
              'lower\tupper\tfemval1\tmalval1\tfemval2\tmalval2\tcoderes'. </description></item>
            <item><term>All other values</term><description>Same as Mode=0.</description></item>
            </list>
            </p></remarks>
        </member>
        <member name="M:Medicomp.IConnection.CodeFromParms(System.Int32,System.Int32,Medicomp.CodeLinks,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method obtains the code corresponding to the finding identified by Medcinid and parameters
            </summary>
            <param name="Age">The patient's age in minutes.</param>
            <param name="Medcinid">The identifier of the Medcin finding.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations.</param>
            <param name="Mode">Specifies the type of data returned. See table below.</param>
            <param name="Value">The value of the finding to determine the code.</param>
            <param name="Gender">One of the gender qualifications: M, F, or U.</param>
            <param name="PosNeg">A 1-character string, as required, containing 'a' or 'A' indiicating positive, or 'n' or 'N' indicating negative.</param>
            <returns>The code calculated from the parameters is returned.</returns>
            <remarks>This table enumerates the values supported for the Mode parameter:
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>80</term><description>If the code relating to CodeSet varies by parameter, the method will determine
             the code based on the CodeParm parameter values. If the code does not vary by parameter,
              then CodeFromMedcin(ItemId:Medcinid,CodeSet,0) will provide the string returned.</description></item>
            <item><term>All other values</term><description>Identical to CodeFromMedcin(Itemid:Medcinid,CodeSet,Mode)
             using the Medcinid of the finding identified by the Itemid.</description></item>
            </list>
            </p></remarks>
        </member>
        <member name="M:Medicomp.IConnection.Complex(System.Int32)">
            <summary>
            Typically a physical finding or diagnosis that requires complex management 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the level of complexity</returns>
            <remarks>The following table lists Medicomp's standard complexity codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>1</term><description>Minimal complexity</description></item>
            <item><term>2</term><description>Low complexity</description></item>
            <item><term>3</term><description>Moderate complexity</description></item>
            <item><term>4</term><description>High complexity</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.Cost(System.Int32)">
            <summary>
            Method to obtain the Cost Factor for the Medcinid
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The cost factor is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.DeleteNarrate(System.Int32)">
            <summary>
            This function is used to remove a finding previously added to the finding collection. 
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate</param>
            <returns>If the finding is successfully removed, DeleteNarrate returns 1; otherwise it returns 0.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Dose(System.Int32,System.Int32)">
            <summary>
            This method returns a list of data fields separated by '\n' that contains all the elements of the 
            specified dosage string. The last element in the list is terminated with '\n\0'.
            </summary>
            <seealso cref="M:Medicomp.Connection.BrandList(System.Int32,System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.DoseList(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="doseid">Specifies the Medcin dose identification.</param>
            <returns>The list of doseage data is returned in a delimited string. See 'remarks' for data elements.</returns>
            <remarks>MEDCIN has findings that are prescription medications. These medicinids can be identified 
            by the property TermType(medcinid) = TYPE_RX (0x0007) and property Rxcode(medcinid)  = 'M' for 
            non-narcotic medications or 'N' for narcotic medications. The property Flag(medcinid) has the 
            0x0010 bit set when the finding which should be restricted from being ordered (i.e. a drug 
            removed from use but needs to be entered as history). The property Eflag(medcinid) has the 
            0x1000 bit set when the finding is a prescription drug that has dose and possibly brand 
            information.
            <para>The order of and description of the dose fields follows:
            <list type="numeric">
            <item>strength or doseage (numeric)</item>
            <item>strength unit code (max 5 chars)</item>
            <item>form (max 6 chars)</item>
            <item>prescribed quantity (numeric)</item>
            <item>prescribed quantity unit (eg. teaspoon) (max 5 chars)</item>
            <item>prescribed route ie: po, ap, im. (max 5 chars)</item>
            <item>prescribed frequency abbreviation ie: q4h, qd, pid. (max 5 chars)</item>
            <item>prescribed frequency numeric ie: 2, 3, 4. (numeric)</item>
            <item>'rxwhen' modifier for frequency ie: prn, ac, pc. (max 5 chars)</item>
            <item>number of days for prescribed therapy (numeric)</item>
            <item>dispense amount (numeric)</item>
            <item>dispense form/packaging (max 6 chars) (numeric)</item>
            <item>number of refills permitted (numeric)</item>
            <item>maximum daily dose - ingredient 1 (numeric)</item>
            <item>maximum daily dose - ingredient 2 (numeric)</item>
            <item>maximum daily dose - ingredient 3 (numeric)</item>
            <item>(Y/N) alert provider when Rx is about to expire</item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.DoseList(System.Int32)">
            <summary>
            This method obtains a list of dosage ids and data for the specified medcinid. A dosage string may 
            contain all of the fields listed in the Dose() method.
            </summary>
            <seealso cref="M:Medicomp.Connection.BrandList(System.Int32,System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.DoseList(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The delimited list of dose identification in the format, 
            <c>Doseid1\nDosestr1\nDoseid2\nDosestr2…\nDoseidN\nDosestrN\n\0</c>.</returns>
            <remarks>MEDCIN has findings that are prescription medications. These medicinids can be identified 
            by the property TermType(medcinid) = TYPE_RX (0x0007) and property Rxcode(medcinid)  = 'M' for 
            non-narcotic medications or 'N' for narcotic medications. The property Flag(medcinid) has the 
            0x0010 bit set when the finding which should be restricted from being ordered (i.e. a drug 
            removed from use but needs to be entered as history). The property Eflag(medcinid) has the 
            0x1000 bit set when the finding is a prescription drug that has dose and possibly brand 
            information.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Eflag(System.Int32)">
            <summary>
            This obtains the extended flags property for the finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The extended flags proprty is returned</returns>
            <remarks>
            The following table lists only the useful flags:
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0002</term><description>Finding has range and scale by age and gender</description></item>
                <item><term>0x0004</term><description>Finding has more than one unit of measure</description></item>
                <item><term>0x0040</term><description>Finding has an entry in the sentence table</description></item>
                <item><term>0x1000</term><description>Finding has rxdose and information</description></item>
                <item><term>0x2000</term><description>This finding has a non-null cpt code</description></item>
                <item><term>0x8000</term><description>Finding has children</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.EndAge(System.Int32)">
            <summary>
            Ending age range of patient which is valid for this record.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the end age in minutes</returns>
            <remarks>Quantity of minutes. 525600 minutes are a year. If this field is 0 then all ages 
            greater than or equal to startage are valid.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Flag(System.Int32)">
            <summary>
            This obtains the basic flag property for the finding. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The flag property is returned</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Finding has been retired from service</description></item>
                <item><term>0x0002</term><description>Finding is chronic</description></item>
                <item><term>0x0004</term><description>Finding is a laterality heading</description></item>
                <item><term>0x0008</term><description>reserved</description></item>
                <item><term>0x0010</term><description>Finding should be restricted from being ordered</description></item>
                <item><term>0x0020</term><description>Value field is typically entered as text</description></item>
                <item><term>0x0040</term><description>When calculating the scale, the H, L, and N results are reversed</description></item>
                <item><term>0x0080</term><description>A test has a profile or panel of results</description></item>
                <item><term>0x0100</term><description>Reverse the sense of the 'N', 'A', and ' ' result qualifiers</description></item>
                <item><term>0x0200</term><description>Finding should not be displayed in a tabular form</description></item>
                <item><term>0x0400</term><description>Finding should not be entered in a patient’s chart</description></item>
                <item><term>0x0800</term><description>Finding can have a range and scale calculated from its value</description></item>
                <item><term>0x1000</term><description>See differential diagnosis</description></item>
                <item><term>0x2000</term><description>Finding has an associdated CPT code</description></item>
                <item><term>0x4000</term><description>Finding is only pertinent to females</description></item>
                <item><term>0x8000</term><description>Finding is only pertinent to males</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.FormatDate(System.String,System.String)">
            <summary>
            This function can be used to obtain the presentation format of a date and time passed
            in Medcin date format using the preference established for the precision of the date passed,
            or the coded format passed. 
            </summary>
            <param name="date">This is the date and time for which you wish to obtain the presentation display. 
            The date must be passed in Medcin date format </param>
            <param name="format">If this is passed as an empty string, the current preference for the date precision will be used. 
            If you wish to use a custom format, adhere to the syntax of date and time formats as discussed under the SetTimeFormat API</param>
            <returns>The presentation format of the date passed is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetBuildListMode">
            <summary>
            This method obtains the current BuildListMode value
            </summary>
            <seealso cref="M:Medicomp.Connection.BuildListMode(Medicomp.BuildListModes)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <returns>The current BuildListMode is returned.</returns>
            <remarks>This mode alters the field content of certain ResponseItem fields.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetDoctorName(System.Int32)">
            <summary>
            This function obtains the doctor name string for the given doctor identification that was 
            assigned with a previous <see cref="M:Medicomp.Connection.AddDocName(System.Int32,System.String)">AddDocname</see> method.
            </summary>
            <param name="docid">The identifier of the provider in question.</param>
            <returns>Returns the doctor name assigned to a docid</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetGroupNumber(System.Int32)">
            <summary>
            This function is used to obtain the group number calculated for a finding 
            added to the narrative collection by AddNarrate(). Also review the 
            AddNarrate2 API which allows setting the group number while adding the 
            finding. 
            </summary>
            <param name="itemid">This number should be one of the values 
            previously returned by AddNarrate</param>
            <returns>The group number of the item identified is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetGroupSequence(Medicomp.MedcinGroups)">
            <summary>
            This method is used to obtain the presentation sequence of a narrative group.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetGroupSequenceEx"/>
            <seealso cref="T:Medicomp.MedcinGroups"/>
            <param name="groupNumber">One of the MedcinGroups enumeration.</param>
            <returns>The group sequence of the requested group number is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetGroupSequenceEx">
            <summary>
            This method is used to obtain the sequence of all groups as a comma-delimited string.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetGroupSequenceEx(System.String)"/>
            <returns>This returns a string containing the comma delimited list of sequence numbers in group order.</returns>
            <remarks>The delimited list of numbers are ordered by group: G_REASON, G_HPI, G_CURMED, G_PAST_MED_HIST, etc.
            Thus, using the default sequence, the string returned would be '2,4,5,6,...'.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetHotspots(System.Int32)">
            <summary>
            This method retrieves the recordset of hotspots associated with the image identified by the 
            ImageId parameter. 
            </summary>
            <param name="ImageId">Specifies the image identifier in question.</param>
            <returns>If the image has no hotspots assigned, or the ImageId is invalid, or imaging is currently 
            unsupported, a zero-length string will be returned. When hotspots are available, the entire 
            recordset of hotspots is returned as a tokenized string of hotspots with each hotspot having 
            the format as noted below.</returns>
            <remarks>The following designates the hotspot format(spaces added only for readability):
            <para><c>HotSpotID \t BoundsLeft \t BoundsTop \t BoundsRight \t BoundsBottom \t Attributes 
            \t clickFlag \t ListId \t PicklistID \t ReferenceID \t zoomIn \t zoomOut \t Description</c></para>
            <para>Hotspot fields are delimited with a '\t' token character (a vbTab). Hotspot records are 
            delimited with a '\n' token character (a vbLf). This string can be converted to data fields 
            by a two-stage split operation; splitting the string on vbLf into an array of hotspot strings, 
            then splitting each hotspot string in the array derived from the split on vbTab to create an 
            array of hotspot fields. The following table describes the content of each hotspot field.
            <list type="table"><listheader><term>Field</term><description>Field Contents</description></listheader>
            <item><term>HotSpotID</term><description>This field is the identification number of the hotspot. 
            These numbers indicate nothing special; however, each hotspot assigned to an image has a 
            unique HotSpotID.</description></item>
            <item><term>BoundsLeft</term><description>This is the X-coordinate of the northwest corner of the 
            hotspot as it is positioned on the image. Coordinates are measured in pixels. Each image is 
            sized at 360 pixels vertical by 300 pixels horizontal.</description></item>
            <item><term>BoundsTop</term><description>This is the Y-coordinate of the northwest corner of the 
            hotspot as it is positioned on the image.</description></item>
            <item><term>BoundsRight</term><description>This is the X-coordinate of the southeast corner of the 
            hotspot as it is positioned on the image.</description></item>
            <item><term>BoundsBottom</term><description>This is the Y-coordinate of the southeast corner of 
            the hotspot as it is positioned on the image.</description></item>
            <item><term>Attributes</term><description>This is a number that indicates special attributes about 
            the hotspot. The attributes are: 0 = none; 1 = left lateral; 2 = right lateral </description></item>
            <item><term>ClickFlag</term><description>This is a number that provides a recommended default 
            action to be taken when a user clicks in the region bounded by the hotspot. The numbers are:
            1 = prompt using the list identified by ListId;
            2 = provide a picklist using the list identified by ListId;
            3 = provide the user with selecting a personal picklist that they have assigned to the hotspot;
            4 = show the image identified by the ZoomIn image identifier;
            5 = show the image identified by the ZoomOut identifier</description></item>
            <item><term>ListId</term><description>This is a ListItems identification number that may be assigned 
            to a hotspot. Where a list is available, it is retrieved using the GetListItems API. Only the 
            Medcinid and Age fields of each ListItems item are applicable.</description></item>
            <item><term>PicklistID</term><description>This is a ListItems identification number that may be 
            assigned to a hotspot. Where a list is available, it is retrieved using the GetListItems API. 
            The Medcinid, Prefix, and Note fields of each ListItems item are applicable.</description></item>
            <item><term>ReferenceID</term><description>If non-zero, this represents a single Medcinid that is 
            associated with the hotspot.</description></item>
            <item><term>ZoomIn</term><description>If non-zero, this represents the ImageId of an image that is 
            considered a magnification of the area of the current image that is associated with the hotspot. 
            The zoom-in image provides more detail of an area.</description></item>
            <item><term>ZoomOut</term><description>If non-zero, this represents the ImageId of the image that 
            this image is a magnification of. The zoom-out image is used to navigate back to the image of 
            lesser magnification.</description></item>
            <item><term>Description</term><description>This is a caption string that tersely describes the 
            hotspot. It can be used when providing a tooltip for the hotspot when the mouse hovers over 
            the region bounded by the hotspot.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetHotspotsLen(System.Int32)">
            <summary>
            This function obtains the length of the encoded hotspots applicable for the image identified by 
            the ImageId parameter. 
            </summary>
            <param name="ImageId">Specifies the image identifier in question.</param>
            <returns>If the image has no hotspots assigned, or the ImageId is invalid, or imaging is currently 
            unsupported, a 0 will be returned. The length returned is one greater than the actual length 
            of the string of characters to account for a terminating NULL character.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetImage(System.Int32)">
            <summary>
            This method obtains the image identified by the ImageId parameter. 
            </summary>
            <param name="ImageId">The identifying number of the image.</param>
            <returns>If the ImageId is invalid, or imaging is currently unsupported, an empty byte array will 
            be returned. When the desired image is available, it will be returned as a singly-dimensioned array of bytes.</returns>
            <remarks>Images are provided in Portable Network Graphic (PNG) file format as an array of bytes.
            This can be passed to an PictureBox control using streams:
            <p>Dim buffer() As Byte = Medcin.GetImage(Imageid)</p>
            <p>MyPictureBox.Image = Image.FromStream(New System.IO.MemoryStream(buffer))</p>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetImageId(System.Int16,System.Int16,System.Int16)">
            <summary>
            This function returns the identification number of the image that is appropriate 
            for the combination of system, region, and view passed in the parameters.
            </summary>
            <param name="system">The system code of the desired image
            <list type="table">
            <listheader><term>System Code</term><description>Code description</description></listheader>
            <item><term>1</term><description>Skin</description></item>
            <item><term>2</term><description>Respiratory</description></item>
            <item><term>3</term><description>Cardiovascular</description></item>
            <item><term>4</term><description>Breasts</description></item>
            <item><term>5</term><description>Lymphatic</description></item>
            <item><term>6</term><description>Gastrointestinal</description></item>
            <item><term>7</term><description>Urologic</description></item>
            <item><term>8</term><description>Genital</description></item>
            <item><term>9</term><description>Endocrine</description></item>
            <item><term>10</term><description>Muscle</description></item>
            <item><term>11</term><description>Skeletal</description></item>
            <item><term>12</term><description>Neurologic</description></item>
            <item><term>13</term><description>Eye</description></item>
            </list></param>
            <param name="region">The region code of the desired image
            <list type="table">
            <listheader><term>Region Code</term><description>Code description</description></listheader>
            <item><term>1</term><description>Full body</description></item>
            <item><term>2</term><description>Head-Neck</description></item>
            <item><term>3</term><description>Trunk</description></item>
            <item><term>4</term><description>Upper extremities</description></item>
            <item><term>5</term><description>Lower extremities</description></item>
            </list></param>
            <param name="view">The view code of the desired image
            <list type="table">
            <listheader><term>View Code</term><description>Code description</description></listheader>
            <item><term>1</term><description>Front</description></item>
            <item><term>2</term><description>Back</description></item>
            <item><term>3</term><description>Medial</description></item>
            <item><term>4</term><description>Left</description></item>
            <item><term>5</term><description>Right</description></item>
            <item><term>6</term><description>Top</description></item>
            <item><term>7</term><description>Bottom</description></item>
            <item><term>8</term><description>Anterior</description></item>
            <item><term>9</term><description>Posterior</description></item>
            <item><term>10</term><description>Cross Section Left</description></item>
            <item><term>11</term><description>Cross Section Right</description></item>
            <item><term>12</term><description>Reserved</description></item>
            <item><term>13</term><description>Reserved</description></item>
            <item><term>14</term><description>Reserved</description></item>
            <item><term>15</term><description>Miscellaneous 1</description></item>
            <item><term>16</term><description>Miscellaneous 2</description></item>
            <item><term>17</term><description>Miscellaneous 3</description></item>
            </list></param>
            <returns>The ImageID of the appropriate image is returned. 
            If no image matches the parameters, 0 is returned.</returns>
            <remarks>Since such a combination may have male-specific and female-specific images, 
            as well as different images for different ages, the patient's age and gender are 
            used when needed. The patient's age and gender are determined from the last 
            SetPatient API call.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetImageIdex(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            This function obtains the identification number of the image that is appropriate for the 
            combination of system, region, view, and attributes passed in the parameters. Since such 
            a combination may have male-specific and female-specific images, as well as different 
            images for different ages, the patient's age and gender are used when needed. The patient's 
            age and gender are determined from the last <see cref="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">SetPatient</see> method.
            </summary>
            <param name="system">The system code. See <see cref="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">GetImageId</see>.</param>
            <param name="region">The region code. See <see cref="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">GetImageId</see>.</param>
            <param name="view">The view code. See <see cref="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">GetImageId</see>.</param>
            <param name="attributes">Attribute codes are identified in the following table:
            <list type="table">
            <listheader><term>Attribute Parameter Code</term><description>Code Definition</description></listheader>
            <item><term>0</term><description>Combined or Normal</description></item>
            <item><term>1</term><description>Left body part only</description></item>
            <item><term>2</term><description>Right body part only</description></item>
            </list></param>
            <returns>The ImageID of the appropriate image is returned. 
            If no image matches the parameters, 0 is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetImageLen(System.Int32)">
            <summary>
            This function obtains the length, in bytes, of the image identified by the ImageId parameter. 
            </summary>
            <param name="ImageId">The identifying number of the image.</param>
            <returns>If the ImageId is invalid, or imaging is currently unsupported, the length returned will be 0.</returns>
            <remarks>The image can be retrieved as a Portable Network Graphics (PNG) file image stored as a 
            byte array by using the <see cref="M:Medicomp.Connection.GetImage(System.Int32)">GetImage</see> method.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetImageProperties(System.Int32)">
            <summary>
            This method returns the image properties of the targeted image
            </summary>
            <param name="ImageId">This is the id of the image for which you want the properties.</param>
            <returns>The image properties in a tab delimited string.</returns>
            <remarks>The properties are returned in the following order:
            <para>system\tregion\tview\tattributes\tage\tsex\thot spot length\tsearch description</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetIpDx">
            <summary>
            Reserved for future use
            </summary>
            <returns>Returns the intelligent prompt list.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetItemData(System.Int32,System.String)">
            <summary>
            This method can be used to retrieve a string that contains the field data 
            passed to the server using the various data add functions for an item. 
            </summary>
            <param name="itemid">The 'Itemid' parameter specifies the itemid that was 
            used to identify the item in the various add functions. If the itemid 
            passed is not present, an empty string is returned.</param>
            <param name="fields">The 'Fields' parameter specifies the data elements 
            that are to be returned; only those elements specified in the argument 
            will be returned and their appearance in the string will be in the order 
            of the characters specified in the fields argument. Data elements in the 
            returned string are separated with tabs. Fields will only be present 
            if they contain data.
            <list type="table">
            <listheader><term>Element Character</term><description>Element Description</description></listheader>
            <item><term>a</term><description>status</description></item>
            <item><term>B</term><description>Enter doc</description></item>
            <item><term>b</term><description>referred to doc</description></item>
            <item><term>c</term><description>chartflag</description></item>
            <item><term>d</term><description>duration</description></item>
            <item><term>e</term><description>encountertime</description></item>
            <item><term>i</term><description>Medcinid</description></item>
            <item><term>k</term><description>episode</description></item>
            <item><term>m</term><description>modifier</description></item>
            <item><term>n</term><description>note</description></item>
            <item><term>o</term><description>onset</description></item>
            <item><term>p</term><description>prefix</description></item>
            <item><term>r</term><description>= Rx string</description></item>
            <item><term>t</term><description>result</description></item>
            <item><term>u</term><description>unit of measure</description></item>
            <item><term>v</term><description>value string</description></item>
            <item><term>y</term><description>range normal low</description></item>
            <item><term>z</term><description>range normal high</description></item>
            </list></param>
            <returns>Returns the field data passed to the server using the various data add functions for an item.</returns>
            <remarks>A sample returned string follows using '^t' to indicate a tab:
            <para>i=20905^tp=O^te=200402031440^tv=^tu=mg/100ml^tm= ^tt= a= ^tb=0^tc=0^ty=0^tz=0^t^tB=1</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetLastError">
            <summary>
            This method can be used to retrieve the last exception that occurred.
            </summary>
            <returns>The last exception is returned; null if no error was detected.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetListItems(System.Int32)">
            <summary>
            This method retrieves the set of ListItems associated with the ListId parameter.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetListItemsLen(System.Int32)"/>
            <param name="ListId">The list identifier of the desired list.</param>
            <returns>If the List is empty, or the ListId is invalid, or imaging is currently unsupported, a 
            zero-length string will be returned. When ListItems are available, the entire set of ListItems 
            is returned as a tokenized string of ListItems with each ListItem having the format identified below.</returns>
            <remarks>Each ListItem has the following format (spaces added only for readability):
            <para><c>Medcinid \t Prefix \t AgeLower \t AgeUpper \t Note</c></para>
            <para>ListItem fields are delimited with a '\t' token character (a vbTab). ListItems records are 
            delimited with a '\n' token character (a vbLf). This string can be converted to data fields by 
            a two-stage split operation; splitting the string on vbLf into an array of ListItem strings, 
            then splitting each ListItem string in the array derived from the split on vbTab to create an 
            array of ListItem fields. The following table describes the content of each hotspot field.
            <list type="table"><listheader><term>Field</term><description>Field Contents</description></listheader>
            <item><term>Medcnid</term><description>This is the Medcinid to be used with Intelligent Prompting® 
            or the finding displayed for picklist data entry.</description></item>
            <item><term>Prefix</term><description>When the list is used for a picklist, this is the prefix 
            qualifier to be assigned.</description></item>
            <item><term>AgeLower</term><description>This indicates a lower age boundary for applicability of 
            the list item to a patient.</description></item>
            <item><term>AgeUpper</term><description>This indicates an upper age boundary for applicability of 
            the list item to a patient.</description></item>
            <item><term>Note</term><description>When the list is used for a picklist, this is a free text note 
            that may be applied to a finding entered into a chart.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetListItemsLen(System.Int32)">
            <summary>
            This method retrieves the length of the encoded ListItems recordset identified by the ListId 
            parameter.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetListItems(System.Int32)"/>
            <param name="ListId">The list identifier of the desired list.</param>
            <returns>If the List is empty, or the ListId is invalid, or imaging is currently unsupported, a 0 
            will be returned. The length returned is one greater than the actual length of the string of 
            characters to account for a terminating NULL character.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetMedcinTimeFormat(Medicomp.DatePrecisions)">
            <summary>
            This method is used to obtain the format associated with presenting a date and time data value based 
            on the precision of the date value. There is a separate property for each precision.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetTimeFormat(Medicomp.DatePrecisions,System.String)"/>
            <seealso cref="T:Medicomp.DatePrecisions"/>
            <param name="precision">One of the <see cref="T:Medicomp.DatePrecisions">DatePrecisions</see>.</param>
            <returns>The current format for the specified date precision is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetMedcinVersion">
            <summary>
            This method obtains the internal version string of the Medcin server.
            </summary>
            <returns>The Medcin server version is returned.</returns>
            <remarks>The version string is typically in the format, 'M.VN.x.y' where 'M' is the major
            version of the server, 'VN' indicates the minor version which is followed by release indicators.
            A version string of the Medcin database can be recovered from the Sdocneg property of Medcinid=1.
            This string is of the form, VN:YYYYMMDD. The 'VN' of the data and the 'VN' of the server
            must match for proper operation. The date portion of the string indicates the date of the release.
            <para>The database and server version data can be viewed from the system tray dialog of the
            Windows server version.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetMessageString(System.Int16)">
            <summary>
            This method can be used to get any of the message strings used in the generation of the narrative. 
            These strings include Group headings, Table headings, Sentence prefixes, pronouns, canned 
            phrases, date and time units, etc. Rather than delineate the nearly 200 strings in this 
            document, refer to the file named messages.bas in the SDK\VBDemoProgram directory or the file 
            messages.h in the SDK\thinclient\source directory for a description of each message index.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetMessageString(System.Int16,System.String)"/>
            <param name="Index">The index number of the message you wish to retrieve.</param>
            <returns>Returns the message string assigned to the index.</returns>
            <remarks>If, when retrieving a string, the index is less than zero, the returned string will 
            contain the index number of the last message string. This can be used as an upper boundary 
            when retrieving the messages.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetNarrateOptions">
            <summary>
            This method is used to obtain the options used to customize the narrate generation.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrateOptions(Medicomp.NarrateOptions)"/>
            <seealso cref="T:Medicomp.NarrateOptions"/>
            <returns>This returns the current NarrateOptions setting.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetNarrativeContext">
            <summary>
            This method is used to obtain the type of context being used for the narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrativeContext(Medicomp.NarrativeContexts)"/>
            <seealso cref="T:Medicomp.NarrativeContexts"/>
            <returns>The current NarrativeContexts enumeration value is returned.</returns>
            <remarks>Context should be set prior to entering findings for an encounter to ensure correct 
            output for that context.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetNarrativeFormat">
            <summary>
            This method is used to obtain the type of format being used for the encounter narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrativeFormat(Medicomp.NarrativeFormats)"/>
            <seealso cref="T:Medicomp.NarrativeFormats"/>
            <returns>This returns one of the NarrativeFormats enumeration values.</returns>
            <remarks>When MedcinInit is invoked, NarrativeFormat defaults to medFormatNarrative. 
            It also is set to medFormatNarrative when ClearNarrative() is invoked.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetNarrativeOutput">
            <summary>
            This method is used to obtain the type of output being used for the encounter narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrativeOutput(Medicomp.NarrativeOutputs)"/>
            <seealso cref="T:Medicomp.NarrativeOutputs"/>
            <returns>This returns one of the NarrativeOutputs enumeration values.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetReferenceInfo(System.Int32,System.Int32,Medicomp.ReferenceInfos)">
            <summary>
            This function works in concert with a reference information datafile, medinfo.dat, to retrieve 
            reference information useful for a doctor and/or patient.
            It is also used to retrieve comments associated with specific Medcin findings.
            </summary>
            <param name="Source">This should contain the numeric identification of the information provider. 
            At this time, Source must be set to a value of 0 that identifies Medicomp,
            or 1 that identifies 'Gold Standard Media' (GSM).</param>
            <param name="Id">This is the numeric identifier of the information. Its value will depend on the 
            Options parameter.</param>
            <param name="Options">This is a parameter that identifies the nature of the request.
            <list type="table">
            <listheader><term>Value and Enum</term><description>Description of Option</description></listheader>
            <item><term>0 - medRefSourceAvail</term><description>Use to determine if reference information is 
            available for the designated source. Will return a string containing either '1' if the source 
            information is available or '0' if it is not. See the information below for a description of 
            the structure of the returned string.</description></item>
            <item><term>1 - medRefDocInfo</term><description>Use to retrieve the doctor information for the 
            given Id, which is the CPNUM assigned by GSM.</description></item>
            <item><term>2 - medRefPatFormList</term><description>Use to retrieve a list of Ids and Forms 
            available for the given Id, which is the CPNUM assigned by GSM. A Tab character is used to 
            delimit the Id and Form; a NewLine as used to delimit each list record.</description></item>
            <item><term>3 - medRefPatInfo</term><description>Use to retrieve the patient information for the 
            given Id, which is one of the Ids returned in the list retrieved using an API call with 
            Options=2. See the information below for a description of the structure of the returned string.</description></item>
            <item><term>8 - medRefComment</term><description>Use with Source = 0 to retrieve the finding comment</description></item>
            </list></param>
            <returns>The information pertinant to the request is returned.</returns>
            <remarks><b>Information Format</b>
            <para>This section discusses the format of the doctor and patient information. The first three 
            characters of the string contain the data file type to be used if writing the information to a 
            file. In the case of Source=1 (GSM reference information), this would be 'htm'. The remaining 
            string contains one or more language-specific pages of information – each deliminated with a 
            Tab. Each language section begins with 'L=xxx', where xxx indicates the language of the section. 
            At this time, all doctor reference information is provided in English ('ENG' as the code). 
            Patient information is available in English ('ENG' as the code) with some reference information 
            available in Spanish (code 'SPA').</para>
            <para>Where information is available in more than one language, html page information includes 
            hyperlinks to cross-reference the language pages. In order for these links to work, each 
            language-specific page data should be written to a file named medinfoxxx.typ, where 'xxx' is 
            the 3-letter language code and 'typ' is the file type identified above.</para>
            <para>When Source=0 and Options=8, the comment string for a Medcin finding is retrieved by passing
            the Medcinid for the Id parameter. When a finding has an associated comment,
            the 0x0010 bit of it’s GpFlags property will be set</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetSequence(System.Int32)">
            <summary>
            Returns the sequence of the designated finding assigned by the application
            </summary>
            <param name="Itemid">The designated finding in the encounter.</param>
            <returns>The assigned sequence of the designated finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetShowItemtag">
            <summary>
            This method is used to obtain the state of adding a client tag (number and/or string) to the 
            generated text.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <seealso cref="M:Medicomp.Connection.AddItemTag(System.Int32,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.NarrateGroups(System.String)"/>
            <seealso cref="T:Medicomp.NarrativeTags"/>
            <returns>The current state of ShowItemTag is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetStateKey">
            <summary>
            This function tells the server to save the state of the client.  
            It returns a string that is the key to be passed when the state 
            is to be restored after reconnection to the server.  
            This method should be invoked just prior to MedcinEnd() during program termination.
            </summary>
            <seealso cref="M:Medicomp.Connection.RestoreState(System.String)"/>
            <returns>This method returns a zero if the client state cannot be saved, and returns a 
            statekey if the state is successfully saved.</returns>
            <remarks>This feature only maintains one state for a given connection; 
            it will not allow the client to maintain multiple states that can be swapped.
            <para>The SCO UNIX/LINUX/AIX servers are currently configured to support 256 simultaneous 
            connections, and an additional 2048 states from previous connections. The Win/NT server uses 
            the IOCP functionality to support 6000 simultaneous connections (see 
            <see url="http://support.microsoft.com/default.aspx?scid=kb;en-us;192800">Microsoft KB Q192800</see>) 
            and an additional 2048 states from previous connections. Slots for states are given out on a 
            Least Recently Used basis. State info may be lost if 2048 new connections occur prior to 
            reconnection. Additional state capacity can be easily added. </para>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetSubGroup(System.Int32)">
            <summary>
            This method returns the narrative subgroup number of the encounter finding.
            </summary>
            <param name="itemid">The identification number assigned to the finding by your application.</param>
            <returns>The subGroup number (the body system code group) is returned, if non-zero.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetSubGroupSequence(Medicomp.MedcinGroups,System.Int16)">
            <summary>
            This method is used to obtain the presentation sequence of the subgroups within a narrative group.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetSubGroupSequence(System.String)"/>
            <param name="Group">The <see cref="T:Medicomp.MedcinGroups">narrative group number</see> of the 
            group for which the subgroup sequence is  desired. The subgroup sequence for all groups can be
            obtained in a single GetSubgroupSequence method call by using a Group number of 0.</param>
            <param name="Mode">If Mode is 1, the string returned contans desriptions for the group and subgroups. 
            If Mode is 0, the string returned contains only the group and sequence values.</param>
            <returns>A string containing the delimited subgroup sequencing is returned.</returns>
            <remarks>The syntax of the sequence string is the group number followed by the set of presentation 
            sequence numbers for each subgroup of that group. All fields are delimited with a vertical bar 
            character. If descriptions are requested, they follow each value and are delimited by a tilde 
            character.<para>At this time, the only Groups that have supported subgroup sequencing are History 
            of Present Illness, Physical Examination, and Review of Systems.</para>
            <para>The following string illustrates the Sequence string returned from the call,</para> 
            <para><c>Sequence = GetSubgroupSequence(2,1)</c></para>
            <para><c>2~History of present illness|1~encounter background information|2~military service|3~systemic 
            symptoms|4~head-related symptoms|5~eye symptoms|6~otolaryngeal symptoms|7~breast 
            symptoms|8~cardiovascular symptoms|9~pulmonary symptoms|10~gastrointestinal 
            symptoms|11~genitourinary symptoms|12~endocrine symptoms|13~skin symptoms|14~hematologic 
            symptoms|15~musculoskeletal symptoms|16~neurological symptoms|17~psychological symptoms</c></para>
            <para>The following string illustrates the Sequence string returned from the call,</para> 
            <para><c>Sequence = GetSubgroupSequence(2,0)</c></para>
            <para><c>2|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17</c></para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetTimedSections">
            <summary>
            This method is used to set or obtain the state associated with presenting timed findings (findings 
            with an onset date more recent than the encounter date) into separate section groupings.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetTimedSections(Medicomp.TimedSections)"/>
            <returns>The current state of TimedSections is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetUserFindingTag(System.Int32)">
            <summary>
            This method gets the tag string previously applied to a User Finding.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">This is the id of the user-finding in question.</param>
            <returns>The previously assigned tag is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Gpflags(System.Int32)">
            <summary>
            This obtains general purpose flags for the finding
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the general purpose flags</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Finding is considered orderable</description></item>
                <item><term>0x0002</term><description>Finding is typically for posting a result</description></item>
                <item><term>0x0004</term><description>Finding has alerts</description></item>
                <item><term>0x0008</term><description>Finding is common and list first in searches</description></item>
                <item><term>0x0010</term><description>Finding has a comment text associated with it</description></item>
                <item><term>0x0020</term><description>Used internally to inhibit building out of Intelligent Prompt</description></item>
                <item><term>0x0040</term><description>Finding is under nurse role licensing</description></item>
                <item><term>0x0100</term><description>Used in conjunction with 0200 to provide a default SIG: 256=routine, 512=PRN, 768=QSHIFT</description></item>
                <item><term>0x0200</term><description>Used in conjunction with 0100 to provide a defualt SIG: 256=routine, 512=PRN, 768=QSHIFT</description></item>
                <item><term>0x1000</term><description>Finding participates in one or more meaningful use measures</description></item>
            </list>
            </remarks>
            <seealso cref="M:Medicomp.Connection.GetReferenceInfo(System.Int32,System.Int32,Medicomp.ReferenceInfos)"/>
        </member>
        <member name="M:Medicomp.IConnection.GroupName(Medicomp.MedcinGroups)">
            <summary>
            This method obtains the presentation string used to provide a heading for a group.
            </summary>
            <seealso cref="T:Medicomp.MedcinGroups"/>
            <param name="groupnumber">The number of the group for which the heading name is desired. 
            A comma-delimited string of all group names in group sequence can be obtained with a single 
            call using medAllGroups as the groupNumber parameter.</param>
            <returns>The group name heading is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This function is used to determine which termtypes of findings appear in the respective 
            Diagnoses prompt reserved lists based on the listsize argument.  
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">The list size in question</param>
            <param name="termtype">The terminology type in question</param>
            <returns>Returns non-zero if the requested list would have items.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            The function HaveList() is used to determine which termtypes of findings exist in 
            the reserved list based on the listsize argument.  
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <param name="listsize">The list size in question.</param>
            <param name="termtype">The terminology type in question.</param>
            <returns>This function returns the Boolean value of true if the requested listsize 
            contains the requested termtype.</returns>
            <remarks>Note that the termtype ALL_TYPES will return true if any termtypes exist 
            in the list specified by the termtype argument.
            <para>This information could be used on a tabbed display (where one tab is for each 
            termtype) to highlight tabs showing the user which termtypes are available.  
            When the user selects a tab, invoke activate to load the tab with the termtype.  
            If the user entered data into the chart on the previous tab (and addchart was invoked), 
            invoking calculate prior to activate would create an updated prompting list for the 
            selected tab based on the new chart information.  The more chart information 
            (passed via AddChart()) the IP function has about the patient, the more pertinent 
            the resulting lists will be displayed to the user.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HaveWordSearch(Medicomp.MedTermtypes)">
            <summary>
            This method is used to determine which termtypes of findings are available for prompting based on 
            the prior word search. 
            </summary>
            <seealso cref="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.WordSearch(System.String)"/>
            <param name="termtype">One of the <see cref="T:Medicomp.MedTermtypes">medTermtypes</see> for 
            checking the availability of a list.</param>
            <returns>The function returns non-zero if the requested termtype is available, otherwise 0. 
            Note that the termtype medTermAll will return true if any termtypes exist in the list specified 
            by the termtype argument.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistActivate(Medicomp.ListSizes,System.Int16)">
            <summary>
            This method retrieves a list of patient history for the specified listsize and termtype that is 
            relevant to a short list of potential diagnoses calculated from the specified list of findings 
            passed with HistAddChart().
            </summary>
             <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">This argument provides for three different list sizes. 
            Shortlist=1, Longlist=2, Fulllist=3</param>
            <param name="loadtype">The termtype argument restricts the returned list to the related termtypes</param>
            <returns>The list of relevant history as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This method retrieves a list of patient history for the specified listsize and termtype that is 
            relevant to the diagnoses, problems, or syndromes passed with the HistAddDx() function.  
            </summary>
             <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">This argument provides for three different list sizes. Shortlist=1, Longlist=2, 
            Fulllist=3.</param>
            <param name="termtype">The termtype parameter restricts the returned list to the designated terminology type</param>
            <returns>The patient history is returned as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistActivateWordSearch(Medicomp.MedTermtypes)">
            <summary>
            This method retrieves records from the patient history pool that match the word search results and 
            the specified termtype.
            </summary>
            <seealso cref="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)"/>
            <param name="termtype">One of the <see cref="T:Medicomp.MedTermtypes">MedTermtypes</see> enumeration.</param>
            <returns>The list of patient history is returned as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddChapter(System.Int32,System.Int16)">
            <summary>
            Method equivalent to AddChapter for history pool finding additions.
            </summary>
            <param name="Seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="Chapter">The zero-based chapter number to assign.</param>
            <returns>False will be returned if an error is encountered.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            Similar to AddChart but for adding to history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">Minutes since birth.</param>
            <param name="duration">in minutes</param>
            <param name="prefix">The prefix qualifier code.</param>
            <param name="result">The result qualifier code.</param>
            <param name="scale">The scale field is usually calculated using the function CalcScale.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddDocName(System.Int32,System.String)">
            <summary>
            Similar to AddDocname but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddDocName(System.Int32,System.String)"/>
            <param name="docid">The identification numer of the provider.</param>
            <param name="name">The name of the provider as you want it to appear in the narration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddDx(System.Int32)">
            <summary>
            Similar to AddDx but for adding to the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddEncounter(System.String,System.Int32)">
            <summary>
            Similar to AddEncounter but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddEncounter(System.String,System.Int32)"/>
            <param name="encountertime">The encounter time to reference the encounter. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter 
            time is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. For example, '199805071610' 
            designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="docid">The docid of the provider responsible for the encounter. The HistAddDocname 
            method is used to associate a name with the docid.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddEpisode(System.Int32,System.String)">
            <summary>
            Similar to AddEpisode but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode string.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddFuList(System.String)">
            <summary>
            This is a complementary function used by selected Hist* retrieval methods when the BuildListMode 
            has the medFollowup bit set.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistCalculate"/>
            <seealso cref="M:Medicomp.Connection.HistWordSearch(System.String)"/>
            <seealso cref="M:Medicomp.Connection.HistActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.BuildListMode(Medicomp.BuildListModes)"/>
            <seealso cref="T:Medicomp.BuildListModes"/>
            <param name="medcinids">This passes a list of medcinids (separated by commas) to the medcin server.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The medcinids in the list and matching findings (and children) from the history pool will 
            then be included in the retrieved spreadsheet. The list of medcinids specified in this function 
            will stay in affect until another list is specified or a blank list is specified.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            This function's arguments are the same as the AddNarrate() function, except for the seq argument. 
            The seq argument is used in all the other HistAdd* functions to specify which chart record is to be modified
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.HistAddNote(System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.HistAddOrder(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, AddNarrate will return a 0.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When using HistAddNarrate() to add an unmapped test order/result or Rx to the history 
            pool, use the default medcinids listed below:
            <list type="bullet">
            	<term>test order use medcinid 186675</term>
            	<term>test result use medcinid 184607</term>
            	<term>prescription drug use medcinid 195027</term>
            	<term>other therapy use medcinid 195025</term>
            	<term>for unmapped allergies use medcinid 122299 with an 'AL' prefix</term>
            </list><para>For all of these medcinids that represent unmapped chart data, use the function 
            HistAddNote() to associate a free text string to describe the data (test/result/drug name). 
            Also use HistAddOrder() to supply an order id number that can be used to link tests with 
            results, or supply an Rx writer with its original id number to use for deletion, renewing, 
            or other status changes.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)">
            <summary>
            Similar to AddNarrate2 but for adding to the history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="medcinid">The unique Medcin identification for the finding.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, it will be ignored.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <param name="groupNumber">If you wish to assign the finding to a specific narrative group instead 
            of having the narrative engine determine the group using its internal algorithm, then pass the 
            group number you wish to assign. Otherwise, groupnumber should be 0. Note that once you make a 
            non-zero specification of groupnumber for a finding, the narrative engine will continue to use 
            that assigned group number until you restore dynamic group determination by passing a 0 value 
            (See the <see cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)">GroupNumber API</see>).</param>
            <param name="DecorationStyle">If you wish to provide decoration of the text phrase for this used 
            in the narrative presentation, pass one of the decoration style numbers your application set 
            up using the AddDecorationStyle API <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)"> See the 
            AddDecorationStyle API</see> for more details about text decoration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)">
            <summary>
            Similar to AddNarrate2Ex but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode string 
            <see cref="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)">as documented in AddEpisode</see>.</param>
            <param name="note">The note text to be added to the finding identified by the itemid. The text is 
            limited to the maximum length of a string. See the <see cref="M:Medicomp.Connection.AddNote(System.Int32,System.String)">
            AddNote API concerning marking of substrings</see> as plain text, RTF, and HTML for selectable output.</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the itemid.</param>
            <param name="valuestr">The value formated for display presentation.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr.</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalLow(System.Int32,System.String)">RangeNormalLow</see> 
            method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalHigh(System.Int32,System.String)">RangeNormalHigh </see> 
            method request for the finding.</param>
            <param name="lTag">The tag number to be added to the finding.</param>
            <param name="sTag">The tag text to be added to the finding identified by the itemid. 
            The text can be of any length.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that you can add either or both tag units. When the tag(s) is(are) added to the 
            generated text, the lTag will be presented before the sTag. An itemtag lTag field is 
            recommended when using narrative output generated in HTML, as the itemtag lTag field can be 
            used for the HREF link (the sTag field can also be used for the link; however, it can be 
            better used for showing additional data).
            <para>The sTag field can be composed of multiple fields, each field delimited by a distinct 
            character that appears as the first character of the string. The string can be emitted 
            appearing before the finding text or following the finding text by means of the ShowItemTag 
            method.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all 
            tags can be emitted under program control by using the <see cref="M:Medicomp.Connection.NarrateGroups(System.String)">
            NarrateGroups API </see> with a tag specifier along with the ShowItemTag method.
            An example of an itemtag string with multiple fields would be: 
            '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold data 
            on the provider originally entering data and the provider editing data. The fields could be 
            selectively narrated by using the NarrateGroups API.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddNote(System.Int32,System.String)">
            <summary>
            Similar to AddNote but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddNote(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="note">The marked or unmarked note text to be added to the 
            finding identified by the itemid. The text is limited to the maximum 
            length of a string.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Marking is implemented according to the following:
            <list type="bullet">
            <item>SOT control code followed by ASCII '0' – plain text</item>
            <item>SOT control code followed by ASCII '1' – RTF</item>
            <item>SOT control code followed by ASCII '2' – HTML</item></list>
            <para>SOT is the control code x'02' or chr$(2).</para>
            <para>Text with no marking, or marked as plain text, will be filtered 
            as noted below. Sub-strings will be interpreted as follows:</para>
            <list type="bullet">
            <item>No marker found – plain text</item>
            <item>Plain Text marker found – plain text until next marker or end of string.</item>
            <item>RTF marker found – RTF until next marker or end of string.</item>
            <item>HTML marker found – HTML text until next marker or end of string.</item></list>
            <para>The following indicates the handling of narration output:</para>
            <list type="bullet">
            <item>For a finding that has unmarked free text, filtering as noted below 
            will be applied.</item>
            <item>For a finding that has marked text, if a marked sub-string is present that 
            matches the current narrative output, it will be added to the finding's free 
            text presentation.</item>
            <item>For a finding that has marked text, if a marked sub-string is not present 
            that matches the current narrative output, the following procedure will 
            be used:
            <list type="bullet">
            <item>If marked plain text is present, emit the plain text filtered according to the criteria below</item>
            <item>Otherwise emit the only marked text present (in this case, only one sub-string was present).</item></list></item></list>
            <para>The server handler for AddNote() strips a terminating period from unmarked 
            note text in addition to the filtering noted below. For marked Plain Text, 
            only filtering is performed. Therefore if you do not want the handler to 
            remove a terminating period from plain text, prefix the plain text marker.</para>
            <para>Plain text notes will accept the tilde character ('~') as a logical new 
            line and will convert it, on outline or narrative format narrated output only, 
            to the appropriate line break for each of the narrative output options 
            (plain text, Rich text, or HTML). If you want to have a tilde in the note text 
            appear as a tilde, then provide two tildes.</para>
            <para>Notes attached to findings are considered free text and are presented 
            using the styling of the Free Text element (see the rtfStyle API). 
            If the narration output is HTML or RTF, the narration generator will 
            filter the text and perform character substitutions per the following 
            table so rendering engines will correctly present the output:</para>
            <list type="table">
            <listheader><term>Character</term><description>HTML output</description><description>RTF output</description></listheader>
            <item><term>back slash</term><description>No change</description><description>back slash back slash</description></item>
            <item><term>left brace</term><description>No change</description><description>back slash left brace</description></item>
            <item><term>right brace</term><description>No change</description><description>back slash right brace</description></item>
            <item><term>ampersand</term><description>ampersand amp</description><description>No change</description></item>
            <item><term>left angle bracket</term><description>ampersand lt</description><description>No change</description></item>
            <item><term>right angle bracket</term><description>ampersand gt</description><description>No change</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddOrder(System.Int32,System.String)">
            <summary>
            This method attaches the originating order id to a patient history record identified by seq. This 
            is a mechanism to link a test order with its respective results or to save the order id for 
            an external Rx writer.
            </summary>
             <seealso cref="M:Medicomp.Connection.HistAddNote(System.Int32,System.String)"/>
             <seealso cref="M:Medicomp.Connection.HistAddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
             <seealso cref="M:Medicomp.Connection.HistRetrieveOrder(System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="orderid">The order identification string to assign.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The originating test order record should have the 'O' prefix, the test results records 
            have no prefix, and the test review record should have the 'R' prefix in the HistAddNarrate() 
            call. The order id may also come from an external Rx writer. This provides the external 
            reference id.<para>The seq id is the field set in the HistAddNarrate() function to represent an id 
            for a history record. When calling HistAddNarrate() to add the test order/result or Rx to the 
            history pool, a medcinid must be supplied. If a test order is not mapped to a medcinid use 
            medcinid 186675 in the HistAddNarrate() call. If a test result is not mapped to a medcinid use 
            medcinid 184607 in the HistAddNarrate() call. If an Rx Order is not mapped to a medcinid and 
            it is a prescription drug use medcinid 195027, if it is any other therapy use medcinid 195025. 
            For all of these medcinids that represent for unmapped chart data, use the function HistAddNote() 
            to associate a free text string to describe the patient history data record.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddRangeScale(System.Int32,System.Int16)">
            <summary>
            This method is used to add the RangeScale for a value to the specified history pool record.
            </summary>
            <param name="seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="scale">The scale field is usually calculated using the function CalcScale.</param>
            <returns>False will be returned if an error is encountered.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddRxstr(System.Int32,System.String)">
            <summary>
            Similar to AddRxstr but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddRxstr(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the seq argument</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddSequence(System.Int32,System.Int16)">
            <summary>
            This method is used to add a sequence number to an encounter finding in the history pool
            </summary>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="Sequence">The sequence number to add.</param>
            <returns></returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddSpecifier(System.Int32,System.String)">
            <summary>
            This method is used to add a specifier string to an encounter finding in the history pool.
            </summary>
            <param name="Seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="Specifier">The semicolon delimited list of codespec lists.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>A codespec list is a comma-delimited list of codes. The specifier property 
            can contain more than one list of codes, with each list delimited 
            using a semicolon. The specifier starts with a field indicating the codetype 
            of the code used to obtain the lists (ex: 23;A,B,D;AB,C,DA). The specifier is used in
            conjunction with a DSM-IV code to add additional uncoded textual content to 
            commonly used in a finding's narration. The lists would be in sequence with 
            a corresponding codespec record for the DSM-IV code in question.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddValue(System.Int32,System.String,System.String,System.Double,System.Double)">
            <summary>
            Similar to AddValue but for adding to history pool.
             <seealso cref="M:Medicomp.Connection.AddValue(System.Int32,System.String,System.String,System.Double,System.Double)"/>
            </summary>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="valuestr">The value formated for display presentation.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr.</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous RangeNormalLow method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous RangeNormalHigh method request for the finding.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistCalculate">
            <summary>
            This method performs the IP calculation and creates lists of from the patient's history pool. 
            These lists are reserved until HistCalculate() is called again, which would then take into 
            account any new data added via the HistAddChart() function.
            </summary>
             <seealso cref="M:Medicomp.Connection.Calculate"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistClearChart(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method has been replaced by HistClearChartFindings.
            </summary>
             <seealso cref="M:Medicomp.Connection.HistClearChartFindings"/>
            <param name="age">Patient’s age in minutes. The 15768000 is 80 year old in minutes 
            (30yrs * 365* 1440). This method is precise enough to support the algorithms.</param>
            <param name="gender">Patient’s gender. 'M' = Male, 'F' = Female, 'U' = unknown.  
            Use unknown when prompting should supply non-gender specific findings.</param>
            <param name="ethnic">One of the qualifier codes for ethnicity.</param>
            <param name="religion">One of the qualifier codes for religion.</param>
            <param name="race">One of the qualifier coes for race.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistClearChartFindings">
            <summary>
            The HistClearChartFindings() method clears the findings passed via HistAddChart().
            </summary>
             <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistClearDx">
            <summary>
            Clears the list of diagnoses, problems, and syndromes accumulated from invoking the HistAddDx() function.
            </summary>
             <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistCodeFromItem(System.Int32,Medicomp.CodeLinks,System.Int32)">
            <summary>
            This method obtains the code corresponding to the encounter finding identified by Itemid
            </summary>
            <param name="seq">The unique item identification for the encounter finding in question.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations.</param>
            <param name="Mode">Specifies the type of data returned. See table below.</param>
            <returns>The data corresponding to the CodeSet and Mode is returned for the Item.</returns>
            <remarks>This table enumerates the values supported for the Mode parameter:
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>80</term><description>If the code relating to CodeSet varies by parameter, the method will determine
             the code based on the CodeParm parameter values. If the code does not vary by parameter,
              then CodeFromMedcin(ItemId:Medcinid,CodeSet,0) will provide the string returned.</description></item>
            <item><term>All other values</term><description>Identical to CodeFromMedcin(Itemid:Medcinid,CodeSet,Mode)
             using the Medcinid of the finding identified by the Itemid.</description></item>
            </list>
            </p></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistCreatePool(System.String)">
            <summary>
            Create a shared history pool for this patient.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistReleasePool"/>
            <param name="patientid">Specifies the patient identification string.</param>
            <returns>The return code has three states: Zero means failure. Greater than zero indicates 
            successful creation of a new pool. This return code is the pool's identifier.  Less than zero 
            means a pool already exists for this patient, so loading of the patient’s history may already 
            be completed. The poolid is the positive of this return code.</returns>
            <remarks>A pool is a temporary in-memory collection of a single patient's entire medical record. 
            All of the Hist* functions operate on this pool. The pool may be shared with other 
            applications or with other workstations that have the same current patient.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistDataFilter(Medicomp.DataFilterMode,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method is used to pass parameters to filter history pool data extraction.
            </summary>
            <param name="Mode">Ored enumeration indicating what parameters have values passed.
            The server will ignore any parameter without its associated bit set.</param>
            <param name="Mask">A value to mask each history pool item's usermask value.
            The usermask value will be anded with the mask value; if the result is non-zero,
            the history pool item will be extracted.</param>
            <param name="DateFrom">The earliest date to extract data. If not empty, an item's
            encounter time must be greater than or equal to this date.</param>
            <param name="DateTo">The latest date to extract data. If not empty, an item's
            encounter time must be less than or equal to this date.</param>
            <param name="TimeFrom">The earliest time to extract data. If not empty, an item's
            time portion of the encounter time must be greater than or equal to this time.</param>
            <param name="TimeTo">The latest time to extract data. If not empty, an item's
            time portion of the encounter time must be less than or equal to this time.</param>
            <returns>False will be returned if an error is encountered.</returns>
            <remarks>The parameters that are passed remain in effect until changed.
            Dates are passed in Medcin date format (YYYYMMDDHHIISS). Times are pased in 
            Medcin time format (HHIISS).
            <p>Data filters apply only to HistList and history prompting methods.</p></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistDelete(System.Int32)">
            <summary>
            Deletes the chart record added via HistAddNarrate() for the specified seq argument.
            </summary>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistDeleteEncounter(System.String)">
            <summary>
            This method deletes all records with the specified encountertime from the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistAddEncounter(System.String,System.Int32)"/>
            <param name="encountertime">The encounter time to reference the encounter.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistEncounterList">
            <summary>
            This method returns a list of all encountertimes that are in the history pool. The encountertimes are 
            delimited with a tab character.
            </summary>
            <returns>A string containg the list of encounters is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistFlush">
            <summary>
            This method transmits remaining history data in the internal buffer to the Medcin server.
            <b>This must be the last history API call invoked.</b>
            </summary>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistGetGroupNumber(System.Int32)">
            <summary>
            This method is used to recover the narrative group number assigned to the history pool record.
            </summary>
            <param name="seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <returns>The narrative group number assigned to the history pool record is returned. This will be 0 if an error is encountered.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistGetItemData(System.Int32,System.String)">
            <summary>
            This method can be used to retrieve a string that contains the field data passed to the server 
            using the various data histadd functions for an item. The retreived string is similar to that 
            returned as the extended prefix argument in a response list; however in this method, there is 
            no truncation of data. Thus, if you need to retrieve entire data of a history item (such as 
            the note text string), this method may be useful.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetItemData(System.Int32,System.String)"/>
            <param name="seq">This parameter specifies the sequence number that was used to identify the item 
            in the various histadd functions. If the Seq passed is not present, an empty string is returned.</param>
            <param name="fields">This parameter specifies the data elements that are to be returned; only those 
            elements specified in the argument will be returned and their appearance in the string will be 
            in the order of the characters specified in the fields argument. </param>
            <returns>The fields specified. Data elements in the returned string are separated with tabs.</returns>
            <remarks>The following fields are defined:
            <list type="table">
            <listheader><term>Element Character</term><description>Element Description</description></listheader>
            <item><term>a</term><description>status</description></item>
            <item><term>B</term><description>Enter doc</description></item>
            <item><term>b</term><description>referred to doc</description></item>
            <item><term>c</term><description>chartflag</description></item>
            <item><term>d</term><description>duration</description></item>
            <item><term>e</term><description>encountertime</description></item>
            <item><term>G</term><description>String Tag</description></item>
            <item><term>i</term><description>Medcinid</description></item>
            <item><term>k</term><description>episode</description></item>
            <item><term>l</term><description>RangeScale</description></item>
            <item><term>m</term><description>modifier</description></item>
            <item><term>n</term><description>note</description></item>
            <item><term>o</term><description>onset</description></item>
            <item><term>p</term><description>prefix</description></item>
            <item><term>P</term><description>Narrative Group</description></item>
            <item><term>r</term><description>Rx string</description></item>
            <item><term>t</term><description>result</description></item>
            <item><term>u</term><description>unit of measure</description></item>
            <item><term>v</term><description>value string</description></item>
            <item><term>y</term><description>range normal low</description></item>
            <item><term>z</term><description>range normal high</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistGridLayout(Medicomp.GridLayoutMode,Medicomp.DatePrecisions,Medicomp.SortOrder,System.String)">
            <summary>
            This method is used to pass Grid Layout parameters that control the spreadsheet build list mode.
            </summary>
            <param name="Mode">Ored enumeration indicating what parameters have values passed.
            The server will ignore any parameter without its associated bit set.</param>
            <param name="Precision">This parameter indicates the precision of a column of data.
            All encounters with an encounter time that matches up to the precision will be included 
            in the same column. The server defauls to medPrecisionMinute on a new connection.</param>
            <param name="DateOrder">This specifies the column order for historical data. 
            The server defaults to SortDescending on a new connection.</param>
            <param name="EncounterTime">This parameter is currently unused.</param>
            <returns>False will be returned if an error is encountered.</returns>
            <remarks>The parameters that are passed remain in effect until changed.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistGroupNumber(System.Int32,Medicomp.MedcinGroups)">
            <summary>
            Similar to GroupNumber but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="groupnumber">The new value of the group number to be assigned.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistHaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This method is used to determine which termtypes of findings appear in the respective reserved lists 
            of the history pool based on the listsize argument. This function returns the Boolean value of 
            true if the requested  listsize contains the requested termtype. Note that the termtype
            ALL_TYPES will return true if any termtypes exist in the list specified by the termtype argument.
            </summary>
             <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">The list size in question.</param>
            <param name="termtype">The terminology type in question.</param>
            <returns>Returns non-zero if the requested list would have items.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistHaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            Similar to HaveList but for referencing the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">The list size in question.</param>
            <param name="termtype">The terminology type in question.</param>
            <returns>This function returns the Boolean value of true if the requested listsize 
            contains the requested termtype.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistHaveWordSearch(Medicomp.MedTermtypes)">
            <summary>
            Similar to HaveWordSearch but for the History Pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)"/>
            <param name="termtype">One of the <see cref="T:Medicomp.MedTermtypes">medTermtypes</see> for 
            checking the availability of a list.</param>
            <returns>The method returns non-zero if the requested termtype is available, otherwise 0. 
            Note that the termtype medTermAll will return true if any termtypes exist in the list specified 
            by the termtype argument.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistLinkFindings(System.Int32,System.String,System.Int32)">
            <summary>
            Similar to LinkFindings but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.LinkFindings(System.Int32,System.String,System.Int32)"/>
            <param name="seq1">The seq1 argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="linktype">For linking two findings, this is the referenced linkage type and must be 
            one of the qualifier codes in the qualifier table for codename <c>LINKS</c>, or a string 
            containing a single minus sign ('-') that is used to unlink two previously linked findings. 
            When the LINKS code description contains a '~V', it indicates that the linktype usually 
            includes a duration-type time period that represents the time period between the two findings 
            linked. The duration format is the string form of a numeric value followed by a precision 
            character: 'Y' for years, 'M' for months, 'W” for weeks, 'D' for days, 'H' for hours, 'I' for 
            minutes, 'S' for seconds. For example, <c>2H</c> is interpreted as two hours, <c>7I</c> is 
            interpreted as seven minutes. The duration string should be appended to the linkage type code. 
            Note that linktype can also be a null string that will force the itemid2 finding to be narrated 
            immediately following the itemid1 finding but without any connection string. For setting a link 
            group code for a finding, this is the single character designating the link group.</param>
            <param name="seq2">The seq2 argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistList(System.String,System.Int16)">
            <summary>
            This method is invoked to retrieve the children findings for the passed medcinid from the patient 
            history pool. This function behaves exactly like the HistActivate function used for intelligent 
            prompting, with the exception that there is no listsize or termtype.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="medcinids">A comma separated list of medcinids or user-defined finding IDs to locate.
            Medcinids passed as an empty string implies all history pool entries are to be returned,
            subject to the limits imposed by data filtering. Mode would then be irrelevant in this case.
            The server will not include root-level findings in the response list. The delimited list may also
            designate a custom layout that would be used to produce a custom flow sheet using the buildlist
            spreadsheet mode. This is discussed below. Each finding in the list can be prefixed with a
            character that forces a specific override for that Medcinid. These overrides are as follows:
            <list type="bullet">
            <item>An asterisk designates that if the mode is less than 6, set the mode to 6 for this finding.
            This allows the finding to include itself as well as all children findings to appear in the response
            list even if the mode was set to 0-4.</item>
            <item>An ampersand designates that the Medcinid should be included in the response list even if
            no history data matches. This allows the finding to appear in the respnse list even if the mode is 0-4.</item>
            <item>A number sign designates both of the above actions.</item>
            </list></param>
            <param name="mode">Specifies different mechanisms for extracting history data:
            <list type="table">
            <listheader><term>Mode</term><description>Description of Value</description></listheader>
            <item><term>0</term><description>All history matching the medcinids is returned.</description></item>
            <item><term>1</term><description>Only children of the passed medcinids will be returned, not grand-children or their siblings.</description></item>
            <item><term>2</term><description>Retrieve all levels of children of the passed medcinids from the patient history pool.</description></item>
            <item><term>3</term><description>All data from the above modes is returned.</description></item>
            <item><term>4</term><description>All above and additional history in the same subgroups as the medcinids as defined in the document groups.doc.</description></item>
            <item><term>5</term><description>All history matching medcinid and all medcinids in the list are returned.</description></item>
            <item><term>6</term><description>All of 5 and all levels of children are returned.</description></item>
            <item><term>7</term><description>All of 6 plus additional history in the same sub-groups as the medcinids.</description></item>
            </list></param>
            <returns>Data is returned in accordance with the BuildlistMode() settings.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistLocate(System.Int32,System.Int16)">
            <summary>
            This method is invoked to retrieve the children findings for the passed medcinid from the 
            patient history pool.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="medcinid">medcinid or user-defined finding ID to locate</param>
            <param name="mode">If 0 then all history matching the medcinid is returned. If 1, then only the 
            children of the passed medcinid will be returned, not grand-children or their siblings. If 2, 
            then retrieve all levels of children of the passed medcinid from the patient history pool. 
            If 3 then all data from the above modes is returned. If 4 then all above and additional history 
            in the same group as the medcinid as defined in the document groups.doc.</param>
            <returns>Data is returned in accordance with the BuildlistMode() settings.</returns>
            <remarks>You can retrieve all of the findings in the history pool by terminology type by calling 
            HistLocate six times – each with one of the Medcinids corresponding to the base nodekey for a 
            terminology type. These Medcinids are shown in the following list for your convenience:
            <list type="bullet">
            	<item>Symptoms: 2952</item>
            	<item>History: 5141</item>
            	<item>Physical: 6000</item>
            	<item>Tests: 102905</item>
            	<item>Diagnoses: 39448</item>
            	<item>Therapy: 40000</item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistNarrate(System.String)">
            <summary>
            Similar to Narrate(); HistNarrate() references the history pool.
            </summary>
            <param name="encountertime">Specify the history pool encounter to narrate.</param>
            <returns>Returns the narration based on current parameters.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistReleasePool">
            <summary>
            Disassociates the history pool with current session. If the history pool is not in use by any other 
            session, the current session's history pool is deallocated. The current session may also be 
            looked upon as the current connection or as closed connection that has it's state saved.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistCreatePool(System.String)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistRemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            Similar to RemoveChart but for adding to history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">minutes since birth</param>
            <param name="duration">in minutes</param>
            <param name="prefix">the prefix qualifier code</param>
            <param name="result">the result qualifier code</param>
            <param name="scale">The scale field is calculated using the function CalcScale</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistRetrieveEncounter(System.String)">
            <summary>
            This method is invoked to retrieve all the records associated with an encountertime that are in the 
            history pool.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="encountertime">The encounter time to reference the encounter. The format is 
            'YYYYMMDDHHIISS'</param>
            <returns>Data is returned in accordance with the BuildlistMode() settings. </returns>
        </member>
        <member name="M:Medicomp.IConnection.HistRetrieveOrder(System.String)">
            <summary>
            This method is invoked to retrieve all the records associated with a test order, test results, test 
            review, or any other finding such as an Rx. The linking mechanism is the Order id# that is passed 
            into the history pool using the HistAddOrder() function.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistAddOrder(System.Int32,System.String)"/>
            <param name="orderid">Id of original test order. Test Order record has 'O' prefix.
            Result records have no prefix, test reviewed record has an 'R' prefix</param>
            <returns>This returns a list of all records matching the orderid.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistSetDecorationStyle(System.Int32,System.Int16)">
            <summary>
            Similar to SetDecorationStyle but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetDecorationStyle(System.Int32,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="DecorationStyle">Specify the decoration style to apply.
            See <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)">AddDecorationStyle</see> for additional information.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistSetDoctorID(Medicomp.DocCodes,System.Int32)">
            <summary>
            Similar to SetDoctorid but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetDoctorid(Medicomp.DocCodes,System.Int32)"/>
            <param name="code">Code is one of the <see cref="T:Medicomp.DocCodes">Medicomp.DocCodes</see> enumerations.</param>
            <param name="docid">Specifies the doctor identification for the code.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Particular narration groups (G_REFERDX, G_PLAN, G_ASSESS, G_EDUCATION, and G_DISCUSS) 
            will sequence findings by the entering data doctor identification so that the narration can 
            present sub-groupings. Where the doctor string is cited in the narration, the correct doctor 
            name for the sub-grouping will be emitted.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistSetPoolId(System.Int32)">
            <summary>
            Establishes which history pool to use. 
            </summary>
            <param name="histpoolid">The number of the history pool to attach to.</param>
            <returns>If the history pool identified by poolid does not exist, the return code is 0.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistSetPoolPid(System.String)">
            <summary>
            Establishes which history pool to use by patient identifier.
            </summary>
            <param name="patientid">The patient identification string used to create the history pool.</param>
            <returns>If the history pool identified by the patientid does not exist, the return code is 0.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistSetSubGroup(System.Int32,System.Int16)">
            <summary>
            Similar to SetSubGroup but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="usersubgroup">The value of the usersubgroup number to be assigned.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistTranscribeItem(System.String,System.String,System.Int32)">
            <summary>
            Similar to <see cref="M:Medicomp.Connection.TranscribeItem(System.String,System.String,System.Int32)">TranscribeItem</see> but for the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.TranscribeItem(System.String,System.String,System.Int32)"/>
            <param name="texttype">'P' to request phrase text, or 'S' to request sentence text.</param>
            <param name="lingo">'D' for doctor or professional language, or 'P' for patient or lay language.</param>
            <param name="seq">This number should be one of the seq values previously used to add gthe history item;
            it is used to reference the desired finding.</param>
            <returns>The narrated finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistWordSearch(System.String)">
            <summary>
            Similar to WordSearch but for the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.WordSearch(System.String)"/>
            <param name="words">String of words to search for. Words are 'anded', meaning a finding has to 
            have all words.</param>
            <returns>Returns how many related terms were found.</returns>
            <remarks>This function creates a list of patient history that contains the search words.
            Word completion also occurs; a search word 'leg' will also locate findings that contain the word 'legs'.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetProperty(System.Int32,System.String,System.Int32)">
            <summary>
            Function to obtain named properties
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="propertyName">The case-sensitive name of the property to be retrieved.</param>
            <param name="mode">Reserved for future use</param>
            <returns>A string containing the property information requested.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ImageSearch(System.String,System.String)">
            <summary>
            This method returns a list of imageids that match the keywords.
            </summary>
            <param name="Keywords">One or more key words to be interpreted as an image 
            description matching any of the words passed.</param>
            <param name="Systems">A comma delimited list of image systems to limit the search. 
            An empty string implies a search of all image systems.</param>
            <returns>A comma-delimited list of image numbers is returned.</returns>
            <remarks>
            This method returns the identification number for each image where any of 
            the keywords match a word of the image description; the patient's age and 
            gender are used to determine appropriateness of each image. The search can 
            be limited to those image systems passed as a comma-delimited string in the 
            Systems argument. If the Systems argument is an empty string, then all systems 
            will be searched. The patient’s age and gender are determined from the last 
            SetPatient API call.
            <para>The list of images is returned as a comma-delimited string containing 
            each image number that is successfully matched by any of the words in Keywords. 
            The search algorithm uses a case-insensitive match of a keyword to each word 
            in an image description; word completion is used when the keyword is shorter 
            than an image description word. If no images match the keywords, an empty 
            string is returned.</para>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.ImageSupport">
            <summary>
            This function is used to determine if imaging is supported by the server you are connected to.
            </summary>
            <returns>ImageSupport returns a 1 if imaging support is available; otherwise, it returns a 0.</returns>
        </member>
        <member name="M:Medicomp.IConnection.IsOpen">
            <summary>
            This method can be used to determine if the component is connected to a Medcin server.
            </summary>
            <returns>Returns True if connected; False if not.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ItemlTag(System.Int32)">
            <summary>
            This method is used to obtain the item long tag for a finding added to the narrative collection 
            by AddNarrate() or AddNarrate2.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate 
            or the itemid assigned by your aspplication.</param>
            <returns>The item's lTag is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ItemsTag(System.Int32)">
            <summary>
            This method is used to obtain the item string tag for a finding added to the narrative collection 
            by AddNarrate() or AddNarrate2.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate or 
            the itemid assigned by your application.</param>
            <returns>The item string tag for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.LinkFindings(System.Int32,System.String,System.Int32)">
            <summary>
            This method can be used to group a set of related findings for narrative presentation,
            or to associate two findings for the narrative.
            </summary>
            <param name="itemid1">This number should be one of the values previously returned by AddNarrate 
            and represents the finding to be used for the left-hand side of the linked pair or the itemid 
            of the finding to be assigned a link group code.</param>
            <param name="linktype">For linking two findings, this is the referenced linkage type and must be 
            one of the qualifier codes in the qualifier table for codename <c>LINKS</c>, or a string 
            containing a single minus sign ('-') that is used to unlink two previously linked findings. 
            When the LINKS code description contains a '~V', it indicates that the linktype usually 
            includes a duration-type time period that represents the time period between the two findings 
            linked. The duration format is the string form of a numeric value followed by a precision 
            character: 'Y' for years, 'M' for months, 'W” for weeks, 'D' for days, 'H' for hours, 'I' for 
            minutes, 'S' for seconds. For example, <c>2H</c> is interpreted as two hours, <c>7I</c> is 
            interpreted as seven minutes. The duration string should be appended to the linkage type code. 
            Note that linktype can also be a null string that will force the itemid2 finding to be narrated 
            immediately following the itemid1 finding but without any connection string. For setting a link 
            group code for a finding, this is the single character designating the link group.</param>
            <param name="itemid2">For linking two findings, this number should be one of the values previously 
            returned by AddNarrate and represents the finding to be used for the right-hand side of the 
            linked pair. For setting a link group code to itemid1, itemid2 must be a zero value.</param>
            <returns>See remarks below.</returns>
            <remarks>The group and group sequence of itemid2 will be changed to that of itemid1 when two 
            findings are linked. In addition, if the group is Family History, the prefix of itemid2 will 
            be changed to G_FAM_HIST (family history) so that it can be properly narrated. The revised 
            prefix, if any, will be returned by the method call if no link error occurs. It is the 
            responsibility of the application program to update any presentation displays that place the 
            itemid2 into a grouping; the new group assignment can be recovered with a GroupNumbuer method 
            call. The original prefix, group, and group sequence will be restored if the two linked 
            findings are unlinked.
            <para>For example, if a fever finding was linked with a chest pain finding using the <c>AW</c> LINKS 
            code, the narrative generation would be structured as, <i>fever associated with chest pain</i>. 
            If a headache finding was linked with a chest pain finding using <c>FL2H</c>c> as the linkage 
            type, the narrative generation would be structured as, <i>headache followed two hours later by 
            chest pain</i>.</para>
            <para>Any two distinct findings in the narrative finding collection can be linked together. The 
            finding represented by itemid2 will always be narrated immediately following the finding 
            narrated by itemid1; thus, a finding may appear in a group other than its normal grouping.</para>
            <para>When two or more related findings are assigned to a link group, they will be sequentially 
            positioned in the narrative presentation. Related findings are findings that have the same 
            level 1 parent (i.e. matching nodekeys of length 4).</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.Management(System.Int32)">
            <summary>
            Recommended quantity of minutes that a follow up should be scheduled after this finding is entered. 
            This is used for patient management. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the management follow up time in minutes</returns>
        </member>
        <member name="M:Medicomp.IConnection.MedcinEnd">
            <summary>
            This method closes the socket connection and de-allocates memory. 
            This should be invoked just before the program terminates.
            </summary>
        </member>
        <member name="M:Medicomp.IConnection.MedcinInit">
            <summary>
            This method performs initialization and should be the first API called.
            </summary>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.MedispanEx(System.Int32,System.String)">
            <summary>
            This method obtains a comma-delimited Medcinid list given a Medispanid and details.
            </summary>
            <param name="MedispanID">The Medispan identification.</param>
            <param name="Details">To be determined.</param>
            <returns>The list of Medcinids is returned.</returns>
            <remarks><u>Note that this method currently has no implementation</u>.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.MedispanIds(System.Int32)">
            <summary>
            This method obtains a list of Medispan ids mapped to Medcin terms. 
            </summary>
            <seealso cref="M:Medicomp.Connection.CodeFromMedcin(System.Int32,Medicomp.CodeLinks,System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns a comma separated list of mapped Medispanids. </returns>
        </member>
        <member name="M:Medicomp.IConnection.Narrate">
            <summary>
            This method obtains the narrative for the current collection of findings previously added to the 
            narrative collection. The generation will use the current states of NarrativeContext, 
            NarrativeFormat, NarrativeOutput, ShowMedcinid, and ShowItemid.
            </summary>
            <seealso cref="M:Medicomp.Connection.NarrateEx(Medicomp.NarrateOptions,Medicomp.NarrativeContexts,Medicomp.NarrativeFormats,Medicomp.NarrativeOutputs,Medicomp.LinkPMHs,Medicomp.ShowOptions,Medicomp.TimedSections,System.String)"/>
            <returns>A string containing the narration generated using the current parameters is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.NarrateEx(Medicomp.NarrateOptions,Medicomp.NarrativeContexts,Medicomp.NarrativeFormats,Medicomp.NarrativeOutputs,Medicomp.LinkPMHs,Medicomp.ShowOptions,Medicomp.TimedSections,System.String)">
            <summary>
            This method sets the current states of NarrateOption, NarrativeContext, NarrativeFormat, 
            NarrativeOutput, LinkPMH, Show(Medcinid, Itemid, and Tag), TimedSections, and NarrateGroups 
            to the values passed in the parameter list. It then generates the narrative for the current 
            collection of findings previously added to the narrative collection as if Narrate() was invoked.
            </summary>
            <seealso cref="M:Medicomp.Connection.Narrate"/>
            <seealso cref="M:Medicomp.Connection.SetNarrateOptions(Medicomp.NarrateOptions)"/>
            <seealso cref="M:Medicomp.Connection.SetNarrativeContext(Medicomp.NarrativeContexts)"/>
            <seealso cref="M:Medicomp.Connection.SetNarrativeFormat(Medicomp.NarrativeFormats)"/>
            <seealso cref="M:Medicomp.Connection.SetNarrativeOutput(Medicomp.NarrativeOutputs)"/>
            <seealso cref="M:Medicomp.Connection.SetShowMedcinid(System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.SetShowItemid(System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <seealso cref="M:Medicomp.Connection.SetTimedSections(Medicomp.TimedSections)"/>
            <seealso cref="M:Medicomp.Connection.NarrateGroups(System.String)"/>
            <param name="Options">Any combination of the <see cref="T:Medicomp.NarrateOptions">NarrateOptions</see> enumeration.</param>
            <param name="Context">One of the <see cref="T:Medicomp.NarrativeContexts">NarrateContexts</see> enumeration.</param>
            <param name="Format">One of the <see cref="T:Medicomp.NarrativeFormats">NarrateFormatss</see> enumeration.</param>
            <param name="Output">One of the <see cref="T:Medicomp.NarrativeOutputs">NarrateOutputs</see> enumeration.</param>
            <param name="LinkPMH">If this parameter is non-zero, the original values of the other parameters
            will be restored before the method returns. If this parameter is 0, the passed values will be retained.</param>
            <param name="Show">Any combination of the <see cref="T:Medicomp.ShowOptions">ShowOptions</see> enumeration.</param>
            <param name="Timed">One of the <see cref="T:Medicomp.TimedSections">TimedSections</see> enumeration.</param>
            <param name="Groups">The string designating the groups to narrate.</param>
            <returns>A string containing the narration generated using the passed parameters is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.NarrateGroups(System.String)">
            <summary>
            This method is used to restrict the narrative generation to a specific set of groups or to specify 
            what fields of itemtag strings are to be emitted during a narration.
            </summary>
            <seealso cref="M:Medicomp.Connection.NarrateEx(Medicomp.NarrateOptions,Medicomp.NarrativeContexts,Medicomp.NarrativeFormats,Medicomp.NarrativeOutputs,Medicomp.LinkPMHs,Medicomp.ShowOptions,Medicomp.TimedSections,System.String)"/>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <param name="NewValue">The groups you wish to specify are passed as a series of range values encoded 
            in a string. For example, to restrict the narrative to Groups 2 through 5, 7, 9 through 15, 
            and 22, enter a string of <c>2-5,7,9-15,22</c>. The string will be parsed until the end of the 
            string is reached, or an invalid syntax is detected. If your range values are malformed, no 
            error will be generated; however, ranges interpreted prior to an invalid syntax will be 
            established for subsequent narrations.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>To narrate all groups, use a string of '1-64'. Note that a string with a single zero 
            character ('0') will also be interpreted as specifying all groups. If NewValue is a null string, 
            then no change from the previous Group setting will be interpreted. This may be useful when 
            passing the parameter in a NarrateEx function.
            <para>To use the API to specify what fields of string tags should appear in a narration, the NewValue 
            string should have a 'T' or 't' as the first character. Thus, an NewValue string of 
            <c>T1,3-5</c> would specify that fields 1, 3, 4, and 5 of itemtag strings would appear for 
            each finding if itemtag strings are turned on with the ShowItemTag API.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.NextUdf">
            <summary>
            This method returns the next user-finding id to use when creating a new user-finding.
            </summary>
            <returns>Returns the next available user-finding id.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Nodekey(System.Int32)">
            <summary>
            This method obtains the Medcin nodekey for the given Medcin finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The nodekey is returned if successful; otherwise an empty string.</returns>
            <remarks>The nodekey uniquely identifies a medical term and also indicates the hierarchical 
            level of  the term. The nodekey represents 10 levels of hierarchy (0-9), each level being 
            2 bytes. The length of the nodekey is equal to (level + 1) * 2.  Nodekey  'ABCD' is a 
            parent of 'ABCD*'. In this documentation, higher level findings refer to nodekeys that 
            are parents, grandparents, etc. For example 'AA' is a parent of 'AABC', but 'AA' is not 
            a parent of 'ABBC'. Lower level findings are children, grandchildren, etc.  Lower level 
            findings always convey more detailed medical information than their parent. For example. 
            the parent 'cough' would have children like 'cough which occurs after eating' or 'cough 
            which is worse in the morning'.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Nodelevel(System.Int32)">
            <summary>
            Level of nodekey; 0-9 are valid values.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the node level of the finding</returns>
            <remarks>Level is useful for accessing the children of a finding, without additionally 
            accessing grandchildren and their great grandchildren and so on. Children of a finding 
            will have a longer nodekey, and each child's nodekey will exactly match up to the entire 
            length of the parent's nodekey, and children will have a level that is 1 greater than the 
            parent. Grandchildren have a level that is 2 greater than the parent, and so on with their 
            children. The length of the nodekey is equal to (level + 1) * 2.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Nomin(System.Int32)">
            <summary>
            Text description of term as shown in the publication 'MEDCIN a New Nomenclature', 
            published by Springer Verlog.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
            <remarks>The 'Nomin' string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Nvoice(System.Int32)">
            <summary>
            Concise 'Nomin' form description of term that has minimal conflicts for voice recognition
            systems using the string as a command.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Paraflow(System.Int32)">
            <summary>
            Recommended level of nodekey for terminating paragraph text flow for findings in this 
            nodekey's hierarchy, given no other prevailing conditions for continuing the paragraph.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the paragraph flow level for the finding</returns>
        </member>
        <member name="M:Medicomp.IConnection.ParagraphStyle(System.Int16,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,Medicomp.RTFcolors,Medicomp.BorderFrames,System.Int16)">
            <summary>
            This method is used to set the parameters of a designated paragraph style for use in Rich Text or 
            HTML output. The style parameter becomes the reference used in the  rtfStyle method to associate
            a designated  paragraph style to a textual element. Note that the same style can be applied
            to more than  one textual element.
            </summary>
            <seealso cref="M:Medicomp.Connection.RtfStyle(Medicomp.RTFelements,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes,System.Int16,System.String)"/>
            <param name="Style">The style identifier to which the parameters pertain.</param>
            <param name="marginTop">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="marginLeft">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="marginBottom">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="marginRight">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="Indent">The indent parameter in units of inches refers to the first line only.</param>
            <param name="Alignment">Alignment is 'L', 'C', 'R', or 'J' for left, centered, right, or justified. 
            Note that HTML output does not support justified alignment.</param>
            <param name="borderWidth">BorderWidth is the width in pixels of a border to surround the paragraph. 
            These values will be converted to twips at a factor of 20 twips per pixel for Rich Text output. 
            The acceptable range for borderWidth is 0 to 8 (0 implies no border).</param>
            <param name="borderColor">The color of the border.
            See <see cref="T:Medicomp.RTFcolors">Medicomp.RTFcolors</see> for the allowable choices.</param>
            <param name="borderFrame">Specifies the border surrounding the paragraph.
            See <see cref="T:Medicomp.BorderFrames">Medicomp.BorderFrames</see> for the allowable choices.</param>
            <param name="borderSpacing">BorderSpacing is the amount of white space to leave between all sides 
            of the paragraph and the border. Its value is expressed in pixels, which will be converted to 
            twips at a factor of 20 twips per pixel for Rich Text output.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Borders are applied only to table elements for HTML output, and all elements for RTF output. 
            Note, however, that the Microsoft RichText control does not support borders. Nevertheless, 
            the RTF output from the narrative generator emits the RTF border codes (the result may be 
            seen in Microsoft Word). For NarrativeOutput in HTML, the only valid combinations are (words in 
            parentheses indicate HTML equivalent):
            <list type="number">
            <item>medFrameLeft, medFrameTop, medFrameRight, medFrameBottom (BOX)</item>
            <item>medFrameRight, medFrameLeft (VSIDES)</item>
            <item>medFrameBottom, medFrameTop (HSIDES)</item>
            <item>medFrameTop (ABOVE)</item>
            <item>medFrameRight (RHS)</item>
            <item>medFrameBottom. (BELOW)</item>
            <item>medFrameLeft (LHS)</item>
            </list>
            <para>For NarrativeOutput in HTML the medFrameShadow value will be ignored. 
            Any other combination of values will be invalid.</para>
            <para>The margin parameters relate to the white space to be left above, left of, below, and right 
            of the textual element. The medElementBody element 
            defaults to an indent of 0.25 inches; if you wish to change this property, you must assign 
            a paragraph style to the body element of the rtfstyles. MarginLeft and Indent work together 
            to form the paragraph presentation of the Physical and ROS narrative groups. These are 
            initialized to a marginLeft of 0.25 and an indent of -0.25 that results in a hanging indent 
            styled paragraph. This is the default presentation for those groups formatted with outline style.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.ParentMedcinid(System.Int32)">
            <summary>
            This is used to discover the medcinid of this finding's parent term.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the Medcinid of the immediate parent term. A zero will be returned 
            if the finding is the root term of the finding's terminolgy type.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Pdocneg(System.Int32)">
            <summary>
            Description of term is phrased in a 'negative' or 'normal' sense using 'professional' 
            terminology used for narration when adding a phrase to a sentence.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor negative phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Pdocpos(System.Int32)">
            <summary>
            Description of term is phrased in a 'positive' or 'abnormal' sense using 'professional' 
            terminology used for narration when adding a phrase to a sentence.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor positive phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Ppatneg(System.Int32)">
            <summary>
            Description is phrased in a 'negative' or 'normal' sense using 'layman' or 'patient' 
            terminology used for narration when adding a phrase to a sentence.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay negative phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Ppatpos(System.Int32)">
            <summary>
            Description is phrased in a 'positive' or 'abnormal' sense using 'layman' or 'patient' 
            terminology used for narration when adding a phrase to a sentence.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay positive phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Privacy(System.Int32)">
            <summary>
            Indicates level of confidentiality for findings like 'AIDS'
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the privacy level</returns>
            <remarks>The following table lists Medicomp's standard privacy codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>1</term><description>Moderate level of confidentiality. 
            Finding should not be exchanged with other systems electronically.</description></item>
            <item><term>2</term><description>Highest level of confidentiality. Viewable only by person 
            originating entry or by permission with access recorded in log.</description></item>
            <item><term>3</term><description>Home care.</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.Pterseneg(System.Int32)">
            <summary>
            This obtains the terse phrase form of the docneg finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse phrase docneg text for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Ptersepos(System.Int32)">
            <summary>
            This obtains the terse phrase form of the docpos finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse phrase docpos text for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Qflags(System.Int32)">
            <summary>
            This obtains the finding's qualifier flags property
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the qualifier flags</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Severity</description></item>
                <item><term>0x0002</term><description>Amount</description></item>
                <item><term>0x0004</term><description>Onset</description></item>
                <item><term>0x0008</term><description>Urgency</description></item>
                <item><term>0x0010</term><description>Quality</description></item>
                <item><term>0x0020</term><description>Degree</description></item>
                <item><term>0x0040</term><description>Pattern</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.QualifierDesc(System.String,System.String)">
            <summary>
            This method returns a description given a codename and a valid code for the codename.
            </summary>
            <seealso cref="M:Medicomp.Connection.QualifierList(System.String)"/>
            <param name="codename">The code name designating the list of codes.</param>
            <param name="code">The specific code for which the description is desired.</param>
            <returns>The description for the given code is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.QualifierList(System.String)">
            <summary>
            This method obtains a string containing all the codes and descriptions for a codename. All fields 
            are delimited with newline characters (0xA).
            </summary>
            <param name="codename">The code name designating the list of codes.</param>
            <returns>Thge list of codes and descriptions is returned.</returns>
            <remarks>Using a method such as <c>description = Medcin.QualifierList("Result")</c>,
            'description' would then contain, <c>" \nblank\nN\nnormal\nA\nabnormal\nH\nhigh\nL\nlow\n"</c></remarks>
        </member>
        <member name="M:Medicomp.IConnection.RangeNormalHigh(System.Int32,System.String)">
            <summary>
            This method returns the high end of the range considered normal for the specified medcinid 
            based on the age and gender of the patient. This is used to create an information string 
            for the user such as 'normal range 23-45 kg' for findings with measurements. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="unit">The unit of measure being used.</param>
            <returns>Returns the normal high as a measurement value using the requested unit.</returns>
        </member>
        <member name="M:Medicomp.IConnection.RangeNormalLow(System.Int32,System.String)">
            <summary>
            This method returns the low end of the range considered normal for the specified 
            medcinid based on the age and gender of the patient. This is used to create an information 
            string for the user such as 'normal range 23-45 kg' for findings with measurements. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="unit">The unit of measure being used.</param>
            <returns>Returns the normal low as a measurement value using the requested unit.</returns>
        </member>
        <member name="M:Medicomp.IConnection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            This removes a single entry from the list added via AddChart
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">minutes since birth</param>
            <param name="duration">in minutes</param>
            <param name="prefix">the prefix qualifier code</param>
            <param name="result">the result qualifier code</param>
            <param name="scale">The scale field is calculated using the function CalcScale</param>
            <returns>returns True if successful, False otherwise</returns>
        </member>
        <member name="M:Medicomp.IConnection.RestoreState(System.String)">
            <summary>
            This method restores the client's state from the previous session by passing 
            the previous session's statekey that was obtained via GetStateKey().
            </summary>
            <seealso cref="M:Medicomp.Connection.GetStateKey"/>
            <param name="key">the previous session's statekey</param>
            <returns>returns 0 if state restored</returns>
            <remarks>This method restores the client's state from the previous session by passing the previous
            session's statekey (obtained via GetStateKey()). If the return code is zero the state is restored,
            if the return code is one the state cannot be restored. If state is not restored the client must
            pass its state info again via Setpatient(), Addchart(), AddNarrate(), etc.
            When successful, the state is restored completely as if the original session remained connected</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Riskcode(System.Int32)">
            <summary>
            Indicates level of medical/surgical risk to patient. Typically used for tests and therapies.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the level of risk for the finding</returns>
            <remarks>The following table lists Medicomp's standard risk codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>1</term><description>Minimal risk</description></item>
            <item><term>2</term><description>Low risk</description></item>
            <item><term>3</term><description>Moderate risk</description></item>
            <item><term>4</term><description>Severe risk</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.RtfIndentLevel(Medicomp.RTFelements,System.Double)">
            <summary>
            This method is used to set the amount of indentation per level used in indenting the outline 
            portions of the narrative.
            </summary>
            <seealso cref="M:Medicomp.Connection.RtfStyle(Medicomp.RTFelements,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes,System.Int16,System.String)"/>
            <param name="element">Element is one of the elements identified in rtfStyle; however, only the medElementBodyOutline element is subject to outlining.</param>
            <param name="amount">Amount is expressed in inches and can vary from 0.0 to 2.0.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.RtfStyle(Medicomp.RTFelements,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes,System.Int16,System.String)">
            <summary>
            This method is used to set the style of each narrative textual element in either HTML 
            or Rich Text output.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)"/>
            <seealso cref="M:Medicomp.Connection.ParagraphStyle(System.Int16,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,Medicomp.RTFcolors,Medicomp.BorderFrames,System.Int16)"/>
            <param name="element">Specifies the narrative element.
            See <see cref="T:Medicomp.RTFelements">Medicomp.RTFelements</see> for the list of choices.</param>
            <param name="font">Specifies the font for the element.
            See <see cref="T:Medicomp.RTFfonts">Medicomp.RTFfonts</see> for the list of choices.</param>
            <param name="color">Specifies the color of the font.
            See <see cref="T:Medicomp.RTFcolors">Medicomp.RTFcolors</see> for the list of choices.</param>
            <param name="size">The font size is designated in half-points (i.e. 20, 24, 28, 36, etc.); 
            use half-points is specified in the Microsoft Rich Text Format Specification.</param>
            <param name="attributes">Specifies the appearance of the font.
            See <see cref="T:Medicomp.RTFattributes">Medicomp.RTFattributes</see> for the list of choices.</param>
            <param name="style">Style is used to associate a paragraph style (margins, alignment, border) to 
            the textual element. For other than style 0, the application must create a style with the 
            <see cref="M:Medicomp.Connection.ParagraphStyle(System.Int16,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,Medicomp.RTFcolors,Medicomp.BorderFrames,System.Int16)">ParagraphStyle</see> method. Note that the 
            server pre-assigns ParagraphStyle 1 to the medElementBody rtfStyle element. This is used to 
            establish a default indent of 0.25 inches. The default ParagraphStyle 1 can be changed by the 
            application by simply passing a 1 as the style parameter of the ParagraphStyle API.</param>
            <param name="tabstops">Tabstops is used to enter one or more tabstops for the element referenced. 
            A single tabstop is entered as an alignment character in either upper or lower case 
            ('C' implies centered, 'D' implies alignment to the decimal point, 'L' implies alignment flush 
            left, and 'R' implies alignment flush right). This is immediately followed by the tab position 
            expressed in inches; the numeric value must be greater than 0. If the alignment character is 
            omitted, flush left is taken as the default. Additional tabstops are delimited with a comma. 
            For example: 'R3.0,R4.5' define two tabs; the first flush right at three inches, the second 
            flush right at 4.5 inches. Tabstops also determine the number of columns in HTML tables. 
            To clear all current tab stops for an element, pass an empty string. Clearing the tab stops 
            for the TableHead and TableBody elements, results in those tables formed as single columns 
            with data fields delimited by a space. When the normal range data field is emitted, it will 
            be enclosed in parentheses. Note that the RichText control used in your application program 
            may not support all tab orientations.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Text strings that are distinct textual elements but are part of a sentence, rather than 
            a stand alone string, will be decorated with the element's font, font size, and font color, 
            as well as the bold, italic, underline, and strikethrough attributes; all other presentation 
            characteristics of the sentence's paragraph element will be retained. For example, a free text 
            note attached to a finding will use the font appearance and attributes of the Free Text element, 
            but the rest of the finding text will appear in the presentation styling of the Body or Body 
            outline element. For an additional example, note that the headings that occur in the Review 
            of Systems group in Outline Format are Sub-heads; they will be presented with the font and 
            attribute characteristics of the SubHead element; however, paragraph styling will be based on 
            the Body Outline element.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Rxcode(System.Int32)">
            <summary>
            Obtains the type of therapy
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the therapy type o the finding</returns>
            <remarks>
            The following table lists Medicomp's standard codes.
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>A</term><description>anesthesia</description></item>
                <item><term>C</term><description>counseling</description></item>
                <item><term>D</term><description>disposition</description></item>
                <item><term>E</term><description>exposure</description></item>
                <item><term>G</term><description>glasses</description></item>
                <item><term>I</term><description>infusion</description></item>
                <item><term>M</term><description>medication</description></item>
                <item><term>N</term><description>narcotic</description></item>
                <item><term>P</term><description>procedure</description></item>
                <item><term>R</term><description>consultation</description></item>
                <item><term>S</term><description>surgery</description></item>
                <item><term>T</term><description>transfusion</description></item>
                <item><term>U</term><description>un-coded</description></item>
                <item><term>V</term><description>vaccination</description></item>
                <item><term>W</term><description>work restriction</description></item>
                <item><term>X</term><description>radiation</description></item>
                <item><term>9</term><description>exclude from care plan</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.IConnection.SaveUdf">
            <summary>
            This method writes the user-findings and user-prompts currently in server memory to the medcin.udf 
            and medcin.udp files respectively. These files are created in the same directory as the medcin data files.
            </summary>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.ScreenForCodes(System.String)">
            <summary>
            Screens the current encounter for findings with codes.
            </summary>
            <param name="CodeSets">one or more Medicomp.CodeLinks codes in a comma-delimited string</param>
            <returns>Returns a elimited list containing Itemid,CodeLinks,Code for all findings with codes.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Sdocneg(System.Int32)">
            <summary>
            Sentence form of term is phrased in a 'negative' or 'normal' sense using 'professional' 
            terminology used for sentence narration.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor negative sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Sdocpos(System.Int32)">
            <summary>
            Sentence form of term is phrased in a 'positive' or 'abnormal' sense using 'professional' 
            terminology used for sentence narration.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor positive sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Search(System.Int32)">
            <summary>
            Concise sentence form description of term that is displayed as a result of a search or 
            other prompting. This description presents a 'positive' or 'abnormal' form of the term.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Sentflow(System.Int32)">
            <summary>
            Recommended level of nodekey for terminating sentence text flow for findings in this 
            nodekey's hierarchy, given no other prevailing conditions for continuing the sentence.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the sentence flow level for the finding</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetAlertLookBackPeriod(System.String)">
            <summary>
            This API is used to set the history time period for alert evaluation
            </summary>
            <param name="Duration">The time period in duration format. The format is the string form 
            of a numeric value followed by a precision character: 'Y' for years, 'M' for months, 
            'W' for weeks, 'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. 
            For example, '3W' is interpreted as three weeks, '7M' is interpreted as seven months, 
            '10567I' is interpreted as ten thousand, five hundred sixty seven minutes. 
            The string is limited to a maximum of 9 digits plus the precision character for a total 
            string length of 10 characters.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Not yet supported.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetAlertSuppression(System.String)">
            <summary>
            This is used to provide suppression of a particular alert.
            </summary>
            <param name="Suppress">o be announced.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Not yet supported</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetChapter(System.Int16)">
            <summary>
            This method is used to establish the current chapter number
            assigned automatically when adding new findings using
            AddNarrate or AddNarrateEx.
            </summary>
            <param name="Chapter">The zero-based chapter number to set.</param>
            <returns>If an error is encountered, False is returned.</returns>
            <remarks>This method establishes the current chapter number that will be 
            automatically applied to any new finding subsequently added to the narration 
            encounter. The chapter property is the highest sort field for ordering the 
            encounter findings for presentation.. You can divide a single encounter into 
            various chapters by assigning chapter numbers.
            <para>The chapter number number is assigned automatically when a finding is newly 
            added to the encounter via AddNarrate or AddNarrateEx. You can change the 
            chapter value for a designated finding by using this AddChapter API.</para>
            <para>The chapter number is a short value; the first chapter is numbered 0. 
            Unless chapters are assigned, all findings added to the encounter are assigned 
            to chapter 0. An optional header can be emitted when the encounter has more 
            than one chapter; it is emitted using the header element style. The header is 
            enabled using the NarrateOptions API. When emitted, the header is derived from 
            message string number 55 (MSG_CHAPTER). The string defaults to 'Chapter #', 
            but it can be changed by using the MessageString API. All characters in the 
            string are emitted verbatim except for two special characters, '#' and '$'. 
            A number sign character will be converted to one plus the current chapter 
            number (0 becomes 1, 1 becomes 2, etc.). A dollar sign character will be 
            converted to one plus the current chapter number emitted as a word when the 
            result is in the range 1-12 (One, Two, etc). A chapter number outside that 
            range will be emitted as if the character were '#'. This results in a 
            consistant description enumerated for each chapter. If your applications 
            needs to use a distinct heading for each chapter, you must post-process the 
            narrate API and perform whatever substitution your application requires.</para>
            <para>The current chapter number established using SetChapter is automatically 
            reset to 0 when a ClearNarrative API is called. If your application makes use 
            of chapter numbering and you maintain the chapter number, make sure you reset 
            your number to 0 when you call the ClearNarrative API.</para>
            <para>The chapter number passed in the SetChapter API is not used when narrating 
            history encounters uing HistNarrate. A history narration will use chapter 
            numbers as established with the HistAddChapter API.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetCodeDate(System.String)">
            <summary>
            Codes are available based on their effective validity by date. The server maintains the effective 
            dates on a system basis. This SetCodeDate method can be called by a client to change the current 
            code date for that client connection.
            </summary>
            <param name="CodeDate">CodeDate is passed in Medcin date string format ('YYYYMMDD'). To reset the 
            connection’s code date to the sytem date, pas an empty string as the CodeDate.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetDataDir(System.String)">
            <summary>
            This method has no functionality for the client - server implementation.
            It exists to provide a consistant API set.
            </summary>
            <param name="path">Path pointing to Medcin data files.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetDebugOutput(System.Int16)">
            <summary>
            This method is used to set the level of connection-specific debug output
            written to the Medcinserv.doc debug file.
            </summary>
            <param name="nNewValue">This feature is activated by setting the DebugOutput 
            property to 1, 2, or 3. A 0 turns off writing connection debugging info.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetDecorationStyle(System.Int32,System.Int16)">
            <summary>
            This method is used to set the text decoration for a finding added to the narrative collection 
            to a style previously established using the AddDecorationStyle API. You can remove the text 
            decoration by passing DecorationStyle as a 0 value.
            </summary>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate;
            it is used to identify the encounter finding to decorate.</param>
            <param name="DecorationStyle">Specify the decoration style to apply.
            See <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)">AddDecorationStyle</see> for additional information.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetDoctorid(Medicomp.DocCodes,System.Int32)">
            <summary>
            This method is used to set the doctor identification (docid) for narration add functions when 
            the docid for the function is different than the docid for the encounter (i.e the docid passed 
            in the AddEncounter API). Once set to a non-zero value, the docid passed will be assigned to 
            the function identified by the code.
            </summary>
            <param name="code">Code is one of the <see cref="T:Medicomp.DocCodes">Medicomp.DocCodes</see> enumerations. </param>
            <param name="docid">Specifies the doctor identification for the code.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Particular narration groups (G_REFERDX, G_PLAN, G_ASSESS, G_EDUCATION, and G_DISCUSS) 
            will sequence findings by the entering data doctor identification so that the narration can 
            present sub-groupings. Where the doctor string is cited in the narration, the correct doctor 
            name for the sub-grouping will be emitted.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetGroupName(Medicomp.MedcinGroups,System.String)">
            <summary>
            This method is used to change the name of a group in the presentation of the narrative. 
            It works the same as the MessageString API but is simpler to use when you want to change 
            only the names of groups as they appear in the narrative. 
            </summary>
            <param name="groupnumber">One of the <see cref="T:Medicomp.MedcinGroups">MedcinGroups</see> enumeration
            that designates the narrative group name you wish to change.</param>
            <param name="newname">The name you wish to use for the narrative group in question.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>A group name can be reset to its original value by passing a null string as the newname parameter.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetGroupNumber(System.Int32,System.Int16)">
            <summary>
            This function is used to set the group number for a finding  added to
            the narrative collection by AddNarrate(). Also review the  AddNarrate2
            API which allows setting the group number while adding the  finding.
            </summary>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate</param>
            <param name="newvalue">The new value of the group number to be assigned</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The group sequence for the finding identified by the itemid will 
            be reassigned once the group number is reassigned. If the newGroupNumber 
            is not a valid group number, then no assignments will be made. If the 
            application sets the group number MEDCIN logic will no longer make any 
            group assignment during any subsequent Add-type of API. Once the group 
            number has been assigned by the application, if you wish to have MEDCIN 
            dynamically determine the group number based on internal logic, simply 
            set the group number to 0 using this API.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetGroupSequence(Medicomp.MedcinGroups,System.Int16)">
            <summary>
            This method is used to alter the sequence of narrative groups; only the first 36 groups are 
            supported. When re-sequencing, you must invoke GroupSequence for all groups before your new
            sequencing will take affect. Alternatively, passing  a zero for both groupNumber and newGroupSequence
            will reset the sequence to the initial server sequence. <b>It is recommended that applications use the 
            SetGroupSequenceEx method that supercedes this method and allows the entire resequencing to 
            be handled with one API call.</b> To resequence groups Misc10 through Misc37, you must use the 
            SetGroupSequenceEx API.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetGroupSequenceEx(System.String)"/>
            <param name="groupNumber">One of the <see cref="T:Medicomp.MedcinGroups">MedcinGroups</see> enumeration
            that designates the narrative group sequence you wish to change.</param>
            <param name="newGroupSequence">The new sequence you wish to assign.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetGroupSequenceEx(System.String)">
            <summary>
            This method is used to alter the sequence of all groups by passing a comma-delimited string. 
            Passing a null string for GroupList will reset the sequence to the initial server sequence.
            </summary>
            <param name="GroupList">The list of sequence numbers in group order.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The GroupList string should contain a list of sequence numbers in group order and not 
            the group numbers in the sequence you wish them to be presented. For instance, if you wish the 
            narrative groups to be in a presentation sequence of 28, 6, 27, 1, 20, 2, 24, 3, 30, 23, 29, 4, 
            32, 33, 7, 5, 16, 9, 34, 19, 21, 31, 8, 11, 26, 25, 13, 10, 12, 22, 14, 15, 17, 35, 36, 18 
            (Misc1, History, Reason for Visit, Chief Complaint, …, Misc9, Past Tests), then the GroupList 
            should be '4,6,8,12,16,2,15,23,18,28,24,29,27,31,32,17,33,36,20,5,21,30,10,7,26,25,3,1,11,9,22,
            13,14,19,34,35' (Chief complaint is sequenced 4th, HPI is sequenced 6th, Current medication 
            is sequenced 8th, etc).
            <para>The initial sequence of groups for presentation purposes is as follows:
            <list type="number">
            <item>Reason for visit</item><item>Chief Complaint</item><item>Referred Here</item>
            <item>History Of Present Illness</item><item>Current Medication</item><item>Past Medical History</item>
            <item>Previous Therapy</item><item>Personal History</item><item>History</item>
            <item>Family History</item><item>Review Of Systems</item><item>Physical Findings</item>
            <item>Objective</item><item>Tests</item><item>Rule Out</item>
            <item>Previous Tests</item><item>Assessment</item><item>Test Conclusions</item>
            <item>Therapy</item><item>Allergies</item><item>Vaccinations</item>
            <item>Counseling and Education</item><item>Discussed</item><item>Plan</item>
            <item>Notes</item><item>Other</item><item>Practice Management</item>
            </list></para><para>Miscellaneous1 through Miscellaneous37 follow in sequence.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetMessageString(System.Int16,System.String)">
            <summary>
            This method can be used to change any of the message strings used in the generation of the narrative. 
            These strings include Group headings, Table headings, Sentence prefixes, pronouns, canned phrases, 
            date and time units, etc. Rather than delineate the nearly 200 strings in this document, refer 
            to the file named messages.bas in the SDK\VBDemoProgram directory or the file messages.h in the 
            SDK\thinclient\source directory for a description of each message index.
            </summary>
            <param name="Index">The message index number as noted in the referenced source file.</param>
            <param name="lpszNewValue">The string you wish to assign to the message.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetNarrateOptions(Medicomp.NarrateOptions)">
            <summary>
            This method is used to set the options used to customize the narrate generation. The nNewValue may 
            consist of the sum of two or more values.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrateOptions"/>
            <seealso cref="T:Medicomp.NarrateOptions"/>
            <param name="nNewValue">Any combination of the <see cref="T:Medicomp.NarrateOptions">NarrateOptions</see> enumeration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetNarrativeContext(Medicomp.NarrativeContexts)">
            <summary>
            This method is used to set the type of context being used for the narrative. 
            Context should be set prior to entering findings for an encounter to ensure correct 
            output for that context.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrativeContext"/>
            <seealso cref="T:Medicomp.NarrativeContexts"/>
            <param name="nNewValue">One of the NarrativeContexts enumeration values.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When MedcinInit is invoked, NarrativeContext defaults to medContextChart. 
            It also is set to medContextChart when ClearNarrative() is invoked. To ascertain 
            differences among the textual generation variations by context, refer to the detailed 
            documentation on narrative generation. Note that 'Evaluation and Management' findings, 
            as well as the 'correspondence' finding (Medcinid 49941) and the 'patient care reviewed' 
            finding (Medcinid 49941) are presented only for medContextChart Additionally, a physician 
            examination string is generated for all contexts other than medContextChart.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetNarrativeFormat(Medicomp.NarrativeFormats)">
            <summary>
            This method is used to set the type of format being used for the encounter narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrativeFormat"/>
            <seealso cref="T:Medicomp.NarrativeFormats"/>
            <param name="nNewValue">One of the NarativeFormats enumeration to set.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When MedcinInit is invoked, NarrativeFormat defaults to medFormatNarrative. 
            It also is set to medFormatNarrative when ClearNarrative() is invoked.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetNarrativeOutput(Medicomp.NarrativeOutputs)">
            <summary>
            This method is used to set the type of output being used for the encounternarrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrativeOutput"/>
            <seealso cref="T:Medicomp.NarrativeOutputs"/>
            <param name="nNewValue">This is one of the NarrativeOutputs enumeration values.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When MedcinInit is invoked, NarrativeOutput defaults to medOutputPlain.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetParagraphStyles(System.String)">
            <summary>
            Future use for setting all paragraph style properties in a single method.
            </summary>
            <param name="Styles">To be announced</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The IP (Intelligent Prompting) algorithm needs to be passed the patient's age, 
            gender, ethnicity, religion, and race. In addition, the narrative generation 
            functions need to know the patient's name and birthdate. These fields are set 
            with the SetPatient() function. The information will stay set until SetPatient() 
            is called again.
            </summary>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="age">Patient’s age in minutes. The 15768000 is 80 year old in minutes 
            (30yrs * 365* 1440). This method is precise enough to support the algorithms.</param>
            <param name="gender">Patient’s gender. 'M' = Male, 'F' = Female, 'U' = unknown.  
            Use unknown when prompting should supply non-gender specific findings.</param>
            <param name="ethnic">One of the qualifier codes for ethnicity.</param>
            <param name="religion">One of the qualifier codes for religion.</param>
            <param name="race">One of the qualifier coes for race.</param>
            <param name="patientname">The name of the patient formatted for presentation. 
            For example, 'John Doe',  'Mrs. Smith', 'Mr. George Jetson', and 'Ms. Penelope 
            Flowers' are all possible name strings.</param>
            <param name="birthdate">The birthdate of the patient. The format is 'YYYYMMDDHHIISS' 
            for as much precision as the birthdate is recorded (usually 'YYYYMMDD'. For example, 
            '18980507' designates May 7, 1898. If you use the hours precision, hours should be 
            in 24-hour time.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetPatientGeneric(System.Boolean)">
            <summary>
            When an end-user is building a generic protocol this function is handy to temporarily 
            set the patient's demographics to neutral so that all findings are displayed.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <param name="on">TRUE sets the patient to a neutral gender, age, ethnicity, 
            religion, and race. FALSE resets the patient information to before being 
            called with TRUE.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>All prompting functions filter findings based on the patient's demographics 
            (i.e. female findings are dropped for male patients, emphysema would be strongly 
            discriminated against for patient's under 35 years and mildly for patients under 
            50 years). When finished with building the protocol the patients demographics can 
            be restored by calling this function with FALSE. This could also be accomplished 
            with multiple calls to SetPatient. </remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetRtfStyles(System.String)">
            <summary>
            Future use for setting all RtfStyle properties in a single method.
            </summary>
            <param name="Styles">To be announced</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetShowItemid(System.Int16)">
            <summary>
            This method is used primarily for diagnostic purposes. When set non-zero, the itemid assigned by 
            AddNarrate() will be prefixed to a finding's text generated by Narrate(). The value is 
            initially set to 0; it is not affected by ClearNarrate().
            </summary>
            <param name="bNewValue">Set non-zero to show the itemid or 0 to hide it.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that the number will be prefixed with MessageString(MSG_SHOWOPEN) and suffixed with 
            MessageString(MSG_SHOWCLOSED); thus, your application can change the appearance of the string 
            prefixed to the finding text by using the <see cref="M:Medicomp.Connection.SetMessageString(System.Int16,System.String)">SetMessageString</see> method.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetShowItemtag(Medicomp.NarrativeTags)">
            <summary>
            This method is used to set the state of adding a client tag (number and/or string) to the generated 
            text. The nNewValue may consist of the sum of two or more values.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetShowItemtag"/>
            <seealso cref="M:Medicomp.Connection.AddItemTag(System.Int32,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.NarrateGroups(System.String)"/>
            <seealso cref="T:Medicomp.NarrativeTags"/>
            <param name="nNewValue">Any combination of the <see cref="T:Medicomp.NarrativeTags">NarrativeTags</see> enumeration</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Item tags are assigned to a finding by AddItemtag. The state is initially set to 
            medTagNone; it is not affected by ClearNarrate().
            <para>Note that the number will be prefixed with MessageString(MSG_SHOWOPEN) and suffixed with 
            MessageString(MSG_SHOWCLOSED); thus, your application can change the appearance of the string 
            prefixed to the finding text.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all tags 
            can be emitted under program control by using the NarrateGroups method with a tag specifier 
            along with the ShowItemTag method. An example of an itemtag string with multiple fields 
            would be: '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold 
            data on the provider originally entering data and the provider editing data. The fields could 
            be selectively narrated by using the NarrateGroups method.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetShowMedcinid(System.Int16)">
            <summary>
            This method is used primarily for diagnostic purposes. When set non-zero, the Medcinid associated 
            with a finding's text will be prefixed to its text generated by Narrate(). The Medcinid will 
            include either a 'P' or 'S' to indicate whether the text was obtained from either the phrase 
            or sentence table. The property is initially set 0; it is not affected by ClearNarrate().
            </summary>
            <param name="bNewValue">Set to non-zero to show the Medcinid of a finding in the narrative.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that the number will be prefixed with MessageString(MSG_SHOWOPEN) and suffixed with 
            MessageString(MSG_SHOWCLOSED); thus, your application can change the appearance of the string 
            prefixed to the finding text.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetSubGroupSequence(System.String)">
            <summary>
            This method is used to change the presentation sequence of the subgroups within a narrative group.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetSubGroupSequence(Medicomp.MedcinGroups,System.Int16)"/>
            <param name="Sequence">A string that contains the sequence numbers delimited as noted below.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The subgroup sequence for multiple groups can be established in a single SetSubgroupSequence 
            method call; delimit each group sequence substring with a tab character (vbTab or C's '\t').  
            The syntax for the sequence string of a group is the group number followed by the set of 
            presentation sequence numbers for each subgroup of that group. All fields are delimited with a 
            vertical bar character.
            <para>The only Groups that have supported subgroup sequencing are History of Present Illness, 
            Physical Examination, and Review of Systems. See the <see cref="M:Medicomp.Connection.GetSubGroupSequence(Medicomp.MedcinGroups,System.Int16)">
            GetSubgroupSequence</see> method for obtaining the current subgroup sequencing.</para>
            <para>The following example uses the Review of Systems list of subgroups that have the following default sequence:
            <list type="number">
            <item>Encounter Background Information</item><item>Military Service</item>
            <item>Systemic Symptoms</item><item>Head-related Symptoms</item>
            <item>Eye Symptoms</item><item>Otolaryngeal Symptoms</item>
            <item>Breast Symptoms</item><item>Cardiovascular Symptoms</item>
            <item>Pulmonary Symptoms</item><item>Gastrointestinal Symptoms</item>
            <item>Genitourinary Symptoms</item><item>Endocrine Symptoms</item>
            <item>Skin Symptoms</item><item>Hematologic Symptoms</item>
            <item>Musculoskeletal Symptoms</item><item>Neurological Symptoms</item>
            <item>Psychological Symptoms</item></list></para>
            <para>A sequence string indicating this default sequence is: '16|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17', 
            16 is the narrative group number for Review of Systems. If one wanted to designate 
            Cardiovascular Symptoms to appear as the second subgroup and Pulmonary Symptoms as the third 
            subgroup, the sequence string would appear as: '16|1|4|5|6|7|8|9|2|3|10|11|12|13|14|15|16|17'.</para>
            <para>A group's subgroup presentation sequence can be restored to the default presentation by a 
            sequence string of the form, 'GroupNumber|0'. In the example group, '16,0' would restore the 
            presentation sequence as shown in the table.</para>
            <para>The presentation sequence for all supported groups' subgroups can be reset to the defualt 
            sequence by passing a 0-length string for the Sequence parameter.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetTimedSections(Medicomp.TimedSections)">
            <summary>
            This method is used to set the state associated with presenting timed findings (findings with an 
            onset date more recent than the encounter date) into separate section groupings.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetTimedSections"/>
            <param name="nNewValue">One of the <see cref="T:Medicomp.TimedSections">TimedSections</see> enumeration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Certain findings, such as vital signs, stress test measurements, etc., may have values 
            recorded over time. These findings may be presented either in finding sequence, or grouped 
            into sections by time. This method controls the sequencing performed by the narrate() method.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetTimeFormat(Medicomp.DatePrecisions,System.String)">
            <summary>
            This method is used to set the format associated with presenting a date and time data value based 
            on the precision of the date value. There is a separate property for each precision.
            </summary>
            <seealso cref="T:Medicomp.DatePrecisions"/>
            <param name="precision">One of the <see cref="T:Medicomp.DatePrecisions">DatePrecisions</see> to set.</param>
            <param name="lpszNewValue">The new string to use for the associated precision.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The initial format strings for each precision are as follows:
            <list type="table">
            <listheader><term>Date Precision</term><description>Format String</description></listheader>
            <item><term>medPrecisionYear</term><description>%Y</description></item>
            <item><term>medPrecisionMonth</term><description>%m/%Y</description></item>
            <item><term>medPrecisionWeek</term><description>%Y, week %U</description></item>
            <item><term>medPrecisionDay</term><description>%m/%d/%Y</description></item>
            <item><term>medPrecisionHour</term><description>%m/%d/%Y at %I:00%p</description></item>
            <item><term>medPrecisionMinute</term><description>%m/%d/%Y %I:%M%p</description></item>
            <item><term>medPrecisionSecond</term><description>%m/%d/%Y %I:%M:%S%p</description></item>
            <item><term>medPrecisionTimeonly</term><description>%I:%M%p</description></item>
            </list>
            <para>Each of the above format strings uses a specification similar to that documented for the 
            standard C library strftime function. Each individual format specifier is a percent ('%') 
            followed by a specification character. The format specification characters supported by the 
            server are as follows:
            <list type="table">
            <listheader><term>Specification Character</term><description>Specification format.</description></listheader>
            <item><term>%</term><description>the percent character</description></item>
            <item><term>b</term><description>abbreviated month name (i.e. Jan, Feb, Mar, etc.)</description></item>
            <item><term>B</term><description>full month name (i.e. January, February, etc.)</description></item>
            <item><term>d</term><description>two-digit day of the month (i.e. 01, 02, etc.)</description></item>
            <item><term>e</term><description>day of the month (i.e. same as above without leading zero)</description></item>
            <item><term>H</term><description>two-digit hour (i.e. 00 to 23)</description></item>
            <item><term>I</term><description>two-digit hour (i.e. 01 to 12)</description></item>
            <item><term>j</term><description>three-digit day of the year (001 to 366)</description></item>
            <item><term>m</term><description>one or two-digit month (i.e. 1 to 12)</description></item>
            <item><term>n</term><description>two-digit month (i.e. 01 to 12)</description></item>
            <item><term>M</term><description>two-digit minute (i.e. 00 to 59)</description></item>
            <item><term>p</term><description>AM or PM</description></item>
            <item><term>S</term><description>two-digit second (i.e. 00 to 59)</description></item>
            <item><term>U</term><description>two-digit week number (i.e. 00 to 53)</description></item>
            <item><term>y</term><description>two-digit year without century (i.e. 00 to 99)</description></item>
            <item><term>Y</term><description>four-digit year</description></item>
            <item><term>Z</term><description>the time zone string passed as the format property using 
            medPrecisionTimeZone. Note that this string is limited to three characters. It is initialized 
            to a null string.</description></item>
            </list></para>
            <para>All other characters are taken literally. A format must not exceed 31 characters in length.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.SetUserFindingTag(System.Int32,System.String)">
            <summary>
            This method sets a tag string to a User Defined Finding.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetUserFindingTag(System.Int32)"/>
            <param name="userid">Userid is the id of the user-finding or Medcin finding for which the 
            code information applies.</param>
            <param name="stag">This is the tag to assign to the finding referenced.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The assigned tag is not used by any function in the server. The tag can be
            recovered by using the GetUserFinding method.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Spatneg(System.Int32)">
            <summary>
            Sentence form is phrased in a 'negative' or 'normal' sense using 'layman' or 'patient' 
            terminology used for sentence narration.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay negative sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Spatpos(System.Int32)">
            <summary>
            Sentence form is phrased in a 'positive' or 'abnormal' sense using 'layman' or 'patient' 
            terminology used for sentence narration.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay positive sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Specialty(System.Int32)">
            <summary>
            Specialty contains up to four one-byte codes identifying the specialty relevant to the finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The set of specialty codes assigned to the designated finding.</returns>
            <remarks>The following table enumerates the posible codes:
            <list type="table">
            <listheader><term>Specialty Code</term><description>Code Description</description></listheader>
            <item><term>A</term><description>Gastroenterology</description></item>
            <item><term>B</term><description>Orthopedics</description></item>
            <item><term>C</term><description>Cardiology</description></item>
            <item><term>D</term><description>Dermatology</description></item>
            <item><term>E</term><description>Endocrinology</description></item>
            <item><term>F</term><description>Obstetrics</description></item>
            <item><term>G</term><description>Gynecology</description></item>
            <item><term>H</term><description>Hematology</description></item>
            <item><term>I</term><description>Infectious Disease</description></item>
            <item><term>J</term><description>Dentistry</description></item>
            <item><term>K</term><description>Nephrology</description></item>
            <item><term>N</term><description>Neurology</description></item>
            <item><term>O</term><description>Oncology</description></item>
            <item><term>P</term><description>Pulmonary Medicine</description></item>
            <item><term>R</term><description>Rheumatology</description></item>
            <item><term>S</term><description>Psychiatry</description></item>
            <item><term>T</term><description>ENT</description></item>
            <item><term>U</term><description>Urology</description></item>
            <item><term>V</term><description>Ophthalmology</description></item>
            <item><term>X</term><description>Genetic Medicine</description></item>
            <item><term>Y</term><description>Pediatrics</description></item>
            <item><term>Z</term><description>Allergy/Immunology</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.StartAge(System.Int32)">
            <summary>
            Starting age range of patient which is valid for this record. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the start age in minutes</returns>
            <remarks>Quantity of minutes. 525600 minutes are a year. If this field is 0 then all ages 
            less than or equal to endage are valid.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Sterseneg(System.Int32)">
            <summary>
            This method obtains terse sentence docneg text for the specified finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse sentence docneg text for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Stersepos(System.Int32)">
            <summary>
            This method obtains terse sentence docpos text for the specified finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse sentence docpos text for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Subs(System.Int32)">
            <summary>
            '+' indicates that lower level (more detailed) nodes exist
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns a '+' if children are available; else a blank string</returns>
        </member>
        <member name="M:Medicomp.IConnection.Svoice(System.Int32)">
            <summary>
            Concise sentence form description of term that has minimal conflicts for voice recognition
            systems using the string as a command.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Termtype(System.Int32)">
            <summary>
            This method obtains the terminology type of the designated finding which indicates
            the type of medical term.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>One of the terminology types
            <list type="table">
            <listheader><term>Value</term><description>Terminology Classiication</description></listheader>
            <item><term>1</term><description>Symptom</description></item>
            <item><term>2</term><description>Physical Examination</description></item>
            <item><term>3</term><description>Test</description></item>
            <item><term>5</term><description>History</description></item>
            <item><term>6</term><description>Diagnosis</description></item>
            <item><term>7</term><description>Therapy</description></item>
            </list></returns>
        </member>
        <member name="M:Medicomp.IConnection.Testcode(System.Int32)">
            <summary>
            Type of test
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the test typ of the finding</returns>
            <remarks>The following table lists Medicomp's standard test codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>B</term><description>Blood Profiles</description></item>
            <item><term>E</term><description>Electrocardiogram</description></item>
            <item><term>I</term><description>Imaging</description></item>
            <item><term>U</term><description>Urinalysis</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.TestValueConvert(System.Int32,System.Double,System.String,System.String)">
            <summary>
            This method obtains a value that has been converted from one unit to the another unit of measure.  
            </summary>
            <seealso cref="M:Medicomp.Connection.UnitEnum(System.Int32,System.Int16)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="testvalue">The original value to be converted</param>
            <param name="fromunit">The unit of measure for the testvalue provided</param>
            <param name="tounit">The unit of measure that you want testvalue cnverted to</param>
            <returns>Returns the testvalue converted to the 'tounit' unit of measure</returns>
            <remarks>Valid unit names for the fromunit and tounit arguments are those returned from the 
            UnitEnum method for the specified medcinid.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.Tgn(System.Int32)">
            <summary>
            This method is used to obtain the title group number assigned to a finding.
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The assigned title group number is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Title(System.Int32)">
            <summary>
            Recommended level of nodekey for the title of this finding's text section or table 
            when utilizing titles. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the title level for the finding</returns>
        </member>
        <member name="M:Medicomp.IConnection.Transcribe(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Int16)">
            <summary>
            The Transcribe function is used to obtain a null-terminated phrase or sentence description for a 
            medcinid when passed data associated with a chart record.
            </summary>
            <seealso cref="M:Medicomp.Connection.TranscribeFlag"/>
            <param name="texttype">'P' to request phrase text, or 'S' to request sentence text</param>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="prefix">The prefix qualifier code, or null string if none</param>
            <param name="modifier">The modifier qualifier code, or null string if none</param>
            <param name="result">The result qualifier code, or null string if none</param>
            <param name="status">The status qualifier code, or null string if none</param>
            <param name="valuestr">The value as a string, or null string if none</param>
            <param name="units">The units associated with valuestr, or null string if none</param>
            <param name="rdoc">The docid code of the referred to doctor, or 0 if none (see the AddDocName 
            method) for referencing a name string to a docid. The doctor name associated with this docid 
            would be used if the prefix qualifier code is PREFIX_REFERELS, 'RF'.</param>
            <param name="lingo">'D' for doctor or professional language, or 'P' for patient or lay language</param>
            <param name="capitalize">Set TRUE if the first character of the returned string should be 
            capitalized, FALSE otherwise</param>
            <param name="truncate">Set TRUE to enable the truncation option (used when the sentence being 
            constructed will subsequently incorporate phrasing for a lower-level positive finding).</param>
            <returns>The phrase or sentence description is returned.</returns>
            <remarks>Note that if texttype is 'S' and lingo is 'D', and the text string applicable to medcinid 
            is a one-space string, a null string will be returned. This permits the application to replace 
            a finding using a User-Defined Finding (UDF) with a one-space DoctorPositiveText string to 
            eliminate the sentence text. This may be useful for those applications that desire to eliminate 
            the 'The Chief Complaint is:' text string for a narration.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.TranscribeFlag">
            <summary>
            TranscribeFlag is used to obtain certain information relevant to the immediately preceding Transcribe method.
            </summary>
            <seealso cref="M:Medicomp.Connection.Transcribe(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Int16)"/>
            <returns>Returns the result of the prior Transcribe method.</returns>
            <remarks>The result provides bit-mapped values accoring to the following table:
            <list type="table">
            <listheader><term>Result bit</term><description>Description of Use</description></listheader>
            <item><term>Bit 1</term><description>Set to a 1 value if valuestr was inserted into the returned 
            Transcribe text; otherwise it is reset to a 0 value. There are some MEDCIN strings which 
            contain a '~V' hint specifying the placement of a value and units (23087 DOCPOS, for example). 
            Thus, if you passed a non-null valuestr and the MEDCIN string incorporated the hint, the 
            Transcribe function would have inserted the valuestr into the returned text string. Your code 
            would need to know about this action to avoid appending the valuestr. Conversely, if you 
            passed a non-null valuestr and this bit was 0, your code needs to append the valuestr and 
            units.</description></item>
            <item><term>Bit 2</term><description>Set if a prefix qualifier was prepended to the returned 
            Transcribe text; otherwise it is reset to a 0 value.</description></item>
            <item><term>Bit 6</term><description>Set if patient (lay) text is requested and the PATPOS text 
            string is null; otherwise it is reset to a 0 value. This provides knowledge that even though 
            lay text was requested, there is no difference between the doctor and patient text supplied 
            by MEDCIN for this medcinid.</description></item>
            <item><term>All Other Bits</term><description>All other bits are currently unused and are reset to 0 values.</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.IConnection.TranscribeItem(System.String,System.String,System.Int32)">
            <summary>
            This method generates narrative text for the finding previously added to the narrative collection 
            and identified by itemid. 
            </summary>
            <param name="texttype">'P' to request phrase text, or 'S' to request sentence text.</param>
            <param name="lingo">'D' for doctor or professional language, or 'P' for patient or lay language.</param>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate;
            it is used to reference the desired finding.</param>
            <returns>The narrated finding is returned.</returns>
            <remarks>The generation will use the current states of ShowMedcinid, ShowItemid, and ShowItemTag. 
            The text generated includes: the value as applicable; onset, duration, and episode; any note, 
            and any rxstr. This essentially performs the functionality of Transcribe with the additional 
            data elements. Note that if the showItemtag parameter currently includes the medTagHTML setting, 
            the itemtag will be excluded from the transcribed string. The current narrative output for note 
            text is considered to be plain text.
            <para></para>Note that if texttype is 'S' and lingo is 'D', and the text string applicable to 
            medcinid is a one-space string, a null string will be returned. This permits the application 
            to replace a finding using a User-Defined Finding (UDF) with a one-space DoctorPositiveText 
            string to eliminate the sentence text. This may be useful for those applications that desire 
            to eliminate the 'The Chief Complaint is:' text string for a narration.
            <para>Note that if the application has provided a code string for the finding instance using the
            AddNarrateCode API, and the Narrative Format includes one of the flag bits that specifies presentation
            of the code string description, this API will include the code string based on the flag settings of
            the NarrativeFormat. This may substitute the code description for the Medcin description, or emit both
            descriptions. When the flags indicate use of only the code description, the API will still include any
            added note text; but no other properties will be part of the string returned</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.Tsearch(System.Int32)">
            <summary>
            This method obtains terse search text for the specified finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse search text for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.Unit(System.Int32)">
            <summary>
            This obtains the standard units of measure for the finding.
            </summary>
            <seealso cref="M:Medicomp.Connection.UnitEnum(System.Int32,System.Int16)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the standard unit string.</returns>
            <remarks>Alternate units and conversion data is in the unit table. The eflags field has bit 
            0x0004 set to indicate that alternate units exist for this finding.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.UnitEnum(System.Int32,System.Int16)">
            <summary>
            This method returns all of the units of measure commonly used for the specified medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.TestValueConvert(System.Int32,System.Double,System.String,System.String)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="listnum">The list number index as discussed in 'remarks'</param>
            <returns>Returns all of the units of measure commonly used for the specified medcinid.</returns>
            <remarks>Use this function for presenting a list to the user for selection. Invoke this 
            function in a loop starting listnum at zero and incrementing by one each iteration until 
            an empty string is returned. Note: it can be determined by the 0x0004 bit of the eflags 
            field if a finding has multiple units. For findings not having this bit set, this function 
            will return the unit field from the property table which is known as the standard unit.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.UnitGuess(System.Int32,System.Double)">
            <summary>
            This method returns a probable unit of measure for a medcinid given the testvalue, 
            age and gender of the patient.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="testvalue">The value used to guess its unit</param>
            <returns>Returns the guessed unit for the finding based on the value</returns>
            <remarks>This function initially tries to guess the units based on the range of values 
            that are considered normal for the patient as specified in the agerange table, and then 
            proceeds to less accurately guess by using other methods. Use this in your application 
            when a value is initially entered for a finding to save the user from manually having 
            to select the units from a list.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.udfCodeList(System.Int32,System.String)">
            <summary>
            This function is used to add a list of code mappings to a user defined finding
            </summary>
            <param name="userid">is the id of the user-finding or MEDCIN finding for which the code information.</param>
            <param name="codelist">is a comma-delimited list of code maps: codeset,year,code[,codeset,year,code[...]]</param>
            <returns></returns>
        </member>
        <member name="M:Medicomp.IConnection.ExpandCodehint(Medicomp.CodeLinks,System.String,System.Int32)">
            <summary>
            This function is used to obtain a list of Medcin terms parsed from a codehint.
            </summary>
            <param name="codeset">The codeset of the hint; valid for ICD9 and ICD10.</param>
            <param name="codehint">The codehint of a single code.</param>
            <param name="mode">To be announced.</param>
            <returns>The API will extract the encoded substrings (ex: CFT81.4,O75.3,O03-O07,O08.0,T88.0,T80.2+) 
            from a codehint string, expand the delimited list of codes to include all codes within the ranges specified, 
            and for each code obtains a list of the Medcin terms that are mapped to each code and have reportable codes. 
            The resulting list is returned with each list item delimited with a newline character, 
            and fields within an item delimited with a tab character. 
            List items that identify a code parsed from the hint have the following fields: id=0, code, description. 
            List items that identify a finding mapped to a code have the following fields: Medcinid, nodekey, description; 
             if the mode value has bit 8 set (256), the description includes the code delimited with a tilde character.</returns>
        </member>
        <member name="M:Medicomp.IConnection.UserFindingCodes(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method adds cpt and icd codes to a user-finding or it changes or adds codes to an existing medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <seealso cref="M:Medicomp.Connection.AddUserFinding(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.UserFindingRange(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Medicomp.Connection.NextUdf"/>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">is the id of the user-finding or MEDCIN finding for which the code information.</param>
            <param name="icd9">icd9cm code</param>
            <param name="icd2">secondary incd9cm code.</param>
            <param name="icdh">icd9cm code to use when finding has the history prefix.</param>
            <param name="icdf">icd9cm code to use when finding has the family history prefix.</param>
            <param name="cpt">is the cpt code.</param>
            <param name="cptmod">is the cpt code modifier.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.UserFindingProperties(System.Int32,System.String)">
            <summary>
            This method allows for modifying properties of a user defined finding
            </summary>
            <param name="userid">Is the id of the user-finding for which the properties information modifies.</param>
            <param name="properties">A string that encodes the property modifications.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.UserFindingRange(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method adds units of measure and normal ranges for male and female to a user finding or it 
            changes or adds to an existing medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <seealso cref="M:Medicomp.Connection.UserFindingCodes(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.AddUserFinding(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.NextUdf"/>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">This is the id of the user-finding or MEDCIN finding for which the code information applies.</param>
            <param name="unitsofmeasure">units of measure for this finding.</param>
            <param name="femlowrange">low side of normal range for female</param>
            <param name="femhighrange">high side of normal range for female.</param>
            <param name="malelowrange">low side of normal range for male.</param>
            <param name="malehighrange">high side of normal range for male.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.IConnection.WordSearch(System.String)">
            <summary>
            This method creates a reserved list of findings that contain the search words. Word completion 
            also occurs; a search word 'leg' will also locate findings that contain the word 'legs'.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)"/>
            <param name="words">Sting of words to search for. Words are 'anded', meaning a finding has to 
            have all words.</param>
            <returns>Returns how many related terms were found.</returns>
            <remarks>In this method of <i>Word Search Based Prompting</i>, the user enters search words. All 
            MEDCIN terms that are associated with those words are located and then made available for prompting.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.AddFindingImage(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Method to add an image to a finding for HTML rendering.
            </summary>
            <param name="Itemid">is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Align">Specifies the alignment of the image: Left, Right, Top, Middle, Bottom; Left is the default.</param>
            <param name="Border">Specifies the width of the border in pixels; 0 is the default.</param>
            <param name="Clear">If Align is L or R, then specify 0 for text to flow around image or 1 to break text.</param>
            <param name="HorizontalSpace">Specify the surrounding horizontal white space in pixels.</param>
            <param name="VerticalSpace">Specify the surrounding vertical white space in pixels.</param>
            <param name="ImagePath">The full path specification identifying the image.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>This method may be useful to add an image to the HTML rendering of a note. When the narrative
            output is HTML, the image is emitted in the document as an 'IMG' tag. When the narrative output is RTF,
            the image is added to the RTF document text simply as a 'field' instruction using an 'INCLUDEPICTURE' tag.
            This renders in Microsoft Word as a picture; none of the styling parameters are embedded. If your
            application makes use of an RTF control that does niot render these fields, you will have to
            post process the text string and replace the field information with an equivalent pict element and embed
            the actual image file in the document.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddFindingImage(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Method to add an image to a history pool finding for HTML rendering.
            </summary>
            <param name="Seq">is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Align">Specifies the alignment of the image: Left, Right, Top, Middle, Bottom; Left is the default.</param>
            <param name="Border">Specifies the width of the border in pixels; 0 is the default.</param>
            <param name="Clear">If Align is L or R, then specify 0 for text to flow around image or 1 to break text.</param>
            <param name="HorizontalSpace">Specify the surrounding horizontal white space in pixels.</param>
            <param name="VerticalSpace">Specify the surrounding vertical white space in pixels.</param>
            <param name="ImagePath">The full path specification identifying the image.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>This method may be useful to add an image to the HTML rendering of a note. When the narrative
            output is HTML, the image is emitted in the document as an 'IMG' tag. When the narrative output is RTF,
            the image is added to the RTF document text simply as a 'field' instruction using an 'INCLUDEPICTURE' tag.
            This renders in Microsoft Word as a picture; none of the styling parameters are embedded. If your
            application makes use of an RTF control that does not render these fields, you will have to
            post process the text string and replace the field information with an equivalent pict element and embed
            the actual image file in the document.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetCaption(Medicomp.CaptionModes,System.Int32)">
            <summary>
            Method to obtain a caption for a given item
            </summary>
            <param name="Mode">Any combination of the CaptionModes enumeration.</param>
            <param name="Code">The identifier for the item based on the requested Mode.</param>
            <returns>A string containing the requested caption(s) is returned.</returns>
        </member>
        <member name="M:Medicomp.IConnection.MedcinidFromNodekey(System.String)">
            <summary>
            Method to obtain a Medcinid given a nodekey
            </summary>
            <param name="Nodekey">The nodekey for which the Medcinid is desired.</param>
            <returns>The Medcinid if nodekey is valid.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddNarrateCode(System.Int32,System.Int32,System.String)">
            <summary>
            Method to add a code string or description to a finding instance
            </summary>
            <param name="Itemid">This is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Mode">Determines the use made of CodeStr. Mode=0 for CodeStr specifying CodeSet,Code;
            Mode=1 specifying CodeStr is a full description.</param>
            <param name="CodeStr">Contains either an encoded CodeSet,Code or a complete description;
            the interpretation depends on the Mode parameter.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
        </member>
        <member name="M:Medicomp.IConnection.HistAddNarrateCode(System.Int32,System.Int32,System.String)">
            <summary>
            Method to add a code string or description to a history pool finding instance
            </summary>
            <param name="Seq">This is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Mode">Determines the use made of CodeStr. Mode=0 for CodeStr specifying CodeSet,Code;
            Mode=1 specifying CodeStr is a full description.</param>
            <param name="CodeStr">Contains either an encoded CodeSet,Code or a complete description;
            the interpretation depends on the Mode parameter.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
        </member>
        <member name="M:Medicomp.IConnection.GetCodeDescription(Medicomp.CodeLinks,System.String)">
            <summary>
            Method obtains the code description for a given code, if available.
            </summary>
            <param name="CodeSet">One of the CodeLinks enumerations that specifies the code set.</param>
            <param name="Code">The code string for which the description is desired.</param>
            <returns>The description for the requested code is returned if the CodeSet and Code are
            available from the server.</returns>
        </member>
        <member name="M:Medicomp.IConnection.AddEncounterHeadings(System.String,System.Int32,System.String)">
            <summary>
            Method to add headings for encounter narration
            </summary>
            <param name="encountertime">The time fo the encounter to match up with the time passed in AddEncounter.</param>
            <param name="Mode">A number that describes the use of the Headings string.</param>
            <param name="Headings">A tab-delimited string containing subheadings.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>The only mode currently acceptable is mode=1; this specifies that the
            Headings parameter contains chapter heading strings.</remarks>
        </member>
        <member name="M:Medicomp.IConnection.HistAddEncounterHeadings(System.String,System.Int32,System.String)">
            <summary>
            Method to add headings for encounter narration of a history pool encounter.
            </summary>
            <param name="encountertime">The time of the encounter to match up with the time passed in HistAddEncounter.</param>
            <param name="Mode">A number that describes the use of the Headings string.
            Use Mode=1 for chapter headings; Mode=2 for Miscellaneous SubGroup headings.</param>
            <param name="Headings">A tab-delimited string containing subheadings,
            or a Tab-delimited string containing miscellaneous group subgroup headings.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>See the AddEncounterHeadings API for additional information. Note that Mode=2 with an empty
            encountertime is invalid for the history pool API.
            <para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.IConnection.GetServerProperties(Medicomp.ServerItems,System.Int16)">
            <summary>
            Method that can be used to recover various properties relating to the server's operation
            </summary>
            <param name="serveritems">Any combination of ServerItems flags</param>
            <param name="mode">The mode setting for the data requested.</param>
            <returns>A string that contains a tab-delimited set of server data items. 
            Each field begins with a 3-character string (2-characters followed by '=') that designates the item</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetSubGroup(System.Int32,System.Int16)">
            <summary>
            Method can be used to set the subgroup assignment for a finding in one of the miscellaneous narrative groups
            </summary>
            <param name="Itemid">This is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="SubGroup">The subgroup you want to assign (0-n).</param>
            <returns>False will be returned if an error is encountered locally.</returns>
        </member>
        <member name="M:Medicomp.IConnection.SetNoDelay(System.Boolean)">
            <summary>
            API to enable or disable the NoDelay state of the underlying socket
            </summary>
            <param name="state">True to enable the option; False to disable the option.</param>
        </member>
        <member name="M:Medicomp.Connection.#ctor">
            <summary>
            This constructor attempts a Medcin server connection using 'localhost' as the hostname,
            and '8080' as the port number.
            </summary>
            <seealso cref="M:Medicomp.Connection.MedcinInit"/>
        </member>
        <member name="M:Medicomp.Connection.#ctor(System.String)">
            <summary>
            This constructor attempts a Medcin server connection using the 'host' parameter as the hostname,
            and '8080' as the port number.
            </summary>
            <param name="host">This should contain the domain name or dotted IP address of the Medcin server.</param>
            <seealso cref="M:Medicomp.Connection.MedcinInit"/>
        </member>
        <member name="M:Medicomp.Connection.#ctor(System.Int32)">
            <summary>
            This constructor attempts a Medcin server connectionn using 'localhost' and the passed port
            </summary>
            <param name="port">This should contain the port address of the Medcin server.</param>
            <seealso cref="M:Medicomp.Connection.MedcinInit"/>
        </member>
        <member name="M:Medicomp.Connection.#ctor(System.String,System.Int32)">
            <summary>
            This constructor attempts a Medcin server connection using the 'host' parameter as the hostname,
            and the 'port' parameter as the port number.
            </summary>
            <param name="host">This should cotain the domain name or dotted IP address of the Medcin server.</param>
            <param name="port">This should contain the port address of the Medcin server.</param>
            <seealso cref="M:Medicomp.Connection.MedcinInit"/>
            <remarks>MEDCIN servers are a read-only resource. From a network perspective, access to MEDCIN 
            servers need not be centralized like access to the patient chart database. On a large network, 
            it's best to deploy multiple MEDCIN servers at a subnet level in order to save bandwidth on 
            the backbone that's used for processes that require centralized access.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Finalize">
            <summary>
            The destructor automatically issues a MedcinEnd.
            </summary>
        </member>
        <member name="M:Medicomp.Connection.onError(Medicomp.ErrorEventArgs)">
            <summary>
            The protected OnError method raises the ErrorEvent event by invoking the delegates.
            The sender is always this, the current instance of the class.
            </summary>
            <param name="e">An ErrorEventArgs object that contains the event data.</param>
            <remarks>If the application has not added an event handler, the event will not be raised.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Activation">
            <summary>
            Handles packed build list record data
            </summary>
            <returns>An ArrayList of ResponseItem structures is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.stringerror(System.Exception)">
            <summary>
            Support function for handling errors in APIs returning a string
            </summary>
            <param name="e">The original exception</param>
            <returns>An empty string is returned</returns>
        </member>
        <member name="M:Medicomp.Connection.boolerror(System.Exception)">
            <summary>
            Support function for handling errors in APIs returning a bool
            </summary>
            <param name="e">The original exception</param>
            <returns>false is returned</returns>
        </member>
        <member name="M:Medicomp.Connection.interror(System.Exception)">
            <summary>
            Support function for handling errors in APIs returning an int
            </summary>
            <param name="e">The original exception</param>
            <returns>0 is returned</returns>
        </member>
        <member name="M:Medicomp.Connection.shorterror(System.Exception)">
            <summary>
            Support function for handling errors in APIs returning a short
            </summary>
            <param name="e">The original exception</param>
            <returns>0 is returned</returns>
        </member>
        <member name="M:Medicomp.Connection.doubleerror(System.Exception)">
            <summary>
            Support function for handling errors in APIs returning a dopuble
            </summary>
            <param name="e">The original exception</param>
            <returns>0 is returned</returns>
        </member>
        <member name="M:Medicomp.Connection.arraylisterror(System.Exception)">
            <summary>
            Support function for handling errors in APIs returning an ArrayList
            </summary>
            <param name="e">The original exception</param>
            <returns>An empty ArrayList is returned</returns>
        </member>
        <member name="M:Medicomp.Connection.ShowAbout(System.String,System.String,System.Boolean)">
            <summary>
            Procedure to show the About dialog
            </summary>
            <param name="Component">The name of the component.</param>
            <param name="Version">The version o the component.</param>
            <param name="Licensed">True if the component is licensed; False otherwise.</param>
        </member>
        <member name="M:Medicomp.Connection.IsOpen">
            <summary>
            This method can be used to determine if the component is connected to a Medcin server.
            </summary>
            <returns>Returns True if connected; False if not.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetLastError">
            <summary>
            This method can be used to retrieve the last exception that occurred.
            </summary>
            <returns>The last exception is returned; null if no error was detected.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetStateKey">
            <summary>
            This function tells the server to save the state of the client.  
            It returns a string that is the key to be passed when the state 
            is to be restored after reconnection to the server.  
            This method should be invoked just prior to MedcinEnd() during program termination.
            </summary>
            <seealso cref="M:Medicomp.Connection.RestoreState(System.String)"/>
            <returns>This method returns a zero if the client state cannot be saved, and returns a 
            statekey if the state is successfully saved.</returns>
            <remarks>This feature only maintains one state for a given connection; 
            it will not allow the client to maintain multiple states that can be swapped.
            <para>The LINUX servers are currently configured to support 256 simultaneous 
            connections, and an additional 2048 states from previous connections. The Win/NT server uses 
            the IOCP functionality to support 6000 simultaneous connections (see 
            <see url="http://support.microsoft.com/default.aspx?scid=kb;en-us;192800">Microsoft KB Q192800</see>) 
            and an additional 2048 states from previous connections. Slots for states are given out on a 
            Least Recently Used basis. State info may be lost if 2048 new connections occur prior to 
            reconnection. Additional state capacity can be easily added. </para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.RestoreState(System.String)">
            <summary>
            This method restores the client's state from the previous session by passing 
            the previous session's statekey that was obtained via GetStateKey().
            </summary>
            <seealso cref="M:Medicomp.Connection.GetStateKey"/>
            <param name="key">the previous session's statekey</param>
            <returns>returns 0 if state restored</returns>
            <remarks>This method restores the client's state from the previous session by passing the previous
            session's statekey (obtained via GetStateKey()). If the return code is zero the state is restored,
            if the return code is one the state cannot be restored. If state is not restored the client must
            pass its state info again via Setpatient(), Addchart(), AddNarrate(), etc.
            When successful, the state is restored completely as if the original session remained connected</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetIpDx">
            <summary>
            Reserved for future use
            </summary>
            <returns>Returns the intelligent prompt list of calculated diagnoses.</returns>
            <remarks>This is an experimental API that provides data with no intended purpose.</remarks>
        </member>
        <member name="M:Medicomp.Connection.MedcinEnd">
            <summary>
            This method closes the socket connection and de-allocates memory. 
            This should be invoked just before the program terminates.
            </summary>
        </member>
        <member name="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            The addchart method passes patient chart information to the MEDCIN server.  
            These findings are used for the IP calculation.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.
            If 0, then the IP list maintained by the server will be loaded directly 
            from the current encounter.</param>
            <param name="onset">Minutes since birth. If the medcinid parameter is 0, 
            then a non-zero in this parameter will clear the existing IP list by performing 
            a ClearChartFindings before the current encounter is added to the IP list.</param>
            <param name="duration">in minutes</param>
            <param name="prefix">The prefix qualifier code.</param>
            <param name="result">The result qualifier code.</param>
            <param name="scale">The scale field is usually calculated using the function CalcScale.</param>
            <returns>returns True if successful, False otherwise</returns>
            <remarks>AddChart can also be used to have the server automatically
            populate its IP list directly from the current encounter list. Use a
            0 for the medcinid parameter for this purpose. In addition, the server
            can automatically clear the current IP list by passing the onset
            parameter as any non-zero value when medcinid is passed as 0.</remarks>
        </member>
        <member name="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            This removes a single entry from the list added via AddChart
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">minutes since birth</param>
            <param name="duration">in minutes</param>
            <param name="prefix">the prefix qualifier code</param>
            <param name="result">the result qualifier code</param>
            <param name="scale">The scale field is calculated using the function CalcScale</param>
            <returns>returns True if successful, False otherwise</returns>
            <remarks>Uses the exact same arguments as AddChart().</remarks>
        </member>
        <member name="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            The function HaveList() is used to determine which termtypes of findings exist in 
            the intelligent prompt response list based on the listsize argument.  
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <param name="listsize">The list size in question. (Int16 for ActiveX and Java)</param>
            <param name="termtype">The terminology type in question. (Int16 for ActiveX)</param>
            <returns>This function returns the Boolean value of true if the requested listsize 
            contains the requested termtype.</returns>
            <remarks>Note that the termtype ALL_TYPES will return true if any termtypes exist 
            in the list specified by the termtype argument.
            <para>This information could be used on a tabbed display (where one tab is for each 
            termtype) to highlight tabs showing the user which termtypes are available.  
            When the user selects a tab, invoke activate to load the tab with the termtype.  
            If the user entered data into the chart on the previous tab (and addchart was invoked), 
            invoking calculate prior to activate would create an updated prompting list for the 
            selected tab based on the new chart information.  The more chart information 
            (passed via AddChart()) the IP function has about the patient, the more pertinent 
            the resulting lists will be displayed to the user.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)">
             <summary>
             This method is used to obtain an intelligent prompt list.
             </summary>
             <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
             <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
             <seealso cref="M:Medicomp.Connection.Calculate"/>
             <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
             <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
             <seealso cref="M:Medicomp.Connection.SetDoctorid(Medicomp.DocCodes,System.Int32)"/>
             <seealso cref="T:Medicomp.ResponseItem"/>
             <param name="listsize">This argument provides for three different list sizes. 
             Shortlist=1, Longlist=2, Fulllist=3 (Int16 for ActiveX and Java)</param>
             <param name="termtype">The termtype argument restricts the returned list to the related termtypes (Int16 for ActiveX)</param>
             <returns>The list of relevant terms as an ArrayList of ResponseItem data structures.</returns>
             <remarks>The goal of this method is to calculate and then present the most 
             applicable list of terms possible to a provider for entry at the point of care.  
             The results of the calculation are returned as a list of MEDCIN terms.  
             The list can be retrieved in three sizes each varying in amount of detail, 
             and each list can be subdivided into the six term types.
             <para>A short list is restricted to records in the diagnostic table that have the 
             iprompt field set to 2. A long list starts with records in the diagnostic table 
             with the iprompt field set to 1 or 2, and then children are removed if positive parental 
             findings are not in the chart data. A full list is all records that have a 1 or 2.  
             A short list is the briefest. A long list contains more parents but children are 
             removed if respective parents are not in the chart. A full list is all of the IP findings.</para>
             <para>The ArrayList contains an item for every medcinid (with prefix) that should be added 
             to the presentation list for entry. The arguments should be all the fields that are 
             required to build a tree view for presentation. The CalculatedDx field is set to True 
             if the medcinid refers to a computed diagnosis from which the intelligent prompting 
             lists are derived from. The Description field is the description of the medcinid. 
             The Subs field indicates that the medcinid has children. Note that the data passed 
             in the fields of the ResponseItems may vary based on BuildListMode. Note that
             the same finding may appear more than once in this list where different prefixes 
             for duplicate medcinids are specified.</para>
             <para>
             The intelligent prompting engine utilizes the provider role to alter the characteristics 
             of prompting based on the provider role. When the provider role is Doctor or None, 
             prompting behaves as it has in the past with the exception that nurse specific diagnoses 
             are not surfaced. When the provider role is Nurse, only nursing diagnoses are surfaced 
             for the diagnoses term type in the response list of an IP request. When the current 
             provider role includes both doctor and nurse, the response list of an IP will include 
             both doctor findings and nurse findings. Nursing findings are the specific set of findings 
             that have been added to the Medcin knowledge base associated with the Clinical Care 
             Classification System  (see: http://www.sabacare.com) for nursing.
             </para>
             <example>Illustrates IP of a complete encounter
             <code>
             private void BuildIPPrompt(bool Regenerate, int medcinid, IPListMode mode)
             {
                if (mode != IPListMode.Default) PromptListMode=mode;
                Medicomp.BuildListModes blmode = BuildListModes.medNormal;
                try
                {
                    // Initialize the tree's root nodes without buttons
                    InitializeRootNodes(false);
                    if (iCD9OnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICDonly;
            #if BUILDV22
                     if (ICD10CMOnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICD10CMOnly;
            #endif
                     Medconn.BuildListMode(blmode);
                     // If IP is dirty, we have to load the encounter findings into
                     // the server. This can be done for each finding using the AddChart API,
                     // or we can have the server add them directly by passing a 0 for Medcinid here.
                     // We set the onset parameter to non-zero which tells the server to clear
                     // any existing IP findings first.
                     if (IPDirty || Regenerate)
                     {
                         if (medcinid == 0) Medconn.ClearChartFindings();
                         Medconn.AddChart(medcinid, 1, 0, "", "", 0);
                         Medconn.Calculate();
                         IPDirty = false;
                     }
                     if (PromptListMode == IPListMode.List)
                     {
                         System.Collections.ArrayList dxlist = Medconn.GetIpDx();
                         for (int i = 0; i &lt; dxlist.Count; i++)
                         {
                             AddResponseItemToTree((ResponseItem)dxlist[i]);
                         }
                         ViewResponseList(dxlist);
                         PromptSizeMode = IPMode.IP;
                     }
                     else
                     {
                         short count = Medconn.HaveList(myListSize, MedTermtypes.medTermAll);
                         if (count &gt; 0)
                         {
                             // There are 3 list sizes available; here we force the mid-size
                             System.Collections.ArrayList rl = Medconn.Activate(myListSize, MedTermtypes.medTermAll);
                             for (int i = 0; i &lt; rl.Count; i++)
                             {
                                 AddResponseItemToTree((ResponseItem)rl[i]);
                             }
                             ViewResponseList(rl);
                             PromptSizeMode = IPMode.IP;
                         }
                         else
                         {
                             MessageBox.Show("There is no Intelligent Prompt data for your encounter");
                         }
                     }
                 }
                 catch (Exception ex)
                 {
                     MessageBox.Show(ex.Message);
                 }
             }
             </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.Calculate">
            <summary>
            This method performs the IP calculation and creates lists of findings to use as 
            prompting for data entry. These lists are reserved until new chart information 
            is added via Addchart(). The list is retrieved by using the Activate() method.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>
            <example>The following example illustrates prompting for a single finding:
            <code>
             private void BuildIPPrompt(bool Regenerate, int medcinid)
             {
               Medicomp.BuildListModes blmode = BuildListModes.medNormal;
               try
               {
                   // Initialize the tree's root nodes without buttons
                   InitializeRootNodes(false);
                   if (iCD9OnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICDonly;
            #if BUILDV22
                   if (iCD10CMOnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICD10CMOnly;
            #endif
                   Medconn.BuildListMode(blmode);
                   // If IP is dirty, we have to load the encounter findings into
                   // the server. This can be done for each finding using the AddChart API,
                   // or we can have the server add them directly by passing a 0 for Medcinid here.
                   // We set the onset parameter to non-zero which tells the server to clear
                   // any existing IP findings first.
                   if (IPDirty || Regenerate)
                   {
                       if (medcinid == 0) Medconn.ClearChartFindings();
                       Medconn.AddChart(medcinid, 1, 0, "", "", 0);
                       Medconn.Calculate();
                       IPDirty = false;
                   }
                   short count = Medconn.HaveList(myListSize, MedTermtypes.medTermAll);
                   if (count &gt; 0)
                   {
                       // There are 3 list sizes available; here we force the mid-size
                       System.Collections.ArrayList rl = Medconn.Activate(myListSize, MedTermtypes.medTermAll);
                       for (int i = 0; i &lt; rl.Count; i++)
                       {
                           AddResponseItemToTree((ResponseItem)rl[i]);
                       }
                       ViewResponseList(rl);
                       PromptSizeMode = IPMode.IP;
                   }
                   else
                   {
                       MessageBox.Show("There is no Intelligent Prompt data for your encounter");
                   }
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
             }
            </code></example>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.ClearChart(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method has been replaced by SetPatient and ClearChartFindings. 
            These two functions separate the functionality of the existing ClearChart() 
            function making a more logical API.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <param name="age">Patient’s age in minutes. The 15768000 is 80 year old in minutes 
            (30yrs * 365* 1440). This method is precise enough to support the algorithms.</param>
            <param name="gender">Patient’s gender. 'M' = Male, 'F' = Female, 'U' = unknown.  
            Use unknown when prompting should supply non-gender specific findings.</param>
            <param name="ethnic">One of the qualifier codes for ethnicity.</param>
            <param name="religion">One of the qualifier codes for religion.</param>
            <param name="race">One of the qualifier coes for race.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The IP (Intelligent Prompting) algorithm needs to be passed the patient's age, 
            gender, ethnicity, religion, and race. In addition, the narrative generation 
            functions need to know the patient's name and birthdate. These fields are set 
            with the SetPatient() function. The information will stay set until SetPatient() 
            is called again.
            </summary>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="age">Patient’s age in minutes. The 15778800 is 80 year old in minutes 
            (30yrs * 365.25* 1440). This method is precise enough to support the algorithms.</param>
            <param name="gender">Patient’s gender. 'M' = Male, 'F' = Female, 'U' = unknown.  
            Use unknown when prompting should supply non-gender specific findings.</param>
            <param name="ethnic">One of the qualifier codes for ethnicity.</param>
            <param name="religion">One of the qualifier codes for religion.</param>
            <param name="race">One of the qualifier coes for race.</param>
            <param name="patientname">The name of the patient formatted for presentation. 
            For example, 'John Doe',  'Mrs. Smith', 'Mr. George Jetson', and 'Ms. Penelope 
            Flowers' are all possible name strings.</param>
            <param name="birthdate">The birthdate of the patient. The format is 'YYYYMMDDHHIISS' 
            for as much precision as the birthdate is recorded (usually 'YYYYMMDD'. For example, 
            '18980507' designates May 7, 1898. If you use the hours precision, hours should be 
            in 24-hour time.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.ClearChartFindings">
            <summary>
            This function clears all findings that have been added with the Addchart() function
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.Calculate"/>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetPatientGeneric(System.Boolean)">
            <summary>
            When an end-user is building a generic protocol this function is handy to temporarily 
            set the patient's demographics to neutral so that all findings are displayed.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <param name="on">TRUE sets the patient to a neutral gender, age, ethnicity, 
            religion, and race. FALSE resets the patient information to before being 
            called with TRUE.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>All prompting functions filter findings based on the patient's demographics 
            (i.e. female findings are dropped for male patients, emphysema would be strongly 
            discriminated against for patient's under 35 years and mildly for patients under 
            50 years). When finished with building the protocol the patients demographics can 
            be restored by calling this function with FALSE. This could also be accomplished 
            with multiple calls to SetPatient. </remarks>
        </member>
        <member name="M:Medicomp.Connection.MedcinInit">
            <summary>
            This method performs initialization and should be the first API called.
            </summary>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetDebugOutput(System.Int16)">
            <summary>
            This method is used to set the level of connection-specific debug output
            written to the medcinserv.log debug file.
            </summary>
            <param name="nNewValue">This feature is activated by setting the DebugOutput 
            property to 1, 2, or 3. A 0 turns off writing connection debugging info.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>
            For debug output, a file named “medcinserv.log” is created in the directory where 
            the medcin variable data files are located. Some debug output will be generated by 
            the server based on the server’s Debug setting. Server programs have command line 
            arguments for this function. Optionally, debugging output may be produced for the 
            client connection, when this setting is set to a value other than 0. 
            DebugOutput can be set to 1 (LOG), 2 (TERSE), 3 (VERBOSE), or 4 (FULLVERBOSE). 
            1 is the least output, 4 gives the most output
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.SetDataDir(System.String)">
            <summary>
            This method has no functionality for the V21 client - server implementation.
            For V22, it is used to initiate a hot update of the server data files, 
            provided the server option allowupdate is enabled.
            </summary>
            <param name="path">Path pointing to new release Medcin data files.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The V22 Medcin server provides a means of updating the server’s data files with a 
            new release of data without having to shut the server down and restart it. This process is referred 
            to as 'hot update'. To accomplish the hot update, the Medcin server global option 'allowupdate' with 
            a value enabling the option must be added to the medcin.ini file of the server, and the enabled option 
            must be in effect. To prepare for using hot update the first time, add the setting to the medcin.ini file 
            before starting the latest V22 Medcin server provided with the release.
            <para>To accomplish a hot update, copy the data files of the new release to a temporary folder on the 
            computer that hosts the Medcin server to be updated. Invoke the SetDataDir API passing the folder path 
            as the parameter of the API. The hot update will commence when the server detects that no clients are 
            connected (i.e. the number of client connections drops to 0). The hot update performs the following steps:</para>
            <list type="bullets">
            <item><description>Validates that all required files that the server needs are located in the update folder. 
            Optional files used by the server that are located in the update folder will be copied and used. 
            The Server Data Files section points out what files are required and what are optional. 
            Note that for the purposes of the hot update, the medcin.codedates file is considered optional 
            but will be updated if present in the update folder.</description></item>
            <item><description>Removes all old backup files from the appropriate server data folders.</description></item>
            <item><description>Releases all memory allocated by the server for all existing data files. 
            Currently, state data preserved using the GetStateKey API will persist.</description></item>
            <item><description>Backs up all existing files in their current location that have a new update.</description></item>
            <item><description>Copies all the new files to the appropriate data folders used by the server.</description></item>
            <item><description>Performs the server initialization functions using the new data files.</description></item>
            <item><description>If the allowupdate setting is 1 or 2, removes the new data files from the update folder.</description></item>
            <item><description>If the allowupdate setting is 3, removes the backup files from the appropriate server data folders.</description></item>
            </list>
            <para>The process of updating the server’s data files takes anywhere from 2 to 5 seconds depending on the files 
            that are in the update folder. If the server encompasses an error in backing up existing files or copying new files, 
            it will attempt to revert to the current files and perform the server initialization. 
            When it cannot do this, it indicates a catastrophic error and will shut down.</para>
            <para>During the hot update, numerous messages will be logged to the medcinserv.doc log file. 
            This file is kept open during the update and will continue to be used after the hot update.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.Nodekey(System.Int32)">
            <summary>
            This method obtains the Medcin nodekey for the given Medcin finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The nodekey is returned if successful; otherwise an empty string.</returns>
            <remarks>The nodekey uniquely identifies a medical term and also indicates the hierarchical 
            level of  the term. The nodekey represents 10 levels of hierarchy (0-9), each level being 
            2 bytes. The length of the nodekey is equal to (level + 1) * 2.  Nodekey  'ABCD' is a 
            parent of 'ABCD*'. In this documentation, higher level findings refer to nodekeys that 
            are parents, grandparents, etc. For example 'AA' is a parent of 'AABC', but 'AA' is not 
            a parent of 'ABBC'. Lower level findings are children, grandchildren, etc.  Lower level 
            findings always convey more detailed medical information than their parent. For example. 
            the parent 'cough' would have children like 'cough which occurs after eating' or 'cough 
            which is worse in the morning'.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Termtype(System.Int32)">
            <summary>
            This method obtains the terminology type (domain) of the designated finding which indicates
            the type of medical term.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>One of the terminology types
            <list type="table">
            <listheader><term>Value</term><description>Terminology Classification</description></listheader>
            <item><term>1</term><description>Symptom</description></item>
            <item><term>2</term><description>Physical Examination</description></item>
            <item><term>3</term><description>Test</description></item>
            <item><term>5</term><description>History</description></item>
            <item><term>6</term><description>Diagnosis</description></item>
            <item><term>7</term><description>Therapy</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Medicomp.Connection.Specialty(System.Int32)">
            <summary>
            Specialty contains up to four one-byte codes identifying the specialty relevant to the finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The set of specialty codes assigned to the designated finding. See QualifierList for SPECIALTY.</returns>
            <remarks>The following table enumerates the posible codes:
            <list type="table">
            <listheader><term>Specialty Code</term><description>Code Description</description></listheader>
            <item><term>1</term><description>Trauma</description></item>
            <item><term>A</term><description>Gastroenterology</description></item>
            <item><term>B</term><description>Orthopedics</description></item>
            <item><term>C</term><description>Cardiology</description></item>
            <item><term>D</term><description>Dermatology</description></item>
            <item><term>E</term><description>Endocrinology</description></item>
            <item><term>F</term><description>Obstetrics</description></item>
            <item><term>G</term><description>Gynecology</description></item>
            <item><term>H</term><description>Hematology</description></item>
            <item><term>I</term><description>Infectious Disease</description></item>
            <item><term>J</term><description>Dentistry</description></item>
            <item><term>K</term><description>Nephrology</description></item>
            <item><term>M</term><description>Metabolic</description></item>
            <item><term>N</term><description>Neurology</description></item>
            <item><term>O</term><description>Oncology</description></item>
            <item><term>P</term><description>Pulmonary Medicine</description></item>
            <item><term>R</term><description>Rheumatology</description></item>
            <item><term>S</term><description>Psychiatry</description></item>
            <item><term>T</term><description>ENT</description></item>
            <item><term>U</term><description>Urology</description></item>
            <item><term>V</term><description>Ophthalmology</description></item>
            <item><term>X</term><description>Genetic Medicine</description></item>
            <item><term>Y</term><description>Pediatrics</description></item>
            <item><term>Z</term><description>Allergy/Immunology</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.Unit(System.Int32)">
            <summary>
            This obtains the standard units of measure for the finding.
            </summary>
            <seealso cref="M:Medicomp.Connection.UnitEnum(System.Int32,System.Int16)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the standard unit string.</returns>
            <remarks>Alternate units and conversion data is in the unit table. The eflags field has bit 
            0x0004 set to indicate that alternate units exist for this finding.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Search(System.Int32)">
            <summary>
            Concise sentence form description of term that is displayed as a result of a search or 
            other prompting. This description presents a 'positive' or 'abnormal' form of the term.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Svoice(System.Int32)">
            <summary>
            Concise sentence form description of term that has minimal conflicts for voice recognition
            systems using the string as a command.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Nomin(System.Int32)">
            <summary>
            Text description of term as shown in the publication 'MEDCIN a New Nomenclature', 
            published by Springer Verlog.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
            <remarks>The 'Nomin' string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Nvoice(System.Int32)">
            <summary>
            Concise 'Nomin' form description of term that has minimal conflicts for voice recognition
            systems using the string as a command.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The description of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Sdocpos(System.Int32)">
            <summary>
            Sentence form of term is phrased in a 'positive' or 'abnormal' sense using 'professional' 
            terminology used for sentence narration.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor positive sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Sdocneg(System.Int32)">
            <summary>
            Sentence form of term is phrased in a 'negative' or 'normal' sense using 'professional' 
            terminology used for sentence narration.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor negative sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Spatpos(System.Int32)">
            <summary>
            Sentence form is phrased in a 'positive' or 'abnormal' sense using 'layman' or 'patient' 
            terminology used for sentence narration.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay positive sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Spatneg(System.Int32)">
            <summary>
            Sentence form is phrased in a 'negative' or 'normal' sense using 'layman' or 'patient' 
            terminology used for sentence narration.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay negative sentence form of the designated finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.Pdocpos(System.Int32)">
            <summary>
            Description of term is phrased in a 'positive' or 'abnormal' sense using 'professional' 
            terminology used for narration when adding a phrase to a sentence.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor positive phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Pdocneg(System.Int32)">
            <summary>
            Description of term is phrased in a 'negative' or 'normal' sense using 'professional' 
            terminology used for narration when adding a phrase to a sentence.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The doctor negative phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Ppatpos(System.Int32)">
            <summary>
            Description is phrased in a 'positive' or 'abnormal' sense using 'layman' or 'patient' 
            terminology used for narration when adding a phrase to a sentence.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay positive phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Ppatneg(System.Int32)">
            <summary>
            Description is phrased in a 'negative' or 'normal' sense using 'layman' or 'patient' 
            terminology used for narration when adding a phrase to a sentence.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The lay negative phrase form of the designated finding.</returns>
            <remarks>The phrase string is typically hierarchical in nature. This means that the
            description for a finding at a particular node level includes only that context
            which differentiates it from its immediate parent.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Rxcode(System.Int32)">
            <summary>
            Obtains the type of therapy
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the therapy type of the finding</returns>
            <remarks>
            Use the QualifierList("RXCODE") API for a completye list of codes.
            The following table lists Medicomp's standard codes.
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>A</term><description>anesthesia</description></item>
                <item><term>C</term><description>counseling</description></item>
                <item><term>D</term><description>disposition</description></item>
                <item><term>E</term><description>exposure</description></item>
                <item><term>G</term><description>glasses</description></item>
                <item><term>I</term><description>infusion</description></item>
                <item><term>M</term><description>medication</description></item>
                <item><term>N</term><description>narcotic</description></item>
                <item><term>P</term><description>procedure</description></item>
                <item><term>R</term><description>consultation</description></item>
                <item><term>S</term><description>surgery</description></item>
                <item><term>T</term><description>transfusion</description></item>
                <item><term>U</term><description>un-coded</description></item>
                <item><term>V</term><description>vaccination</description></item>
                <item><term>W</term><description>work restriction</description></item>
                <item><term>X</term><description>radiation</description></item>
                <item><term>9</term><description>exclude from care plan</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Testcode(System.Int32)">
            <summary>
            Type of test
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the test typ of the finding. See QualifierList(RXCODE)</returns>
            <remarks>The following table lists Medicomp's common test codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>B</term><description>Blood Profiles</description></item>
            <item><term>E</term><description>Electrocardiogram</description></item>
            <item><term>I</term><description>Imaging</description></item>
            <item><term>U</term><description>Urinalysis</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.Riskcode(System.Int32)">
            <summary>
            Indicates level of medical/surgical risk to patient. Typically used for tests and therapies.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the level of risk for the finding</returns>
            <remarks>The following table lists Medicomp's standard risk codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>1</term><description>Minimal risk</description></item>
            <item><term>2</term><description>Low risk</description></item>
            <item><term>3</term><description>Moderate risk</description></item>
            <item><term>4</term><description>Severe risk</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.Privacy(System.Int32)">
            <summary>
            Indicates level of confidentiality for findings like 'AIDS'
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the privacy level</returns>
            <remarks>The following table lists Medicomp's standard privacy codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>1</term><description>Moderate level of confidentiality. 
            Finding should not be exchanged with other systems electronically.</description></item>
            <item><term>2</term><description>Highest level of confidentiality. Viewable only by person 
            originating entry or by permission with access recorded in log.</description></item>
            <item><term>3</term><description>Home care.</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.Complex(System.Int32)">
            <summary>
            Typically a physical finding or diagnosis that requires complex management 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the level of complexity</returns>
            <remarks>The following table lists Medicomp's standard complexity codes:
            <list type="table">
            <listheader><term>Type Code</term><description>Description of Code</description></listheader>
            <item><term>0 or blank</term><description>No complexity</description></item>
            <item><term>1</term><description>Minimal complexity</description></item>
            <item><term>2</term><description>Low complexity</description></item>
            <item><term>3</term><description>Moderate complexity</description></item>
            <item><term>4</term><description>High complexity</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.Cost(System.Int32)">
            <summary>
            Method to obtain the Cost Factor for the Medcinid
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The cost factor is returned. The unit of the factor may vary based on the type of the finding. 
            For nursing action findings, the values are in minutes.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetProperty(System.Int32,System.String,System.Int32)">
            <summary>
            Function to obtain named properties
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="propertyName">The case-sensitive name of the property to be retrieved.
            If an empty string is passed, all properties will be returned using the syntax,
            '<c>propertyName=text[^TpropertyName=text]</c>'. If medcinid is 0, then a list of property names
            is returned using the syntax, '<c>propertyName[^TpropertyName]</c>'.
            </param>
            <param name="mode">A value specific to a propertyName.</param>
            <returns>A string containing the property information requested.</returns>
            <remarks>
            <b>Medcinid=?; propertyName="promptanalysis"; mode=1</b>
            <para>
            For this set of parameters, the server will invoke the calculate API for an intelligent prompt (IP), 
            then return a delimited string that contains specific trace information related to the processing of the algorithm. 
            Be aware that if no IP data entry was made since the last calculate API, an empty string will be returned as a 
            calculation will not be performed. There will be three sets of data. Note that if the findings input to the IP engine 
            are considered all diagnoses, then a Dx Prompt will be performed and the resulting trace data returned will be as 
            documend for <c>dxpromptanalysis</c> as seen below. The Medcinid parameter is ignored.
            </para>
            <list type="number">
            <item>The first set includes the results of the discovery based on the chart findings input using the AddChart API or equivalent.</item>
            <item>The second set are the diagnostic terms related to the first set. This includes any MedcinId that has a non-zero point value 
            or a non-zero flag value indicating it has been considered. The point value could be 0 due to offsetting a positive points 
            with an offsetting negative probability or age adjustment.</item>
            <item>The third set are the findings that make up the response lists regardless of requested size.</item>
            </list>
            Records are deliminated using a newline character ("\n"); fields within a record are delimited using a tab character ("\t").
            <para>Record type 1 includes the following fields:</para>
            <list type="table">
            <listheader><term>Field Identity</term><description>Description</description></listheader>
            <item><term>1</term><description>Record identifier</description></item>
            <item><term>Chart Medcinid</term><description>Medcinid of a finding entered for intelligent prompting</description></item>
            <item><term>Chart Prefix</term><description>Prefix qualifier parameter of the entered term</description></item>
            <item><term>Chart Onset</term><description>Onset parameter of the entered term</description></item>
            <item><term>Data Medcinid</term><description>Medcinid of a discovered finding</description></item>
            <item><term>Data Points</term><description>Total points after age adjustment and gender adjustment</description></item>
            <item><term>Data Delay</term><description>Quantity of minutes in which discovered findings are delayed. The discovered findings must have an onset or entry date delay minutes before the current time.</description></item>
            <item><term>Data Expire</term><description>Quantity of minutes in which discovered findings expire. The discovered findings must have an onset or entry date before expire minutes from the current time.</description></item>
            <item><term>Data Startage</term><description>Starting age range in minutes of patient which is valid for this record; 525960 minutes are a year. If this field is 0 then all ages &lt;= endage are matched.</description></item>
            <item><term>Data Endage</term><description>Ending age range in minutes of patient which is valid for this record; 525960 minutes are a year. If this field is 0 then all ages &gt;= startage are matched.</description></item>
            </list>
            <para>Record type 2 includes the following fields:</para>
            <list type="table">
            <listheader><term>Field Identity</term><description>Description</description></listheader>
            <item><term>2</term><description>Record identifier</description></item>
            <item><term>Data Medcinid</term><description>Medcinid of a discovered finding</description></item>
            <item><term>Data Points Total</term><description>Total points accumulated for the discovered finding</description></item>
            <item><term>Data Points Once</term><description>Once points accumulated for the discovered finding</description></item>
            <item><term>Data Flags</term><description>Flag bits: 0=probability points applied; 1=blank prefix evaluated; 2=F prefix evaluated; 3=AL prefix evaluated; 4=UN prefix evaluated; 5=H prefix evaluated; 6=HR prefix evaluated</description></item>
            <item><term>Description</term><description>Search description for the discovered finding, double quote delimited</description></item>
            </list>
            <para>Record type 3 includes the following fields:</para>
            <list type="table">
            <listheader><term>Field Identity</term><description>Description</description></listheader>
            <item><term>3</term><description>Record identifier</description></item>
            <item><term>Data Medcinid</term><description>Medcinid of a prompted finding</description></item>
            <item><term>Prefix</term><description>Prefix for the prompted finding</description></item>
            <item><term>List Size</term><description>Internal list size for the prompted finiding</description></item>
            <item><term>Description</term><description>Search description for the prompted finding, double quote delimited</description></item>
            </list>
            <para><b>Medcinid=?; propertyName="dxpromptanalysis"; mode=2</b></para>
            <para>For this set of parameters, the server will invoke the calculateDx API for a disease prompt (Dx Prompt), 
            then return a delimited string that contains specific trace information related to the processing of the algorithm. 
            Be aware that if no Dx data entry was made since the last calculateDx API, an empty string will be returned as a 
            calculation will not be performed. Data will be returned in the following sequence; record type numbers appear 
            in parentheses following the sequence number. The Medcinid parameter is ignored.</para>
            <list type="number">
            <item>(4) The finding input using the AddDx API or equivalent.</item>
            <item>(5) The term types needed and satisfied by the Dx.</item>
            <item>(6) The findings that make up the response list for the Dx regardless of requested size.</item>
            </list>
            <para>Items 1-3 are repeated as needed when additional Dx findings are used to satisfy the term type needs. 
            Following all items 1-3 will be a unique list of response items sorted by nodekey, each identified as record type 3. 
            Records are deliminated using a newline character ("\n"); fields within a record are delimited using a tab character ("\t").</para>
            <para>Record type 4 includes the following fields:</para>
            <list type="table">
            <listheader><term>Field Identity</term><description>Description</description></listheader>
            <item><term>4</term><description>Record identifier</description></item>
            <item><term>Chart Medcinid</term><description>Medcinid of a finding entered for disease prompting</description></item>
            <item><term>Description</term><description>Search description for the finding, double quote delimited</description></item>
            </list>
            <para>Record type 5 includes the following fields:</para>
            <list type="table">
            <listheader><term>Field Identity</term><description>Description</description></listheader>
            <item><term>5</term><description>Record identifier</description></item>
            <item><term>Types</term><description>Set of term types satisfied, as letters: SHPTDR</description></item>
            <item><term>Types Needed</term><description>Set of term types needed, as letters: SHPTDR</description></item>
            </list>
            <para>Record type 6 has the same format as record type 3</para>
            <list type="table">
            <listheader><term>Field Identity</term><description>Description</description></listheader>
            <item><term>3</term><description>Record identifier</description></item>
            <item><term>Data Medcinid</term><description>Medcinid of a prompted finding</description></item>
            <item><term>Prefix</term><description>Prefix for the prompted finding</description></item>
            <item><term>List Size</term><description>Internal list size for the prompted finiding</description></item>
            <item><term>Description</term><description>Search description for the prompted finding, double quote delimited</description></item>
            </list>
            <para><example><b>Querying for properties</b>
            <code>
            #if BUILDV22
               sb.Append("AllTermProperties:"); sb.AppendLine(Medconn.GetProperty(0, "",0));
               sb.Append("All Types: "); sb.AppendLine(Medconn.GetProperty(CurrentMedcinid,"",0));
               sb.Append("Type: Takes: "); sb.Append(Medconn.GetProperty(CurrentMedcinid,"Takes",0));
            #endif
            </code>
            <b>Prompt Analysis</b>
            <code>
             private void testMenuToolStripMenuItem_Click(object sender, EventArgs e)
             {
               if (CurrentMedcinid == 0) return;
            #if BUILDV22
               try
               {
                   Medconn.ClearChartFindings();
                   Medconn.AddChart(CurrentMedcinid, 0, 0, "", "", 0);
                   String info = Medconn.GetProperty(0, "promptanalysis", 2);
                   System.Collections.ArrayList rl = Medconn.Activate(ListSizes.medListFull, MedTermtypes.medTermAll);
                   txtProperties.Text = info.Replace("\n","\r\n");
                   ViewResponseList(rl);
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
            #endif
             }
            </code>
            <b>Prompt Analysis</b>
            <code>
             private void mnuTestMenu2_Click(object sender, EventArgs e)
             {
               if (CurrentMedcinid == 0) return;
            #if BUILDV22
               try
               {
                   Medconn.ClearChartFindings();
                   Medconn.AddDx(CurrentMedcinid);
                   String info = Medconn.GetProperty(0, "dxpromptanalysis", 2);
                   txtProperties.Text = info.Replace("\n", "\r\n");
                   System.Collections.ArrayList rl = Medconn.ActivateDx(ListSizes.medListFull, MedTermtypes.medTermAll);
                   ViewResponseList(rl);
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
            #endif
             }
            </code></example></para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Nodelevel(System.Int32)">
            <summary>
            Level of nodekey; 0-9 are valid values.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the node level of the finding</returns>
            <remarks>Level is useful for accessing the children of a finding, without additionally 
            accessing grandchildren and their great grandchildren and so on. Children of a finding 
            will have a longer nodekey, and each child's nodekey will exactly match up to the entire 
            length of the parent's nodekey, and children will have a level that is 1 greater than the 
            parent. Grandchildren have a level that is 2 greater than the parent, and so on with their 
            children. The length of the nodekey is equal to (level + 1) * 2.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Paraflow(System.Int32)">
            <summary>
            Recommended level of nodekey for terminating paragraph text flow for findings in this 
            nodekey's hierarchy, given no other prevailing conditions for continuing the paragraph.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the paragraph flow level for the finding</returns>
        </member>
        <member name="M:Medicomp.Connection.Sentflow(System.Int32)">
            <summary>
            Recommended level of nodekey for terminating sentence text flow for findings in this 
            nodekey's hierarchy, given no other prevailing conditions for continuing the sentence.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the sentence flow level for the finding</returns>
        </member>
        <member name="M:Medicomp.Connection.Title(System.Int32)">
            <summary>
            Recommended level of nodekey for the title of this finding's text section or table 
            when utilizing titles. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the title level for the finding</returns>
        </member>
        <member name="M:Medicomp.Connection.Subs(System.Int32)">
            <summary>
            '+' indicates that lower level (more detailed) nodes exist
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns a '+' if children are available; else a blank string.</returns>
        </member>
        <member name="M:Medicomp.Connection.ParentMedcinid(System.Int32)">
            <summary>
            This is used to discover the medcinid of this finding's parent term.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the Medcinid of the immediate parent term. A zero will be returned 
            if the finding is the root term of the finding's terminolgy type.</returns>
        </member>
        <member name="M:Medicomp.Connection.Flag(System.Int32)">
            <summary>
            This obtains the basic flag property for the finding. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The flag property is returned. (Int16 for ActiveX and Java)</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Finding has been retired from service</description></item>
                <item><term>0x0002</term><description>Finding is considered chronic</description></item>
                <item><term>0x0004</term><description>Finding is a laterality heading</description></item>
                <item><term>0x0008</term><description>reserved</description></item>
                <item><term>0x0010</term><description>Finding should be restricted from being ordered</description></item>
                <item><term>0x0020</term><description>Value field is typically entered as text</description></item>
                <item><term>0x0040</term><description>When calculating the scale, the H, L, and N results are reversed</description></item>
                <item><term>0x0080</term><description>A test has a profile or panel of results</description></item>
                <item><term>0x0100</term><description>Reverse the sense of the 'N', 'A', and ' ' result qualifiers</description></item>
                <item><term>0x0200</term><description>Finding should not be displayed in a tabular form</description></item>
                <item><term>0x0400</term><description>Finding should not be entered in a patient’s chart</description></item>
                <item><term>0x0800</term><description>Finding can have a range and scale calculated from its value</description></item>
                <item><term>0x1000</term><description>Findings should processed for a Dx during IP only once.</description></item>
                <item><term>0x2000</term><description>Test for a specific disease</description></item>
                <item><term>0x4000</term><description>Finding is only pertinent to females</description></item>
                <item><term>0x8000</term><description>Finding is only pertinent to males</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Eflag(System.Int32)">
            <summary>
            This obtains the extended flags property for the finding.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The extended flags proprty is returned</returns>
            <remarks>
            The following table lists only the useful flags:
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Finding has diagnosis index probability by age</description></item>
                <item><term>0x0002</term><description>Finding has range and scale by age and gender</description></item>
                <item><term>0x0004</term><description>Finding has more than one unit of measure</description></item>
                <item><term>0x0008</term><description>Finding has diagnoses probability by demographics</description></item>
                <item><term>0x0010</term><description>reserved</description></item>
                <item><term>0x0020</term><description>Finding has alert data</description></item>
                <item><term>0x0040</term><description>Finding has an entry in the sentence table</description></item>
                <item><term>0x0080</term><description>Finding has an index table</description></item>
                <item><term>0x0100</term><description>reserved</description></item>
                <item><term>0x0200</term><description>reserved</description></item>
                <item><term>0x0400</term><description>reserved</description></item>
                <item><term>0x0800</term><description>reserved</description></item>
                <item><term>0x1000</term><description>Finding has rxdose and information</description></item>
                <item><term>0x2000</term><description>This finding has a non-null cpt code</description></item>
                <item><term>0x4000</term><description>reserved</description></item>
                <item><term>0x8000</term><description>Finding has children</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Aflags(System.Int32)">
            <summary>
            This obtains the finding's attribute flag property
            </summary>
            <seealso cref="M:Medicomp.Connection.Caflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The AFlags property is returned</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Location (L)</description></item>
                <item><term>0x0002</term><description>Quality (Q)</description></item>
                <item><term>0x0004</term><description>Severity (S)</description></item>
                <item><term>0x0008</term><description>Duration (D)</description></item>
                <item><term>0x0010</term><description>Timing (T)</description></item>
                <item><term>0x0020</term><description>Context (C)</description></item>
                <item><term>0x0040</term><description>Unilateral (U)</description></item>
                <item><term>0x0080</term><description>Modifying factors (M)</description></item>
                <item><term>0x0100</term><description>Associated signs and symptoms (A)</description></item>
                <item><term>0x0200</term><description>Left laterality (&lt;)</description></item>
                <item><term>0x0400</term><description>Right laterality (&gt;)</description></item>
                <item><term>0x0800</term><description>Bi-laterality (B)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Caflags(System.Int32)">
            <summary>
            This obtains the finding's children attribute flag property. It's bits are merged from 
            the AFlags property of its children and grandchildren.
            </summary>
            <seealso cref="M:Medicomp.Connection.Aflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The CAFlags property is returned</returns>
            <remarks>
            The flag contains 16 bits, which when set, indicates that the attributes identified in 
            aflags are embodied in findings which are either children or grandchildren of this finding.
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Location (L)</description></item>
                <item><term>0x0002</term><description>Quality (Q)</description></item>
                <item><term>0x0004</term><description>Severity (S)</description></item>
                <item><term>0x0008</term><description>Duration (D)</description></item>
                <item><term>0x0010</term><description>Timing (T)</description></item>
                <item><term>0x0020</term><description>Context (C)</description></item>
                <item><term>0x0040</term><description>Unilateral (U)</description></item>
                <item><term>0x0080</term><description>Modifying factors (M)</description></item>
                <item><term>0x0100</term><description>Associated signs and symptoms (A)</description></item>
                <item><term>0x0200</term><description>Left laterality (&lt;)</description></item>
                <item><term>0x0400</term><description>Right laterality (&gt;)</description></item>
                <item><term>0x0800</term><description>Bi-laterality (B)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Qflags(System.Int32)">
            <summary>
            This obtains the finding's qualifier flags property
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the qualifier flags</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Severity (SMODIFIER)</description></item>
                <item><term>0x0002</term><description>Amount (AMODIFIER)</description></item>
                <item><term>0x0004</term><description>Onset (OMODIFIER)</description></item>
                <item><term>0x0008</term><description>Urgency (UMODIFIER)</description></item>
                <item><term>0x0010</term><description>Quality (QMODIFIER)</description></item>
                <item><term>0x0020</term><description>Degree (DMODIFIER)</description></item>
                <item><term>0x0040</term><description>Pattern (PMODIFIER)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Gpflags(System.Int32)">
            <summary>
            This obtains general purpose flags for the finding
            </summary>
            <seealso cref="M:Medicomp.Connection.GetReferenceInfo(System.Int32,System.Int32,Medicomp.ReferenceInfos)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the general purpose flags. (Int16 for ActiveX and Java)</returns>
            <remarks>
            <list type="table">
                <listheader><term>Bit</term><description>Description</description></listheader>
                <item><term>0x0001</term><description>Finding can typically be ordered.</description></item>
                <item><term>0x0002</term><description>Finding typically can have a test result.</description></item>
                <item><term>0x0008</term><description>Finding is common and list first in searches.</description></item>
                <item><term>0x0010</term><description>Finding has a comment.</description></item>
                <item><term>0x0020</term><description>Finding will not have intelligent prompt lists built out from siblings, parents, etc.</description></item>
                <item><term>0x0040</term><description>Finding is specific to nurse role.</description></item>
                <item><term>0x0100</term><description>In combination with 0x0200 for RNAx priority (01=C, 10=O, 11=R).</description></item>
                <item><term>0x0200</term><description>In combination with 0x0100 for RNAx priority (01=C, 10=O, 11=R).</description></item>
                <item><term>0x0400</term><description>reserved</description></item>
                <item><term>0x0800</term><description>reserved</description></item>
                <item><term>0x1000</term><description>The finding has mappings to one or more meaningful use measures.</description></item>
                <item><term>0x2000</term><description>reserved</description></item>
                <item><term>0x4000</term><description>reserved</description></item>
                <item><term>0x8000</term><description>reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.StartAge(System.Int32)">
            <summary>
            Starting age range of patient which is valid for this concept. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the start age in minutes</returns>
            <remarks>Quantity of minutes. 525600 (365.25*60*24) minutes are a year. If this field is 0 then all ages 
            less than or equal to endage are valid.</remarks>
        </member>
        <member name="M:Medicomp.Connection.EndAge(System.Int32)">
            <summary>
            Ending age range of patient which is valid for this concept.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the end age in minutes</returns>
            <remarks>Quantity of minutes. 525960 (365.25*60*24) minutes are a year. If this field is 0 then all ages 
            greater than or equal to startage are valid.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Management(System.Int32)">
            <summary>
            Recommended quantity of minutes that a follow up should be scheduled after this finding is entered. 
            This is used for patient management. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns the management follow up time in minutes</returns>
        </member>
        <member name="M:Medicomp.Connection.RangeNormalHigh(System.Int32,System.String)">
            <summary>
            This method returns the high end of the range considered normal for the specified medcinid 
            based on the age and gender of the patient. This is used to create an information string 
            for the user such as 'normal range 23-45 kg' for findings with measurements. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="unit">The unit of measure being used.</param>
            <returns>Returns the normal high as a measurement value using the requested unit</returns>
        </member>
        <member name="M:Medicomp.Connection.RangeNormalLow(System.Int32,System.String)">
            <summary>
            This method returns the low end of the range considered normal for the specified 
            medcinid based on the age and gender of the patient. This is used to create an information 
            string for the user such as 'normal range 23-45 kg' for findings with measurements. 
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="unit">The unit of measure being used.</param>
            <returns>Returns the normal low as a measurement value using the requested unit</returns>
        </member>
        <member name="M:Medicomp.Connection.UnitGuess(System.Int32,System.Double)">
            <summary>
            This method returns a probable unit of measure for a medcinid given the testvalue, 
            age and gender of the patient.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="testvalue">The value used to guess its unit</param>
            <returns>Returns the guessed unit for the finding based on the value</returns>
            <remarks>This function initially tries to guess the units based on the range of values 
            that are considered normal for the patient as specified in the agerange table, and then 
            proceeds to less accurately guess by using other methods. Use this in your application 
            when a value is initially entered for a finding to save the user from manually having 
            to select the units from a list.</remarks>
        </member>
        <member name="M:Medicomp.Connection.TestValueConvert(System.Int32,System.Double,System.String,System.String)">
            <summary>
            This method obtains a value that has been converted from one unit to the another unit of measure.  
            </summary>
            <seealso cref="M:Medicomp.Connection.UnitEnum(System.Int32,System.Int16)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="testvalue">The original value to be converted</param>
            <param name="fromunit">The unit of measure for the testvalue provided</param>
            <param name="tounit">The unit of measure that you want testvalue cnverted to</param>
            <returns>Returns the testvalue converted to the 'tounit' unit of measure</returns>
            <remarks>Valid unit names for the fromunit and tounit arguments are those returned from the 
            UnitEnum method for the specified medcinid.</remarks>
        </member>
        <member name="M:Medicomp.Connection.UnitEnum(System.Int32,System.Int16)">
            <summary>
            This method returns all of the units of measure commonly used for the specified medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.TestValueConvert(System.Int32,System.Double,System.String,System.String)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="listnum">The list number index as discussed in 'remarks'</param>
            <returns>Returns all of the units of measure commonly used for the specified medcinid.</returns>
            <remarks>Use this function for presenting a list to the user for selection. Invoke this 
            function in a loop starting listnum at zero and incrementing by one each iteration until 
            an empty string is returned. Note: it can be determined by the 0x0004 bit of the eflags 
            field if a finding has multiple units. For findings not having this bit set, this function 
            will return the unit field from the property table which is known as the standard unit.</remarks>
        </member>
        <member name="M:Medicomp.Connection.CalcScale(System.Int32,System.String,System.Double)">
            <summary>
            This method returns the scale value of zero to seven that is used as an argument 
            in the AddChart method of intelligent prompting.  
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="unit">The unit of measure of the testvalue parameter</param>
            <param name="testvalue">The testvalue for which the scale is requested</param>
            <returns>The calculated scale value 0-7 is returned.</returns>
            <remarks>The scale should be calculated for each finding as it is entered and saved as 
            part of the patient's chart. This field may also prove useful for other forms of 
            analysis because it calculates the result of a finding based on a scale of one to 
            seven where zero is not applicable, one to three is lowest to low, four is normal, 
            and five to seven is high to highest. If the scale is zero the user may specify the 
            result using the result field. If the scale is not zero the result field may be filled 
            in by the application program because the low, normal or high state is known.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddDx(System.Int32)">
            <summary>
            This is used to pass the medcinids for the diagnoses, problems, or syndromes from which to 
            create prompting lists. If multiple medcinids are passed the resulting lists will not 
            have duplicates, and will be sorted in nodekey order.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.ClearDx">
            <summary>
            Clears the list of diagnoses, problems, and syndromes accumulated from invoking 
            the AddDx() function.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
             <summary>
             This function returns a prompt list that is based on the findings added using the AddDx method.
             </summary>
             <seealso cref="T:Medicomp.ResponseItem"/>
             <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
             <seealso cref="M:Medicomp.Connection.ClearDx"/>
             <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
             <param name="listsize">This argument provides for three different list sizes. Shortlist=1, Longlist=2, 
             Fulllist=3. (Int16 for ActiveX and Java)</param>
             <param name="termtype">The termtype parameter restricts the returned list to the designated terminology type. (Int16 for ActiveX)</param>
             <returns>The prompt list is returned as an ArrayList of ResponseItem data structures</returns>
             <remarks><u>Implementing diagnoses based prompting</u>
             <para>In this method of prompting the user selects a list of diagnoses, problems or syndromes 
             from which to retrieve a list of related findings for entry. This method is implemented 
             similarly to Intelligent prompting. The list is entered by repeated calls to AddDx. The
             resulting prompt list is retrieved by calling ActivateDx.</para>
             <para>This algorithm needs to be passed the patient's age and gender to make the resulting 
             prompting lists more appropriate to a patient. This is done by using the same function used 
             for intelligent prompting, SetPatient(). This algorithm will use the age and gender 
             arguments last passed to this function.</para>
             <para><example>Illustrates diagnosis prompting:
             <code>
              private void BuildDxPrompt(bool Regenerate)
              {
                Medicomp.BuildListModes blmode = BuildListModes.medNormal;
                if (iCD9OnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICDonly;
            #if BUILDV22
                if (iCD10CMOnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICD10CMOnly;
            #endif
                Medconn.BuildListMode(blmode);
                if (Regenerate)
                {
                    Medconn.ClearDx();
                    Medconn.AddDx(CurrentMedcinid);
                }
                short count = Medconn.HaveDx(myListSize, MedTermtypes.medTermAll);
                // Initialize the tree's root nodes without buttons
                InitializeRootNodes(false);
                if (count &gt; 0)
                {
                    // There are 3 list sizes available; here we force the mid-size
                    System.Collections.ArrayList rl = Medconn.ActivateDx(myListSize, MedTermtypes.medTermAll);
                    for (int i = 0; i &lt; rl.Count; i++)
                    {
                        AddResponseItemToTree((ResponseItem)rl[i]);
                    }
                    ViewResponseList(rl);
                    PromptSizeMode = IPMode.DX;
                }
              }
             </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This function is used to determine which termtypes of findings appear in the respective 
            Diagnoses prompt reserved lists based on the listsize argument.  
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">The list size in question. (Int16 for ActiveX and Java)</param>
            <param name="termtype">The terminology type in question.</param>
            <returns>This returns non-zero if the respective list is not empty; otherwise 0.</returns>
        </member>
        <member name="M:Medicomp.Connection.ActivateExpansion(System.Int32)">
            <summary>
            This method is invoked to retrieve the children findings for the passed medcinid.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The list of children findings is returned as an ArrayList of ResponseItem data structures. 
            If the medcinid parameter is passed as zero, the returned list will contain the six root node findings, 
            one for each term type: symptoms, history, physical exam, tests, diagnoses, and therapy.</returns>
            <remarks>This method of prompting is used to drill down one level from a parent nodekey and return 
            all appropriate MEDCIN terms. Only the children of the passed medcinid will be returned, not 
            grand-children or their siblings. This method is typically used to load a branch for a treeview 
            control. The subs field of the ResponseItem indicates that the finding has children and that 
            expansion of that finding can occur.
            <para>The ResponseItem description field usually contains the description field from the search 
            table in search.mdb. When invoked on behalf of the ActivateExpansion method, the description 
            argument contains the description field from the nomenclature table in nomenclature.mdb.  
            The description field from the search table is the shortest standalone description available 
            for all MEDCIN terms. The description field from the nomenclature table is the shortest 
            description field available, but it cannot stand alone, it depends upon its parent to complete 
            the context. This is the default presentation for a treeview, where the parent has a full concept 
            description and its children have only a terse description to avoid overly wordy displays.</para>
            <para>If there are multiple ICD-10-CM code maps, or if the map includes multiple codes, 
            the ActivateExpansion API will provide an entry for each code map when medICD10CMOnly build list mode is active.</para>
            <para>When a finding has a mapset that includes more than one map, each map of the set will be emitted as a separate ResponseItem. 
            The first item will be the map that has the preferred flag set. All other maps of the same mapset will be emitted; 
            however, the subs string will contain a '-' character instead of a blank or '+', and the flags field will indicate that the finding is not real. 
            In addition, an arbitrary unique character will be appended to the nodekey for each ResponseItem subsequent to the first item of a given Medcinid; 
            this is to ensure that the nodekey will remain unique for usage in a tree view component that may need unique key strings. 
            The purpose of this functionality is to provide a means for the application to present all the codes that would (should) be applicable to the particular finding.</para>
            <para><example>Illustrates retrieval of a finding's immediate children:
            <code>
              private void InitializeRootNodes(bool AddButton) {
               if (tvwDataTree.Nodes.Count &gt; 0) tvwDataTree.Nodes.Clear();
               try {
                   // Get list of base nodes - passing a Medcinid of 0 does this
                   System.Collections.ArrayList rl = Medconn.ActivateExpansion(0);
                   for (int i = 0; i &lt; rl.Count; i++) {    // Add the nodes as root nodes
                       new MedcinNode(tvwDataTree, (ResponseItem)rl[i], AddButton);
                   }
                   // Show the ResponseList data in the listview control
                   ViewResponseList(rl);
               }
               catch (Exception ex) {
                   System.Windows.Forms.MessageBox.Show(ex.Message);
               }
             }
            </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.ActivateExpansionEx(System.Int32,System.Int16,Medicomp.ListSizes)">
            <summary>
            This method is invoked to retrieve the children findings with specified attributes for the 
            passed medcinid.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <seealso cref="M:Medicomp.Connection.Aflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="amask">A bit mask of requested attributes. Returned findings will have at least 
            one requested bit set in their Aflag field.
            <para><list type="table">
            <listheader><term>Mask Value</term><description>Description</description></listheader>
            <item><term>0x0001</term><description>Location</description></item>
            <item><term>0x0002</term><description>Quality</description></item>
            <item><term>0x0004</term><description>Severity</description></item>
            <item><term>0x0008</term><description>Duration</description></item>
            <item><term>0x0010</term><description>Timing</description></item>
            <item><term>0x0020</term><description>Context</description></item>
            <item><term>0x0040</term><description>Unilateral</description></item>
            <item><term>0x0080</term><description>Modifying factors</description></item>
            <item><term>0x0100</term><description>Associated signs and symptoms</description></item>
            <item><term>0x0200</term><description>Left laterality</description></item>
            <item><term>0x0400</term><description>Right laterality</description></item>
            <item><term>0x0800</term><description>Bi-laterality</description></item>
            </list></para></param>
            <param name="listsize">A value indicating the size of the list (or what list) to return. This value 
            is interpreted as follows:<para><list type="table">
            <listheader><term>Value</term><description>Description</description></listheader>
            <item><term>1</term><description>Includes only immediate children. If no immediate children exist, then it will include grandchildren.</description></item>
            <item><term>2</term><description>Includes children and grandchildren of Medcinid.</description></item>
            <item><term>3</term><description>Includes all children through level 9.</description></item>
            <item><term>Above + 128</term><description>The Prefix field will be populated with the finding’s CCC code, where applicable</description></item>
            <item><term>1943</term><description>With AttributeMask of 0 will return cross index data related to the passed Medcinid</description></item>
            </list></para></param>   
            <returns>The resulting list is returned as an ArrayList of ResponseItem data structures.</returns>
            <remarks>This method of prompting is used to drill down from a parent nodekey and return all 
            appropriate MEDCIN terms. Only the children of the passed medcinid that embody the requested 
            attributes will be returned. This method is typically used to load a branch for a treeview 
            control. The ResponseItem subs field indicates that the finding has children that embody the 
            requested attributes and that expansion can occur.
            <para>The demo program demonstrates a possible implementation of this method. It uses a bar with 
            icons for each attribute showing green if the selected finding has children or grandchildren 
            that embody the attribute. The Caflag property for the selected Medcinid is used to determine 
            which attributes exist in its children and grandchildren. When the user selects one of the 
            green attribute icons, ActivateExpansionEx() is invoked to generate a list of findings that 
            embody the requested attribute for prompting.</para>
            <example>This function gets a list of all Medcin concepts:
            <code>
            private void ExpandByExpandEx(System.Collections.ArrayList alAll, System.Collections.ArrayList prime, Int32 Medcinid)
            {
               System.Collections.ArrayList rl;
               try
               {
                   if (prime != null) rl = prime;
                   else rl = Medconn.ActivateExpansionEx(Medcinid, 0, ListSizes.medListFull);
                   if (rl.Count == 0) return;
                   foreach (Medicomp.ResponseItem ri in rl)
                   {
                       alAll.Add(ri);
                       // Cannot use subs to check for chilren as that is not set when the AttributeMask is 0
                       /*if (ri.Subs.Equals("+"))*/
                       ExpandByExpandEx(alAll, null, ri.Medcinid);
                   }
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.ActivateExpansionEx(System.Int32,System.Int16,System.Int16)">
            <summary>
            This method is invoked to retrieve the children findings with specified attributes for the 
            passed medcinid.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <seealso cref="M:Medicomp.Connection.Aflags(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="amask">A bit mask of requested attributes. Returned findings will have at least 
            one requested bit set in their Aflag field.
            <para><list type="table">
            <listheader><term>Mask Value</term><description>Description</description></listheader>
            <item><term>0x0001</term><description>Location</description></item>
            <item><term>0x0002</term><description>Quality</description></item>
            <item><term>0x0004</term><description>Severity</description></item>
            <item><term>0x0008</term><description>Duration</description></item>
            <item><term>0x0010</term><description>Timing</description></item>
            <item><term>0x0020</term><description>Context</description></item>
            <item><term>0x0040</term><description>Unilateral</description></item>
            <item><term>0x0080</term><description>Modifying factors</description></item>
            <item><term>0x0100</term><description>Associated signs and symptoms</description></item>
            <item><term>0x0200</term><description>Left laterality</description></item>
            <item><term>0x0400</term><description>Right laterality</description></item>
            <item><term>0x0800</term><description>Bi-laterality</description></item>
            </list></para></param>
            <param name="listsize">A value indicating the size of the list (or what list) to return. This value 
            is interpreted as follows:<para><list type="table">
            <listheader><term>Value</term><description>Description</description></listheader>
            <item><term>1</term><description>Includes only immediate children. If no immediate children exist, then it will include grandchildren.</description></item>
            <item><term>2</term><description>Includes children and grandchildren of Medcinid.</description></item>
            <item><term>3</term><description>Includes all children through level 9.</description></item>
            <item><term>Above + 128</term><description>The Prefix field will be populated with the finding’s CCC code, where applicable</description></item>
            <item><term>1943</term><description>With AttributeMask of 0 will return cross index data related to the passed Medcinid</description></item>
            </list></para></param>   
            <returns>The resulting list is returned as an ArrayList of ResponseItem data structures.</returns>
            <remarks>This method of prompting is used to drill down from a parent nodekey and return all 
            appropriate MEDCIN terms. Only the children of the passed medcinid that embody the requested 
            attributes will be returned. This method is typically used to load a branch for a treeview 
            control. The ResponseItem subs field indicates that the finding has children that embody the 
            requested attributes and that expansion can occur.
            <para>The demo program demonstrates a possible implementation of this method. It uses a bar with 
            icons for each attribute showing green if the selected finding has children or grandchildren 
            that embody the attribute. The Caflag property for the selected Medcinid is used to determine 
            which attributes exist in its children and grandchildren. When the user selects one of the 
            green attribute icons, ActivateExpansionEx() is invoked to generate a list of findings that 
            embody the requested attribute for prompting.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)">
             <summary>
             This method obtains the response list associated with the prior WordSearch method call.
             </summary>
             <seealso cref="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)"/>
             <seealso cref="M:Medicomp.Connection.WordSearch(System.String)"/>
             <seealso cref="T:Medicomp.ResponseItem"/>
             <seealso cref="T:Medicomp.MedTermtypes"/>
             <param name="termtype">One of the MedTermtypes enumeration. (Int16 for ActiveX)</param>
             <returns>The list of findings is returned as an ArrayList of ResponseItem data structures.</returns>
             <remarks>If the corresponding WordSearch search string key word of 3-characters minimum matches 
             a code set code and matches a vocabulary codeset record that implies a prefix (currently supporting history, 
             family history, and allergy), the response item returned to the client for that entry will include the prefix. 
             Code sets where this feature surfaces are: ICD-H, ICD-F, CVX-H, SNOMED (with a prefix requirement), 
             and ICD-10-CM (with a prefix requirement).
             <para>If there are multiple ICD-10-CM code maps, or if the map includes multiple codes, 
             the ActivateWordSearch API will provide an entry for each code map when medICD10CMOnly build list mode is active.</para>
             <para>If there are multiple ICD-10-CM code maps, or if the map includes multiple codes, 
             the ActivateWordSearch and ActivateExpansion APIs will provide an entry for each code map when medICD10CMOnly build list mode is active. 
             When a finding has a mapset that includes more than one map, each map of the set will be emitted as a separate ResponseItem. 
             The first item will be the map that has the preferred flag set. All other maps of the same mapset will be emitted; 
             however, the subs string will contain a '-' character instead of a blank or '+', and the flags field will indicate that the finding is not real. 
             In addition, an arbitrary unique character will be appended to the nodekey for each ResponseItem subsequent to the first item of a given Medcinid; 
             this is to ensure that the nodekey will remain unique for usage in a tree view component that may need unique key strings. 
             The purpose of this functionality is to provide a means for the application to present all the codes that would (should) be applicable to the particular finding.</para>
             <para>Note that the concept of surfacing reportable ICD-10-CM codes includes the following:</para>
             <list type="bullet">
             <item><description>An ICD-10-CM code explicitly marked as reportable.</description></item>
             <item><description>An ICD-10-CM code explicitly marked as un-reportable but has a code specification record 
             with selections required to construct the full reportable ICD-10-CM code.</description></item>
             <item><description>An ICD-10-CM code explicitly marked as un-reportable but has a code parameter record set that with proper data entries 
             will provide a reportable ICD-10-CM code. See ICD-10-CM code Z68 (body mass index) for an example.</description></item>
             </list>
             <para>Since ICD-10-CM reportable code maps may require additional instance data entry beyond a simple positive and negative, 
             it is the responsibility of the application to monitor all of the properties of each ResponseItem in the API’s response list 
             to ensure that the user is given an opportunity of entering all data elements needed to produce a reportable code. 
             These may include but are not limited to: prefix, result, specification selections. 
             Coding hints of code first, use additional code, or must code may suggest the need for entering additional findings.</para>
             <para>When the medICD10CMVirtual build list mode is set in conjunction with the medICD10CMOny build list mode, 
             the ActivateWordSearch and ActivateExpansion APIs will provide an entry for each virtualized code when the code includes a code specification property. 
             The server appends a character to the finding’s real nodekey for each additional instance of the same finding</para>
             <para><example>Illustrates searching for terms via key words:
             <code>
              public void InvokeWordSearch(Boolean DoAll)
              {
                Medicomp.BuildListModes blmode = BuildListModes.medNormal;
                System.Collections.ArrayList rl;
                try
                {
                    // Initialize the tree's root nodes without buttons
                    PromptSizeMode = IPMode.None;
                    if (tsSearch.Text.StartsWith("!"))
                    {
                        Int32 Medcinid;
                        bool rc = Int32.TryParse(tsSearch.Text.Substring(1), out Medcinid);
                        if (rc)
                        {
                            String nodekey = Medconn.Nodekey(Medcinid);
                            if (nodekey.Length &gt; 0) ShowMedcinBrowser(nodekey);
                        }
                    }
                    else
                    {
                        if (DoAll) InitializeRootNodes(false);
                        if (iCD9OnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICDonly;
            #if BUILDV22
                    if (iCD10CMOnlyToolStripMenuItem.Checked) blmode |= BuildListModes.medICD10CMOnly;
                    if (tsmICD10Virtual.Checked) blmode |= BuildListModes.medICD10CMVirtual;
            #endif
                        Medconn.BuildListMode(blmode);
                        short count = Medconn.WordSearch(tsSearch.Text);
                        int which = -1;
                        if (count &gt; 0)
                        {
                            for (int j = 0; j &lt; 6; ++j)
                            {
                                short rc = Medconn.HaveWordSearch(terms[j]);
                                if (rc &gt; 0 &amp;&amp; which &lt; 0) which = j;
                            }
                            if (DoAll)
                            {
                                rl = Medconn.ActivateWordSearch(MedTermtypes.medTermAll);
                                for (int i = 0; i &lt; rl.Count; i++)
                                {
                                    AddResponseItemToTree((ResponseItem)rl[i]);
                                }
                                ViewResponseList(rl);
                            }
                            else if (which&gt;=0)
                            {
                                rl = Medconn.ActivateWordSearch(terms[which]);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    System.Windows.Forms.MessageBox.Show(ex.Message);
                }
              }
             </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)">
            <summary>
            This method is used to determine which termtypes of findings are available for prompting based on 
            the prior word search. 
            </summary>
            <seealso cref="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.WordSearch(System.String)"/>
            <param name="termtype">One of the <see cref="T:Medicomp.MedTermtypes">medTermtypes</see> for 
            checking the availability of a list. (Int16 for ActiveX)</param>
            <returns>The function returns non-zero if the requested termtype is available, otherwise 0. 
            Note that the termtype medTermAll will return true if any termtypes exist in the list specified 
            by the termtype argument.</returns>
        </member>
        <member name="M:Medicomp.Connection.WordSearch(System.String)">
            <summary>
            This method creates a reserved list of findings that contains the search words. Word completion 
            also normally occurs; a search word 'leg' will also locate findings that contain the word 'legs'.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)"/>
            <param name="words">String of one or more words to search for. Words are 'anded', meaning a finding has to 
            have all words.</param>
            <returns>Returns how many related terms were found.</returns>
            <remarks>In this method of <i>Word Search Based Prompting</i>, the user enters search words. All 
            MEDCIN terms that are associated with those words are located and then made available for prompting.
            <para>If the words parameter begins with a '$' character, then each word of the string must exactly
            match a vocabulary word; otherwise, a match is considered when a vocabulary word begins with your word.
            Thus '$leg' will not match 'legs'.</para>
            <para>If the words parameter begin with a '-' character, then the normal preliminary check of
            a match for synonyms will not be performed.</para>
            <para>If both a '$' and a '-' character appear, they may appear in any order at the beginning
            of the words parameter; thus, '$-words' and '-$words' are equivalent.</para>
            <para>Concepts having a code map of a code set can be searched for using the syntax, '#codeset code', where '#codeset' is one of the following strings: 
            '#SNOMED', '#ICD10', '#LABCORP', '#ICD9', '#CPT', '#DSM', '#RXNORM', '#CVX', '#UNII', '#CCC', '#ICDOM', '#ICDOT', '#ICDPROC', '#HCPC', '#ACC', '#CAS', 
            '#FDB', '#MULTUM', '#QUEST', '#1STCONSULT', '#NANDA', '#MEDISPAN', '#CPTMOD', '#CPTAMOD', '#DODUC'. 
            Character completion is used for the codeset so only the significant characters to make the codeset substring unique among the set of code sets needs to be entered.</para>
            <para>The difference between this technique and regular search is the designation of the keyword as a code rather than just a string of characters; 
            only vocabulary words of the keyword that are codes of the designated type will be considered. 
            Consider a search for concepts using the keyword '100'. This will discover concepts with '100' in text as well as concepts having a SNOMED codemap 
            to a code that starts with '100'. Using '#SNOMED 100' as the search expression limits the result to concepts with a SNOMED code that starts with 100.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.QualifierDesc(System.String,System.String)">
            <summary>
            This method returns a description given a codename and a valid code for the codename.
            </summary>
            <seealso cref="M:Medicomp.Connection.QualifierList(System.String)"/>
            <param name="codename">The code name designating the list of codes.</param>
            <param name="code">The specific code for which the description is desired.</param>
            <returns>The description for the given code is returned.</returns>
            <remarks>
            Possible codename values are:
            <list type="table">
            <listheader><term>Codename</term><description>Description of List</description></listheader>
            <item><term>BLOODTYPE</term><description>Provides a list of blood types</description></item>
            <item><term>CODEMAPTYP</term><description>Provides the descriptions for codemap types</description></item>
            <item><term>CODESCHEME</term><description>Provides a list of code types from HL7 V2</description></item>
            <item><term>DSMLIST</term><description>Provides references for DSM specification lists</description></item>
            <item><term>ETHNIC</term><description>Provides the list of ethnicity codes for demographics</description></item>
            <item><term>EXAMTYPE</term><description>Provides the list of E/M exam types</description></item>
            <item><term>GENDER</term><description>Provides the list of genders for demographics</description></item>
            <item><term>HCFAROS</term><description>Provides the list of E/M ROS classifications</description></item>
            <item><term>HCFASYSTEM</term><description>Provides the list of organ systems for E/M physical examination</description></item>
            <item><term>ICD10LIST</term><description>Provides references for ICD-10-CM specification lists</description></item>
            <item><term>ICD10LISTS</term><description>Provides the list of list names for ICD-10-CM specification lists</description></item>
            <item><term>LINKS</term><description>Provides the codes for qualifier links</description></item>
            <item><term>MARITAL</term><description>Provides the list of marital status codes for demographics</description></item>
            <item><term>MODIFIER, AMODIFIER, QMODIFIER, SMODIFIER, OMODIFIER, UMODIFIER, QMODIFIER, DMODIFIER, PMODIFIER</term>
            <description>Provides the list of modifier qualifier codes; sublists have ‘modifier’ prefixed with a sublist type code that varies by the bit assignments of Medcin finding’s qflags property</description></item>
            <item><term>PREFIX, PREFIXD, PREFIXH, PREFIXP, PREFIXR, PREFIXS, PREFIXT</term>
            <description>Provides the list of prefix qualifier codes; sublists have ‘PREFIX suffixed with a sublist type code that varies by term type</description></item>
            <item><term>RACE</term><description>Provides the list of race codes for demographics</description></item>
            <item><term>RELIGION</term><description>Provides the list of religion codes for demographics</description></item>
            <item><term>RESULT</term><description>Provides the list of result codes</description></item>
            <item><term>RXAMOUNT</term><description>Provides the list of units for Rx amounts</description></item>
            <item><term>RXCODE</term><description>Provides the list of codes for therapy findings rxcode property</description></item>
            <item><term>RXFORM</term><description>Provides the list of units for Rx forms</description></item>
            <item><term>RXFREQ</term><description>Provides the list of codes for Rx dosage frequency</description></item>
            <item><term>RXPREFIX</term><description>Provides the list of codes applicable to Rx prescriptions</description></item>
            <item><term>RXQUANUNIT</term><description>Provides the list of units for Rx quantities</description></item>
            <item><term>RXROUTE</term><description>Provides the list of codes for Rx routes</description></item>
            <item><term>RXSITEEAR</term><description>Provides the list of codes for Rx ear sites</description></item>
            <item><term>RXSITEEYE</term><description>Provides the list of codes for Rx eye sites</description></item>
            <item><term>RXSITEIM</term><description>Provides the list of codes for Rx intramuscular sites</description></item>
            <item><term>RXSITEIV</term><description>Provides the list of codes for Rx intravenous sites</description></item>
            <item><term>RXSITESKIN</term><description>Provides the list of codes for Rx skin sites</description></item>
            <item><term>RXSITESQ</term><description>Provides the list of codes for other Rx skin quadrant sites</description></item>
            <item><term>RXSTRUNIT</term><description>Provides the list of codes for Rx strength units</description></item>
            <item><term>RXWHEN</term><description>Provides the list of codes for when to take an Rx</description></item>
            <item><term>SERVICES</term><description>Provides the list of E/M services</description></item>
            <item><term>SETTINGS</term><description>Provides the list of E/M settings</description></item>
            <item><term>SPECIALTY</term><description>Provides the codes used in the Medcin finding specialty property</description></item>
            <item><term>SPECTYPE</term><description>Provides the list of specification captions for ICD-10-CM lists</description></item>
            <item><term>STATE</term><description>Provides the list of 2-letter abbreviations for US states</description></item>
            <item><term>STATUS, STATUSD, STATUSH, STATUSP, STATUSR, STATUSS, STATUST</term>
            <description>Provides the list of status qualifier codes; sublists have ‘STATUS’ suffixed with a sublist type code that varies by term type</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.QualifierList(System.String)">
            <summary>
            This method obtains a string containing all the codes and descriptions for a codename. All fields 
            are delimited with newline characters (0xA).
            </summary>
            <param name="codename">The code name designating the list of codes. 
            You can retrieve a tab-delimited list of all valid codenames by passing an empty string.</param>
            <returns>The list of codes and descriptions is returned.</returns>
            <remarks>Using a method such as <c>description = Medcin.QualifierList("RESULT")</c>,
            'description' would then contain, <c>" \nblank\nN\nnormal\nA\nabnormal\nH\nhigh\nL\nlow\n"</c>
            <para>Note that for IMAGESYS, IMAGEREG, IMAGEVIEW, and IMAGEATTR code names, the code will be the 
            string form of the code's numeric value. The DSMLIST list contains two kinds of records. 
            Codes of 1 or 2 letters are the records containing the specifier strings. Codes of DSM001, DSM002, etc. 
            identify a specifier list where the description contains a comma-delimited set of codes that identify 
            the codes of the specifier strings that make up that list.</para>
            <para>
            The ICD10LIST list contains two kinds of records. Codes consisting solely of digits are the records containing 
            the specifier strings. Codes of ICD1, ICD2, etc. identify a specifier list where the description contains 
            a comma-delimited set of numeric codes that identify the ICD10LIST codes of the specifier strings that make up that list. 
            These alphanumeric codes are referenced by the codespec data mapped to ICD-10-CM codes. The specifier lists for ICD2 and ICD3 
            are special cases in that they each contain a list of items that includes both "open" and "closed" conditions. 
            Since the base ICD-10-CM code may be mapped to a MEDCIN concept that may incorporate "open" or "closed" in its clinical concept, 
            sub-lists identified by ICD2O and ICD3O are provided to filter out the open items, while ICD2C and ICD3C are provided to filter 
            out the closed items. If your application is using the ICD10LIST directly, and the ICD-10-CM mapped code uses a code specifier 
            list of ICD2 or ICD3, then use the respective "O" list if the concept's search text includes "open" (check disregarding case), 
            or the respective "C" list if the concept's search text includes "closed" (check disregarding case). 
            When usng the MEDCIN server's icd10cmvirtual buildlist mode in activate-type APIs, the server automatically makes the necessary revisions.
            </para>
            <example>The following C# example illustrates obtaining the complete list of codenames from the server and placing each list into a tree view control
            <code>
             private void qualifiersToolStripMenuItem_Click(object sender, EventArgs e)
             {
               try
               {
                   string[] codenames = Medconn.QualifierList(string.Empty).Split('\t');
                   if (tvwQualifiers.Nodes.Count > 0) tvwQualifiers.Nodes.Clear();
                   foreach (string name in codenames)
                   {   // Use the codename as the root text
                       TreeNode root = new TreeNode(name);
                       // Add the codename root node
                       tvwQualifiers.Nodes.Add(root);
                       // Retrieve the list of codes from the server
                       string[] items = Medconn.QualifierList(name).Split('\n');
                       // The list is newline delimited formatted as: "code1\ncaption1\ncode2\ncaption2\n..."
                       int max = items.Length - 2; // This should take care of the trailing newline
                       for (int i = 0; i &lt; max; i += 2)
                       {
                           // We will show the items as the "[code] caption"
                           string caption = "[" + items[i] + "] " + items[i + 1];
                           root.Nodes.Add(caption);
                       }
                   }
                   // Disable the menu once we get the list
                   qualifiersToolStripMenuItem.Enabled = false;    
                   // Switch to the tab that shows the list
                   tbcTrees.SelectedIndex = 1;         
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
             }
            </code></example>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.AddUserFinding(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method adds a user-finding or modifies any of the parameter fields of an existing medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <seealso cref="M:Medicomp.Connection.UserFindingCodes(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.UserFindingRange(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Medicomp.Connection.NextUdf"/>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">Userid is the permanent id assigned to the new user-finding. In this case, 
            the userid should be greater than one million. Userid may also be the id of an existing 
            medcinid that is being modified.</param>
            <param name="parent">Parent is the parent of the user-finding. The user-finding will inherit all of 
            the properties (from the property table) of the parent. The parent may be an already added 
            user-finding. If userid is a medcinid (less than one million) this field is ignored, otherwise 
            this field is required. When a user-finding is passed into intelligent prompting via the 
            AddChart() function, the parent chain of the user-finding is followed until a MEDCIN finding 
            is found. Then the user-finding inherits the properties of the MEDCIN finding. If the userid 
            argument specifies a user-finding (greater than one million) and the parent argument is 0, 
            then the user-finding is deleted. If the userid argument specifies a user-finding (greater 
            than one million) and the parent argument is -1, then the user-finding is given a retired 
            status. Findings that are retired will not appear in prompting lists but they will still be 
            available for narration.</param>
            <param name="search">Search functions as the description field in the search table. This field is 
            a concise sentence form that is displayed whenever findings are prompted for data entry.</param>
            <param name="nomen">Nomen functions as the description field in the nomenclature table. This 
            field is a terse form that is used for displaying findings in branches of a treeview.  This 
            results in display that is less wordy and easier to follow at a glance.</param>
            <param name="sentpos">Sentpos functions as the docpos field in the sentence table. Sentpos, sentneg, 
            phrasepos, and phraseneg all support the escape codes described in the escape codes section of 
            the syntax for phrase and sentence tables section.</param>
            <param name="sentneg">Sentneg functions as the docneg field in the sentence table.</param>
            <param name="phrasepos">Phrasepos functions as the docpos field in the phrase table.</param>
            <param name="phraseneg">Phraseneg functions as the docneg field in the phrase table.</param>
            <param name="extrasearchwords">Extrasearch is a list of words that are indexed by the search engine 
            to locate this term. In addition, all words in the above text fields are also indexed.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>User-defined findings (or user-findings) are medical findings that are added by the end 
            user to supplement the MEDCIN nomenclature. The application program needs supply an edit form 
            to maintain a table of user-defined findings. When medcinserv is started, the table should be 
            passed to medcinserv using appropriate methods. Medcinserv stores this information in memory so 
            it needs to be passed at every startup. The UserFinding methods can be invoked at any time to 
            support dynamic editing.<para>Medcinserv also supports a method to save the current user-findings 
            and user-prompts in memory to two disk files. The save functionalty is invoked with the 
            SaveUdf() method. This call writes the user-findings and user-prompts to the medcin.udf and 
            medcin.udp files respectively. These files are created in the same directory as the medcin data 
            files. If medcin.udf and/or medcin.udp exist in the same directory as the medcin data files, 
            medcinserv will automatically reload the user-findings/user-prompts into ram at startup.</para>
            <para>Medcinserv integrates the user-findings with the MEDCIN findings and provides seamless 
            support for all functionality (i.e. intelligent prompting, diagnosis prompting, vocabulary 
            search, narrative support, expand children, etc).</para>
            <para>While user-findings are convenient when the user wants to enter findings that are not in the 
            MEDCIN nomenclature, user-findings have the negative aspects of only being exportable in text 
            form to other systems. Also, users usually don't develop the clinical content of their findings 
            in parallel with existing MEDCIN findings.</para>
            <para>User-findings should have permanent medcinids greater than one million to not interfere with 
            medcinid assignments. Whenever a new version of MEDCIN is released, it is desirable to be able 
            to map user-findings to MEDCIN findings if the user-finding is duplicated in the new MEDCIN 
            release. This is because the new medcinids will be specifically integrated (as opposed to 
            integrated by inheritance) with the MEDCIN knowledge base and be exportable and usable to 
            other systems at large.</para><para>User-findings may be added into any of the six existing trees 
            that are the symptom, physical finding, history, test, diagnosis, and therapy trees.  The first 
            user-finding added has to have a MEDCIN finding in any of the six trees as a parent. 
            Subsequent user-findings may have an already added user-finding as a parent or any MEDCIN 
            finding as a parent. These rules enforce building a coherent tree. A user-finding's nodekey 
            determines its location in a tree. The nodekey is assigned dynamically by medcinserv in the 
            order that user-findings are added.</para>
            <para><example>This sample illustrates sending the data for all UDFs to the server:
            <code>
            private bool InvokeRegisterFindings(ArrayList alUDF)
            {
               MedUDF oUdf = default(MedUDF);
               int UDFid = 0;
               int parentid = 0;
               bool bolBad = false;
               string sSentpos = null;
               string sPhrasepos = null;
               try {
                   foreach ( oUdf in alUDF) {
                    bolBad = false;
                    sSentpos = oUdf.SentencePositiveText;
                    if ((Strings.Len(sSentpos) == 0))
            	        sSentpos = " ";
                    sPhrasepos = oUdf.PhrasePositiveText;
                    if ((Strings.Len(sPhrasepos) == 0))
            	        sPhrasepos = " ";
                    switch (oUdf.AttachLink) {
            	        case UDF_PAR:
            		        UDFid = oUdf.UserID + UDF_BASE;
            		        parentid = MedClient.ParentMedcinid(_with1.AttachID);
            		        break;
            	        case UDF_SUB:
            		        UDFid = oUdf.UserID + UDF_BASE;
            		        parentid = oUdf.AttachID;
            		        // Guard against trying to make a sub of lowest level
            		        if ((MedClient.Nodelevel(parentid) &gt; 8))
            			        bolBad = true;
            		        break;
            	        case UDF_REP:
            		        UDFid = oUdf.AttachID;
            		        parentid = 0;
            		        break;
                    }
                    if ((!bolBad)) {
            	        MedClient.AddUserFinding(UDFid, parentid, oUdf.SearchText, oUdf.NomenclatureText, sSentpos, oUdf.SentenceNegativeText, sPhrasepos, oUdf.PhraseNegativeText, oUdf.AdditionalSearchText);
            	        if (((oUdf.Uflags &amp; UDF_CODES) &gt; 0)) {
            		        MedClient.UserFindingCodes(UDFid, oUdf.Icd9, oUdf.Icd2, oUdf.IcdH, oUdf.IcdF, oUdf.Cpt, oUdf.CptMod);
            	        }
            	        if (((oUdf.Uflags &amp; UDF_RANGE) &gt; 0)) {
            		        MedClient.UserFindingRange(UDFid, oUdf.UnitOfMeasure, oUdf.FemaleLowRange, oUdf.FemaleHighRange, oUdf.MaleLowRange, oUdf.MaleHighRange);
            	        }
            	        if (((oUdf.Uflags &amp; UDF_TAG) &gt; 0)) {
            		        MedClient.SetUserFindingTag(UDFid, oUdf.Tag);
            	        }
            	        if (((oUdf.Uflags &amp; UDF_PROP) &gt; 0)) {
            		        MedClient.UserFindingProperties(UDFid, oUdf.Properties);
            	        }
                    }
                 }
                   return true;
               } catch (Exception ex) {
                   PostError(ex);
               }
            }
            </code></example>
            </para></remarks>
        </member>
        <member name="M:Medicomp.Connection.udfCodeList(System.Int32,System.String)">
            <summary>
            This function is used to add a list of code mappings to a user defined finding
            </summary>
            <param name="userid">is the id of the user-finding or MEDCIN finding for which the code information.</param>
            <param name="codelist">is a comma-delimited list of code maps: <c>codeset,year,code[,codeset,year,code[...]]</c></param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>The year parameter is the first code year that the code is valid. Currently, only ICD-9-CM, ICD-10-CM, and CPT 
            code types have code year requirements. For all other codesets, year should be 0. The ICD code year runs from October 1st 
            of one year through September 30th of the following year which is designated the code year. The CPT code year runs from 
            January 1st through December 31st. A maximum of 64 code maps are permitted.
            <para>When the saveUdf() API is called in the V22 server, it will no longer generate type 2 records for codes; 
            type 7 records will be generated, one record for each UDF-assigned code mapping. The UserFindingCodes API will continue 
            to function for some period of time to allow clients sufficient time to rework their software.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.ExpandCodehint(Medicomp.CodeLinks,System.String,System.Int32)">
             <summary>
             This function is used to obtain a list of Medcin terms parsed from a codehint.
             </summary>
             <param name="codeset">The codeset of the hint; valid for ICD9 and ICD10. (Int32 for ActiveX)</param>
             <param name="codehint">The codehint of a single code.</param>
             <param name="mode">Use 256 to have the codeset code that is mapped to each discovered finding appended to the description; 0 otherwise.</param>
             <returns>The API will extract the encoded substrings (ex: CFT81.4,O75.3,O03-O07,O08.0,T88.0,T80.2+) 
             from a codehint string, expand the delimited list of codes to include all codes within the ranges specified, 
             and for each code obtains a list of the Medcin terms that are mapped to each code and have reportable codes. 
             The resulting list is returned with each list item delimited with a newline character, 
             and fields within an item delimited with a tab character. 
             List items that identify a code parsed from the hint have the following fields: id=0, code, description. 
             List items that identify a finding mapped to a code have the following fields: Medcinid, nodekey, description; 
             if the mode value has bit 8 set (256), the description includes the code delimited with a tilde character.</returns>
             <remarks>
             <example>This function expands the ICD-10-CM hint for the current MedcinId:
             <code>
             private void codeHintsToolStripMenuItem_Click(object sender, EventArgs e)
             {
            #if BUILDV22
                 char[] delims= { '|', '\\' };
                 System.Text.StringBuilder sb = new System.Text.StringBuilder();
                 tssCurrent.Text = "This command takes time...";
                 tssCurrent.Invalidate();
                 this.Cursor = System.Windows.Forms.Cursors.WaitCursor;
                 string thehint = Medconn.CodeFromMedcin(CurrentMedcinid, CodeLinks.medCodeICD10, 2);
                 string[] hints = thehint.Split(delims);
                 foreach (string hint in hints)
                 {
                     sb.AppendLine(hint);
                     sb.AppendLine(Medconn.ExpandCodehint(Medicomp.CodeLinks.medCodeICD10, hint, 256).Replace("\n", "\r\n"));
                 }
                 txtProperties.Text = sb.ToString();
                 tbcViews.SelectedIndex = 4;
                 tssCurrent.Text = "";
                 this.Cursor = System.Windows.Forms.Cursors.Default;
            #endif
             }
              </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.UserFindingCodes(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This method adds cpt and icd codes to a user-finding or it changes or adds codes to an existing medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <seealso cref="M:Medicomp.Connection.AddUserFinding(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.UserFindingRange(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:Medicomp.Connection.NextUdf"/>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">is the id of the user-finding or MEDCIN finding for which the code information </param>
            <param name="icd9">icd9cm code</param>
            <param name="icd2">secondary incd9cm code.</param>
            <param name="icdh">icd9cm code to use when finding has the history prefix.</param>
            <param name="icdf">icd9cm code to use when finding has the family history prefix.</param>
            <param name="cpt">is the cpt code.</param>
            <param name="cptmod">is the cpt code modifier.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>For V22, this API is still supported; however, your application should use the udfCodeList API 
            that provides support for any codde type as well as multiple codes per code type per year.</remarks>
        </member>
        <member name="M:Medicomp.Connection.UserFindingProperties(System.Int32,System.String)">
            <summary>
            This method allows for modifying properties of a user defined finding. When a user finding is added, 
            it derives its properties by inheritance from its parent finding. This method allows you to override 
            these properties. At this time, the only property that is permitted to be overridden is the Flag property.
            </summary>
            <param name="userid">Is the id of the user-finding for which the properties information modifies.</param>
            <param name="properties">A string that encodes the property modifications.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The format of the userproperties string is a comma-delimited set of fields. 
            Each field begins with a character that corresponds to the specific property to be modified. 
            If the property is flag-type bit field, the property character is followed by a character 'r' or 's' 
            followed by a numerical value representing the bits to be modified. The 'r' specifies that the property 
            bits represented by the numerical value are to be reset, while 's' specifies setting the corresponding 
            bits of the property represented by the value. For instance, if you wish to set the <i>retired</i> bit of the Flag property 
            (the retired flag is bit 0 represented by a value of 1), use a string that contains "fs1". The string can contain multiple 
            fields affecting the same Flag property using a combination of reset and set. For instance, 
            a string such as "fs1,fr10" would set bit 0, and reset bits 3 and 1.</remarks>
        </member>
        <member name="M:Medicomp.Connection.UserFindingRange(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method adds units of measure and normal ranges for male and female to a user finding or it 
            changes or adds to an existing medcinid.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <seealso cref="M:Medicomp.Connection.UserFindingCodes(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.AddUserFinding(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Medicomp.Connection.NextUdf"/>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">This is the id of the user-finding or MEDCIN finding for which the code information applies.</param>
            <param name="unitsofmeasure">units of measure for this finding.</param>
            <param name="femlowrange">low side of normal range for female</param>
            <param name="femhighrange">high side of normal range for female.</param>
            <param name="malelowrange">low side of normal range for male.</param>
            <param name="malehighrange">high side of normal range for male.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.MedispanEx(System.Int32,System.String)">
            <summary>
            This method obtains a comma-delimited Medcinid list given a MedispanID and details.
            </summary>
            <param name="MedispanID">The Medispan identification.</param>
            <param name="Details">To be determined.</param>
            <returns>The list of Medcinids is returned.</returns>
            <remarks><u>Note that this method currently has no implementation</u>.</remarks>
        </member>
        <member name="M:Medicomp.Connection.MedispanIds(System.Int32)">
            <summary>
            This method obtains a list of Medispan ids mapped to Medcin terms. 
            </summary>
            <seealso cref="M:Medicomp.Connection.CodeFromMedcin(System.Int32,Medicomp.CodeLinks,System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns a comma separated list of mapped Medispanids. </returns>
        </member>
        <member name="M:Medicomp.Connection.Transcribe(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Int16)">
            <summary>
            The Transcribe function is used to obtain a null-terminated phrase or sentence description for a 
            medcinid when passed data associated with a chart record.
            </summary>
            <seealso cref="M:Medicomp.Connection.TranscribeFlag"/>
            <param name="texttype">'P' to request phrase text, or 'S' to request sentence text</param>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="prefix">The prefix qualifier code, or null string if none</param>
            <param name="modifier">The modifier qualifier code, or null string if none</param>
            <param name="result">The result qualifier code, or null string if none</param>
            <param name="status">The status qualifier code, or null string if none</param>
            <param name="valuestr">The value as a string, or null string if none. Note that the value will be
            inserted into the text only if the narration string has a '~V' specification.
            See the TranscribeFlag API for determining whether the valuestr was used.</param>
            <param name="units">The units associated with valuestr, or null string if none</param>
            <param name="rdoc">The docid code of the referred to doctor, or 0 if none (see the AddDocName 
            method) for referencing a name string to a docid. The doctor name associated with this docid 
            would be used if the prefix qualifier code is PREFIX_REFERELS, 'RF'.</param>
            <param name="lingo">'D' for doctor or professional language, or 'P' for patient or lay language</param>
            <param name="capitalize">Set TRUE if the first character of the returned string should be 
            capitalized, FALSE otherwise</param>
            <param name="truncate">Set TRUE to enable the truncation option (used when the sentence being 
            constructed will subsequently incorporate phrasing for a lower-level positive finding).</param>
            <returns>The phrase or sentence description is returned.</returns>
            <remarks>Note that if texttype is 'S' and lingo is 'D', and the text string applicable to medcinid 
            is a one-space string, a null string will be returned. This permits the application to replace 
            a finding using a User-Defined Finding (UDF) with a one-space DoctorPositiveText string to 
            eliminate the sentence text. This may be useful for those applications that desire to eliminate 
            the 'The Chief Complaint is:' text string for a narration.</remarks>
        </member>
        <member name="M:Medicomp.Connection.TranscribeFlag">
            <summary>
            TranscribeFlag is used to obtain certain information relevant to the immediately preceding Transcribe method.
            </summary>
            <seealso cref="M:Medicomp.Connection.Transcribe(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Int16)"/>
            <returns>Returns the result of the prior Transcribe method.</returns>
            <remarks>The result provides bit-mapped values according to the following table:
            <list type="table">
            <listheader><term>Result bit</term><description>Description of Use</description></listheader>
            <item><term>Bit 1 (value 2)</term><description>Set to a 1 value if valuestr was inserted into the returned 
            Transcribe text; otherwise it is reset to a 0 value. There are some MEDCIN strings which 
            contain a '~V' hint specifying the placement of a value and units (23087 DOCPOS, for example). 
            Thus, if you passed a non-null valuestr and the MEDCIN string incorporated the hint, the 
            Transcribe function would have inserted the valuestr into the returned text string. Your code 
            would need to know about this action to avoid appending the valuestr. Conversely, if you 
            passed a non-null valuestr and this bit was 0, your code needs to append the valuestr and 
            units.</description></item>
            <item><term>Bit 2 (value 4)</term><description>Set if a prefix qualifier was prepended to the returned 
            Transcribe text; otherwise it is reset to a 0 value.</description></item>
            <item><term>Bit 6 (value 64)</term><description>Set if patient (lay) text is requested and the PATPOS text 
            string is null; otherwise it is reset to a 0 value. This provides knowledge that even though 
            lay text was requested, there is no difference between the doctor and patient text supplied 
            by MEDCIN for this medcinid.</description></item>
            <item><term>All Other Bits</term><description>All other bits are currently unused or are reserved and are reset to 0 values.</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddDocName(System.Int32,System.String)">
            <summary>
            Transcribe provides functionality to create a list of doctor names referenced by a doctor 
            identification number, docid. If the rdoc argument passed to the Transcribe function is 
            non-zero, it must be one of the docid entries established in this list of doctor names. 
            The docid passed in AddEncounter is also used to associate the encounter provider by name 
            reference within the narrative. Your list must be created prior to calling Transcribe. 
            Create this list with repeated calls to AddDocName, or in a single call with a delimited (see docid parameter).
            </summary>
            <param name="docid">The identification numer of the provider, or 0 to pass a tab-delimited list 
            of docid^Tname pairs in the name parameter.</param>
            <param name="name">The name of the provider as you want it to appear in the narration.
            This can also contain a tab-delimited list of docids and docnames.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>If AddDocName is called with a docid which is already in the list, if the name passed 
            is identical to what is already stored in the list for that docid, the call will be ignored; 
            otherwise, the current name will replace the name previously stored in the list.</para>
            <para>A list of docids and docnames can be passed in the name parameter by passing a 0 in the docid parameter.
            The name string list must contain tab-delimited pairs of <c>'docid^tname'</c>, one pair for each identification.
            For example, <c>'1234^tDr Smith^t4321^tDr Jones'</c> passes a list of two identities.</para>
            <para><example>Illustrates sending a complete doctor list:
            <code>
            public int loadDoctorTable(Medicomp.Connection mClient, bool bHist)
            {
               // Procedure reads the doctor table and passes to Medcin
               //   mClient: is a reference to the thin client control
               //
               string DocName = null;
               string strSql = null;
               int Docid = 0;
               int Nurseid = 0;
               int Role = 0;
               int NurseCount = 0;
               System.Text.StringBuilder sb = new System.Text.StringBuilder();
               try {
                   strSql = "SELECT docid,docname,Role FROM doctor;";
                   myCmd = myDbFactory.CreateCommand();
                   myCmd.Connection = myDbConn;
                   myCmd.CommandText = strSql;
                   dbReader = myCmd.ExecuteReader();
                   while ((dbReader.Read())) {
                    Docid = dbReader.GetInt32(0);
                    if ((dbReader.IsDBNull(1))) {
            	        DocName = "The Doctor";
                    } else {
            	        DocName = dbReader.GetString(1);
                    }
                    if ((sb.Length > 0))
            	        sb.Append(Constants.vbTab);
                    sb.Append(Docid.ToString);
                    sb.Append(Constants.vbTab);
                    sb.Append(DocName);
                    Role = dbReader.GetInt32(2);
                    if ((Role == Medicomp.DocCodes.medNurseEntering)) {
            	        NurseCount += 1;
            	        Nurseid = Docid;
                    }
                   }
               } catch (Exception ex) {
                   PostTheError(ex);
               } finally {
                   if (((dbReader != null))) {
                    if ((!dbReader.IsClosed)) {
            	        dbReader.Close();
                    }
                   }
               }
               try {
                   if ((bHist)) {
                    mClient.HistAddDocName(0, sb.ToString);
                   } else {
                    mClient.AddDocName(0, sb.ToString);
                   }
               } catch (Exception ex) {
                   PostTheError(ex);
               }
               if ((NurseCount == 1)) {
                   return Nurseid;
               } else {
                   return 0;
               }
            }
            </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddDemographics(System.String,System.String)">
            <summary>
            This method is used to provide demographic information for the narrative. The preferred method 
            to pass this information is the SetPatient() API as that provides the API to pass all 
            demographic information that the Medcin server uses in a single call.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)"/>
            <param name="patientname">The name of the patient formatted for presentation. For example, 
            'John Doe', 'Mrs. Smith', 'Mr. George Jetson', and 'Ms. Penelope Flowers' are all possible 
            name strings.</param>
            <param name="birthdate">The birth date of the patient. The format is 'YYYYMMDDHHIISS' where 'YYYY' 
            is the year, 'MM' is the month, 'DD' is the day, 'HH' is the hour, 'II' is the minute, 
            and 'SS' is the second. Use as much precision as the birth date is recorded (usually 'YYYYMMDD'). 
            For example, '18980507' designates May 7, 1898. If you use the hours precision, hours should 
            be in 24-hour time.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.AddEncounter(System.String,System.Int32)">
            <summary>
            This function is used to establish a physician reference for an encounter. The name string used 
            in the narrative will be associated to the docid using the list maintained by AddDocName.
            </summary>
            <seealso cref="M:Medicomp.Connection.ClearNarrative"/>
            <param name="encountertime">The encounter time to reference the encounter. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter 
            time is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. For example, '199805071610' 
            designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="docid">The docid of the provider responsible for the encounter. The AddDocname 
            method is used to associate a name with the docid.</param>
            <returns>The encounter identifier assigned by the Medcin server is returned.</returns>
            <remarks>If more than one AddEncounter API is invoked with different encountertime strings,
            the date and time of the latest encountertime parameter will be used for synchronization with
            any headings passed using the AddEncounterHeadings API as well as the default date for tables.
            <para><example>This fragment illustrates sending the encounter information:
            <code>
              line = sr.ReadLine();
              fields = SplitLine(line);
              string BaseDate, CodeNumber, CodeName, ProviderID, Tag;
              int Docid;
              short enc;
              // Place split fields into named strings for ease in understanding the import format
              EncounterTime = fields[0];      // Dates are in YYYYMMDDHHNNSS format
              BaseDate = fields[1];
              CodeNumber = fields[2];
              CodeName = fields[3];      
              ProviderID = fields[4];
              Tag = fields[5];
              switch (mode)
              {
                case ImportMode.Encounter:
                  myAgeInMinutes = AgeInMinutes(BirthDate, EncounterTime);
                  MedConn.SetPatient(myAgeInMinutes, Gender, Ethnic, Religion, Race, 
                    FirstName + " " + LastName, BirthDate);
                  break;
                case ImportMode.HistoryPool:
                  break;
              }
              if (ProviderID.Length == 0) Docid = 1;
              else Docid = Convert.ToInt32(ProviderID);
              if (mode == ImportMode.Encounter)
              {
                if (HaveEncounter) return Count;     // Stop importing after one encounter
                HaveEncounter = true;
                enc = MedConn.AddEncounter(EncounterTime, Docid);
              }
              else
                MedConn.HistAddEncounter(EncounterTime, Docid);
            </code></example>
            </para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            This method is used to add a finding to the narrative finding collection.  
            <para>If itemid is passed as a negative number, then AddNarrate will assign the absolute value 
            of that number as the itemid; in this way, you can control the reference numbers assigned to 
            each finding to be a unique set. <b>Make sure that if you assign itemid numbers in this fashion, 
            each must be uniquely assigned.</b></para>
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="itemid">This number is passed to the function in order to modify any of the subsequent 
            parameter values once a finding has been added to the finding collection. If itemid is 0 or 
            negative, then the finding addition is considered to be new to the collection. To change any 
            value of a finding once added, you edit it by passing the itemid previously returned by 
            AddNarrate when adding the finding.</param>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, AddNarrate will return a 0.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <returns>If an error is encountered, a 0 will be returned. 
            Otherwise, the positive assisned itemid will be returned.</returns>
            <remarks>Also review the AddNarrate2 API. When AddNarrate is called with an itemid of 0, it returns 
            a unique number reference for the finding being added to the narrative finding collection (the number 
            to be used as itemid reference in subsequent modifications of the finding in the collection).</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)">
            <summary>
            This function is used to add episodic data to a finding previously added to the finding collection.
            <para>The episode data string will be presented prior to the onset string. In a statement of the 
            form, 'John Doe reported coughing up sputum every 2-3 hours lasting 5 minutes May 1998 for 
            2 months', 'every 2-3 hours lasting 5 minutes' is the episode, 'May 1998' is the onset, 
            and '2 months' is the duration. The phrase 'for' is introduced by the narrative generator. 
            The phrase, 'every 2-3 hours lasting 5 minutes' is the episode passed in AddEpisode.</para>
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate; 
            it is used to identify the encounter finding to asociate the epiode.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode 
            string as documented below.</param>
            <returns>If the data is successfully added, AddEpisode returns 1; otherwise it returns 0.</returns>
            <remarks>Encoded Episode Format
            <para>The episode can be passed as an encoded string that contains a packed version of the 
            episode fields; the format is 'expression|FreqFm|FreqTo|DurFm|DurTo'. The episode can be 
            expressed in either a frequency (# per unit of time) or as an interval (every # units of time). 
            This choice is made in the expression field: 'F' for frequency or 'I' for interval. Each 
            additional field is formatted as a series of digits followed by a time unit character 
            ('N' minute, 'H' hour, 'D' day, 'W' week, 'M' month, 'Y' year). The period is determined from 
            the FreqFm and FreqTo fields. The duration of the episode is determined from the DurFm and 
            DurTo fields. The string is converted to presentation format for narration.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddValue(System.Int32,System.String,System.String,System.Double,System.Double)">
            <summary>
            This function is used to add value-associated data to a finding previously added to the finding collection. 
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/> 
            <param name="itemid">This number should be one of the values previously returned by Add</param>
            <param name="valuestr">The value formated for display presentation. This is limited to a maximum of 10 characters.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr. When the Unit parameter is "lbs", 
            the valuestr parameter can accept a string of the form "val1#val2". When the string is in this format, the "val1" portion 
            will be interpreted as the quantity of pounds and the "val2" portion will be interpreted as the quantity of ounces. 
            When emitted in the narration, it will be presented as "val1 lbs val2 oz". For example, "150#8" is equivalent to "150.5". 
            However, the former will be emitted in the narration as "150 lbs 8 oz" whereas the latter will be emitted as "150.5 lbs".
            The narrative engine escapes the value field text string when emitting RTF or HTML since this field could contain characters, 
            such as angle brackets, that require this treatment for certain rendering engines.
            </param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous RangeNormalLow method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous RangeNormalHigh method request for the finding.</param>
            <returns>If the data is successfully added, AddValue returns 1; otherwise it returns 0.</returns>
        </member>
        <member name="M:Medicomp.Connection.AddNote(System.Int32,System.String)">
            <summary>
            This function is used to add a free text note to a finding previously 
            added to the finding collection.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="itemid">This number should be one of the values previously 
            returned by AddNarrate</param>
            <param name="note">The marked or unmarked note text to be added to the 
            finding identified by the itemid. The text is limited to the maximum 
            length of a string.</param>
            <returns>If the note is successfully added, AddNote returns true; otherwise it returns False</returns>
            <remarks>Marking is implemented according to the following:
            <list type="bullet">
            <item>SOT control code followed by ASCII '0' – plain text to follow the finding text</item>
            <item>SOT control code followed by ASCII '1' – RTF text to follow the finding text</item>
            <item>SOT control code followed by ASCII '2' – HTML text to follow the finding text</item>
            <item>SOT control code followed by ASCII '3' – XML text to follow the finding text</item>
            <item>SOT control code followed by ASCII '8' – plain text to precede the finding text</item>
            <item>SOT control code followed by ASCII '9' – RTF text to precede the finding text</item>
            <item>SOT control code followed by ASCII 'A' – HTML text to precede the finding text</item>
            <item>SOT control code followed by ASCII 'B' – XML text to precede the finding text</item></list>
            <para>SOT is the control code x'02' or chr$(2).</para>
            <para>If the output is HTML and HTML links are turned on, the link text will start
            with the finding text even if text is marked to precede the finding text.</para>
            <para>Text with no marking, or marked as plain text, will be filtered 
            as noted below. Sub-strings will be interpreted as follows:</para>
            <list type="bullet">
            <item>No marker found – plain text</item>
            <item>Plain Text marker found – plain text until next marker or end of string.</item>
            <item>RTF marker found – RTF until next marker or end of string.</item>
            <item>HTML marker found – HTML text until next marker or end of string.</item>
            <item>XML marker found – XML text until next marker or end of string.</item></list>
            <para>The following indicates the handling of narration output:</para>
            <list type="bullet">
            <item>For a finding that has unmarked free text, filtering as noted below 
            will be applied.</item>
            <item>For a finding that has marked text, if a marked sub-string is present that 
            matches the current narrative output, it will be added to the finding's free 
            text presentation.</item>
            <item>For a finding that has marked text, if a marked sub-string is not present 
            that matches the current narrative output, the following procedure will 
            be used:
            <list type="bullet">
            <item>If marked plain text is present, emit the plain text filtered according to the criteria below</item>
            <item>Otherwise emit the only marked text present (in this case, only one sub-string was present).</item></list></item></list>
            <para>
            If marked HTML text is added to a free text finding (certain non-clinical findings used solely to attach free text notes), 
            the narrative output is HTML, and either the bookmark or HTMLRef user preference for narrative tags is in effect, 
            the HTML anchor will not be added to the narration of that finding as the anchor would interfere with the proper rendering 
            of your HTML text string. The one exception is if your HTML text sub-string starts with a short plain text piece that the 
            narration engine can use to construct the HTML anchor tag; the plain text piece must be a minimum of 5 characters and there 
            must be a space between the plain text piece and the rest of the HTML text. Here is an example HTML marked text string that 
            includes a plain text piece, "mytitle ":
            </para>
            <para><c>[SOT]2mytitle &lt;HTML&gt;&lt;center&gt;&lt;table width="95%" border="1" cellspacing="0"&gt;</c></para>
            <para>The server handler for AddNote() strips a terminating period from unmarked 
            note text in addition to the filtering noted below. For marked Plain Text, 
            only filtering is performed. Therefore if you do not want the handler to 
            remove a terminating period from plain text, prefix the plain text marker.</para>
            <para>Plain text notes will accept the tilde character ('~') as a logical new 
            line and will convert it, on outline or narrative format narrated output only, 
            to the appropriate line break for each of the narrative output options 
            (plain text, Rich text, or HTML). If you want to have a tilde in the note text 
            appear as a tilde, then provide two tildes.</para>
            <para>Notes attached to findings are considered free text and are presented 
            using the styling of the Free Text element (see the rtfStyle API). 
            If the narration output is HTML or RTF, the narration generator will 
            filter the text and perform character substitutions per the following 
            table so rendering engines will correctly present the output:</para>
            <list type="table">
            <listheader><term>Character</term><description>HTML output</description><description>RTF output</description></listheader>
            <item><term>back slash</term><description>No change</description><description>back slash back slash</description></item>
            <item><term>left brace</term><description>No change</description><description>back slash left brace</description></item>
            <item><term>right brace</term><description>No change</description><description>back slash right brace</description></item>
            <item><term>ampersand</term><description>ampersand amp</description><description>No change</description></item>
            <item><term>left angle bracket</term><description>ampersand lt</description><description>No change</description></item>
            <item><term>right angle bracket</term><description>ampersand gt</description><description>No change</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.GroupName(Medicomp.MedcinGroups)">
            <summary>
            This method obtains the presentation string used to provide a heading for a group.
            </summary>
            <seealso cref="T:Medicomp.MedcinGroups"/>
            <param name="groupnumber">The number of the group for which the heading name is desired. (enumMedcinGroup for ActiveX) 
            A comma-delimited string of all group names in group sequence can be obtained with a single 
            call using medAllGroups as the groupNumber parameter.</param>
            <returns>The group name heading is returned.</returns>
            <remarks>Note that the application can change the group names used by the narrative by means of the SetGroupName API 
            (or the MessageString API).</remarks>
        </member>
        <member name="M:Medicomp.Connection.Narrate">
            <summary>
            This method obtains the narrative for the current collection of findings previously added to the 
            narrative collection. The generation will use the current states of NarrativeContext, 
            NarrativeFormat, NarrativeOutput, ShowMedcinid, and ShowItemid.
            </summary>
            <seealso cref="M:Medicomp.Connection.NarrateEx(Medicomp.NarrateOptions,Medicomp.NarrativeContexts,Medicomp.NarrativeFormats,Medicomp.NarrativeOutputs,Medicomp.LinkPMHs,Medicomp.ShowOptions,Medicomp.TimedSections,System.String)"/>
            <returns>A string containing the narration generated using the current parameters is returned.</returns>
            <remarks>When the narrative engine is pairing up systolic and diastolic blood pressure findings, it uses the following criteria to make a match:
            <list type="bullet">
            <item><description>Equivalent BP site (sitting, standing, supine, etc.</description></item>
            <item><description>Same onset time</description></item>
            <item><description>Same encounter time</description></item>
            <item><description>Same link group code</description></item>
            <item><description>Same subgroup (body system code group or equivalent)</description></item>
            </list>
            <para>In the Tests narrative group, imaging findings will be emitted in sequence according to the following topics:</para>
            <list type="bullet">
            <item><description>Orders: This includes findings with any of the following prefixes: 
            ordered, order repeat, scheduled, referred elsewhere, evaluate, order postpone, order cancel, and follow-up. 
            Note that these findings would normally be placed in the Plan narrative group but may be overridden by the application.</description></item>
            <item><description>Performed: This includes findings that have the orderable flag set (gpflags orderable) with a blank result.</description></item>
            <item><description>Reviewed: This includes an imaging finding that has the 'reviewed' prefix.</description></item>
            <item><description>Other: This includes any orderable imaging finding with a non-blank prefix that does not fall into the three prior topics.</description></item>
            <item><description>Impressions: This includes an orderable imaging finding entered as a negative; it should emit as '… was normal'. 
            It also includes any non-orderable imaging finding not included in the four previous topics.</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetGroupSequence(Medicomp.MedcinGroups)">
            <summary>
            This method is used to obtain the presentation sequence of a narrative group.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetGroupSequenceEx"/>
            <seealso cref="T:Medicomp.MedcinGroups"/>
            <param name="groupNumber">One of the MedcinGroups enumeration. (enumMedcinGroup for ActiveX)</param>
            <returns>The group sequence of the requested group number is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetGroupSequence(Medicomp.MedcinGroups,System.Int16)">
            <summary>
            This method is used to alter the sequence of narrative groups; only the first 36 groups are 
            supported. When re-sequencing, you must invoke GroupSequence for all groups before your new
            sequencing will take affect. Alternatively, passing  a zero for both groupNumber and newGroupSequence
            will reset the sequence to the initial server sequence. <b>It is recommended that applications use the 
            SetGroupSequenceEx method that supercedes this method and allows the entire resequencing to 
            be handled with one API call.</b> To resequence groups Misc10 through Misc37, you must use the 
            SetGroupSequenceEx API.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetGroupSequenceEx(System.String)"/>
            <param name="groupNumber">One of the <see cref="T:Medicomp.MedcinGroups">MedcinGroups</see> enumeration
            that designates the narrative group sequence you wish to change.</param>
            <param name="newGroupSequence">The new sequence you wish to assign.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetSubGroupSequence(Medicomp.MedcinGroups,System.Int16)">
            <summary>
            This method is used to obtain the presentation sequence of the subgroups within a narrative group.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetSubGroupSequence(System.String)"/>
            <param name="Group">The <see cref="T:Medicomp.MedcinGroups">narrative group number</see> of the 
            group for which the subgroup sequence is  desired. (enumMedcinGroup for ActiveX) The subgroup sequence for all groups can be
            obtained in a single GetSubgroupSequence method call by using a Group number of 0.</param>
            <param name="Mode">If Mode is 1, the string returned contans desriptions for the group and subgroups. 
            If Mode is 0, the string returned contains only the group and sequence values.</param>
            <returns>A string containing the delimited subgroup sequencing is returned.</returns>
            <remarks>The syntax of the sequence string is the group number followed by the set of presentation 
            sequence numbers for each subgroup of that group. All fields are delimited with a vertical bar 
            character. If descriptions are requested, they follow each value and are delimited by a tilde 
            character.<para>At this time, the only Groups that have supported subgroup sequencing are History 
            of Present Illness, Physical Examination, and Review of Systems.</para>
            <para>The following string illustrates the Sequence string returned from the call,</para> 
            <para><c>Sequence = GetSubgroupSequence(2,1)</c></para>
            <para><c>2~History of present illness|1~encounter background information|2~military service|3~systemic 
            symptoms|4~head-related symptoms|5~eye symptoms|6~otolaryngeal symptoms|7~breast 
            symptoms|8~cardiovascular symptoms|9~pulmonary symptoms|10~gastrointestinal 
            symptoms|11~genitourinary symptoms|12~endocrine symptoms|13~skin symptoms|14~hematologic 
            symptoms|15~musculoskeletal symptoms|16~neurological symptoms|17~psychological symptoms</c></para>
            <para>The following string illustrates the Sequence string returned from the call,</para> 
            <para><c>Sequence = GetSubgroupSequence(2,0)</c></para>
            <para><c>2|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17</c></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.SetSubGroupSequence(System.String)">
            <summary>
            This method is used to change the presentation sequence of the subgroups within a narrative group.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetSubGroupSequence(Medicomp.MedcinGroups,System.Int16)"/>
            <param name="Sequence">A string that contains the sequence numbers delimited as noted below.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The subgroup sequence for multiple groups can be established in a single SetSubgroupSequence 
            method call; delimit each group sequence substring with a tab character (vbTab or C's '\t').  
            The syntax for the sequence string of a group is the group number followed by the set of 
            presentation sequence numbers for each subgroup of that group. All fields are delimited with a 
            vertical bar character.
            <para>The only Groups that have supported subgroup sequencing are History of Present Illness, 
            Physical Examination, and Review of Systems. See the <see cref="M:Medicomp.Connection.GetSubGroupSequence(Medicomp.MedcinGroups,System.Int16)">
            GetSubgroupSequence</see> method for obtaining the current subgroup sequencing.</para>
            <para>The following example uses the Review of Systems list of subgroups that have the following default sequence:
            <list type="number">
            <item>Encounter Background Information</item><item>Military Service</item>
            <item>Systemic Symptoms</item><item>Head-related Symptoms</item>
            <item>Eye Symptoms</item><item>Otolaryngeal Symptoms</item>
            <item>Breast Symptoms</item><item>Cardiovascular Symptoms</item>
            <item>Pulmonary Symptoms</item><item>Gastrointestinal Symptoms</item>
            <item>Genitourinary Symptoms</item><item>Endocrine Symptoms</item>
            <item>Skin Symptoms</item><item>Hematologic Symptoms</item>
            <item>Musculoskeletal Symptoms</item><item>Neurological Symptoms</item>
            <item>Psychological Symptoms</item></list></para>
            <para>A sequence string indicating this default sequence is: '16|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17', 
            16 is the narrative group number for Review of Systems. If one wanted to designate 
            Cardiovascular Symptoms to appear as the second subgroup and Pulmonary Symptoms as the third 
            subgroup, the sequence string would appear as: '16|1|4|5|6|7|8|9|2|3|10|11|12|13|14|15|16|17'.</para>
            <para>A group's subgroup presentation sequence can be restored to the default presentation by a 
            sequence string of the form, 'GroupNumber|0'. In the example group, '16,0' would restore the 
            presentation sequence as shown in the table.</para>
            <para>The presentation sequence for all supported groups' subgroups can be reset to the default 
            sequence by passing a 0-length string for the Sequence parameter.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetGroupNumber(System.Int32)">
            <summary>
            This function is used to obtain the group number calculated for a finding 
            added to the narrative collection by AddNarrate(). Also review the 
            AddNarrate2 API which allows setting the group number while adding the 
            finding. 
            </summary>
            <param name="itemid">This number should be one of the values 
            previously returned by AddNarrate</param>
            <returns>The group number of the item identified is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)">
            <summary>
            This function is used to set the group number for a finding  added to
            the narrative collection by AddNarrate(). Also review the  AddNarrate2
            API which allows setting the group number while adding the  finding.
            </summary>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate</param>
            <param name="newvalue">The new value of the group number to be assigned. (MedcinGroups for Java)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The group sequence for the finding identified by the itemid will 
            be reassigned once the group number is reassigned. If the newGroupNumber 
            is not a valid group number, then no assignments will be made. If the 
            application sets the group number MEDCIN logic will no longer make any 
            group assignment during any subsequent Add-type of API. Once the group 
            number has been assigned by the application, if you wish to have MEDCIN 
            dynamically determine the group number based on internal logic, simply 
            set the group number to 0 using this API.</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetNarrativeFormat">
            <summary>
            This method is used to obtain the type of format being used for the encounter narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrativeFormat(Medicomp.NarrativeFormats)"/>
            <seealso cref="T:Medicomp.NarrativeFormats"/>
            <returns>This returns one of the NarrativeFormats enumeration values.</returns>
            <remarks>When MedcinInit is invoked, NarrativeFormat defaults to medFormatNarrative. 
            It also is set to medFormatNarrative when ClearNarrative() is invoked.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetNarrativeFormat(Medicomp.NarrativeFormats)">
            <summary>
            This method is used to set the type of format being used for the encounter narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrativeFormat"/>
            <seealso cref="T:Medicomp.NarrativeFormats"/>
            <param name="nNewValue">One of the NarativeFormats enumeration to set. (Int16 for ActiveX)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When MedcinInit is invoked, NarrativeFormat defaults to medFormatNarrative. 
            It also is set to medFormatNarrative when ClearNarrative() is invoked.
            <para>
            The allowable choices for format are as follows (note that this is a bit flag and can include 
            one value from set A, one value from set B, and any combination of values from set C):
            <list type="table">
            <listheader><term>Set</term><description>Use</description></listheader>
            <item><term>A</term><description>Edit format</description></item>
            <item><term>A</term><description>Outline format</description></item>
            <item><term>A</term><description>Narrative format</description></item>
            <item><term>B</term><description>Use CodeStr description in lieu of the Medcin description</description></item>
            <item><term>B</term><description>Medcin description then CodeStr description</description></item>
            <item><term>B</term><description>CodeStr description then Medcin description</description></item>
            <item><term>C</term><description>Add the MSG_CODEOPEN and MSG_CODECLOS tags to surround the CodeStr description text</description></item>
            <item><term>C</term><description>Prefix the code string with the code</description></item>
            </list>
            </para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetNarrativeOutput">
            <summary>
            This method is used to obtain the type of output being used for the encounter narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrativeOutput(Medicomp.NarrativeOutputs)"/>
            <seealso cref="T:Medicomp.NarrativeOutputs"/>
            <returns>This returns one of the NarrativeOutputs enumeration values.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetNarrativeOutput(Medicomp.NarrativeOutputs)">
            <summary>
            This method is used to set the type of output being used for the encounternarrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrativeOutput"/>
            <seealso cref="T:Medicomp.NarrativeOutputs"/>
            <param name="nNewValue">This is one of the NarrativeOutputs enumeration values. (Int16 for ActiveX)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When MedcinInit is invoked, NarrativeOutput defaults to medOutputPlain.
            <para>For a NarrativeOutput set to medOutputRtf, the narration will be tagged with hidden text as follows:
            <list type="bullet">
            <item>Immediately preceding the body portion of the narration will be a hidden text string that appears as <c>"{\v body}"</c>. 
            Following the conclusion of the body portion and prior to the rtf terminating brace will be the text string that appears 
            as <c>"{\v ebody}"</c>. These two tags present the scope of the body portion of the rtf narration.</item></list>
            These tags will permit an application to easily parse a complete narration and decompose the content into each 
            narrative group’s rtf text.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetNarrativeContext">
            <summary>
            This method is used to obtain the type of context being used for the narrative. 
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrativeContext(Medicomp.NarrativeContexts)"/>
            <seealso cref="T:Medicomp.NarrativeContexts"/>
            <returns>The current NarrativeContexts enumeration value is returned.</returns>
            <remarks>Context should be set prior to entering findings for an encounter to ensure correct 
            output for that context.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetNarrativeContext(Medicomp.NarrativeContexts)">
            <summary>
            This method is used to set the type of context being used for the narrative. 
            Context should be set prior to entering findings for an encounter to ensure correct 
            output for that context.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrativeContext"/>
            <seealso cref="T:Medicomp.NarrativeContexts"/>
            <param name="nNewValue">One of the NarrativeContexts enumeration values. (Int16 for ActiveX)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When MedcinInit is invoked, NarrativeContext defaults to medContextChart. 
            It also is set to medContextChart when ClearNarrative() is invoked. To ascertain 
            differences among the textual generation variations by context, refer to the detailed 
            documentation on narrative generation. Note that 'Evaluation and Management' findings, 
            as well as the 'correspondence' finding (Medcinid 49941) and the 'patient care reviewed' 
            finding (Medcinid 49941) are presented only for medContextChart Additionally, a physician 
            examination string is generated for all contexts other than medContextChart.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetShowItemid(System.Int16)">
            <summary>
            This method is used primarily for diagnostic purposes. When set non-zero, the itemid assigned by 
            AddNarrate() will be prefixed to a finding's text generated by Narrate(). The value is 
            initially set to 0; it is not affected by ClearNarrative().
            </summary>
            <param name="bNewValue">Set non-zero to show the itemid or 0 to hide it.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that the number will be prefixed with MessageString(MSG_SHOWOPEN) and suffixed with 
            MessageString(MSG_SHOWCLOSED); thus, your application can change the appearance of the string 
            prefixed to the finding text by using the <see cref="M:Medicomp.Connection.SetMessageString(System.Int16,System.String)">SetMessageString</see> method.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetShowMedcinid(System.Int16)">
            <summary>
            This method is used primarily for diagnostic purposes. When set non-zero, the Medcinid associated 
            with a finding's text will be prefixed to its text generated by Narrate(). The Medcinid will 
            include either a 'P' or 'S' to indicate whether the text was obtained from either the phrase 
            or sentence table. The property is initially set 0; it is not affected by ClearNarrative().
            </summary>
            <param name="bNewValue">Set to non-zero to show the Medcinid of a finding in the narrative.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that the number will be prefixed with MessageString(MSG_SHOWOPEN) and suffixed with 
            MessageString(MSG_SHOWCLOSED); thus, your application can change the appearance of the string 
            prefixed to the finding text.</remarks>
        </member>
        <member name="M:Medicomp.Connection.ClearNarrative">
            <summary>
            This method will remove all findings from the narrative collection maintained 
            by AddNarrate(). It will also remove all encounters from the collection 
            maintained by AddEncounter.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddEncounter(System.String,System.Int32)"/>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The following properties are set: NarrativeContext to medContextChart, 
            and NarrativeFormat to medFormatNarrative, Chapter to 0.</remarks>
        </member>
        <member name="M:Medicomp.Connection.DeleteNarrate(System.Int32)">
            <summary>
            This function is used to remove a finding previously added to the finding collection. 
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate</param>
            <returns>If the finding is successfully removed, DeleteNarrate returns 1; otherwise it returns 0.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetMedcinTimeFormat(Medicomp.DatePrecisions)">
            <summary>
            This method is used to obtain the format associated with presenting a date and time data value based 
            on the precision of the date value. There is a separate property for each precision.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetTimeFormat(Medicomp.DatePrecisions,System.String)"/>
            <seealso cref="T:Medicomp.DatePrecisions"/>
            <param name="precision">One of the <see cref="T:Medicomp.DatePrecisions">DatePrecisions</see>.</param>
            <returns>The current format for the specified date precision is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetTimeFormat(Medicomp.DatePrecisions,System.String)">
            <summary>
            This method is used to set the format associated with presenting a date and time data value based 
            on the precision of the date value. There is a separate property for each precision. Note that
            all formats can be passed in one API call by concatenating each precision and format into a
            single string calling the API with a precision of medPrecisionAll.
            </summary>
            <seealso cref="T:Medicomp.DatePrecisions"/>
            <param name="precision">One of the <see cref="T:Medicomp.DatePrecisions">DatePrecisions</see> to set. (Int16 for ActiveX)</param>
            <param name="lpszNewValue">The new string to use for the associated precision.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The initial format strings for each precision are as follows:
            <list type="table">
            <listheader><term>Date Precision</term><description>Format String</description></listheader>
            <item><term>medPrecisionAll</term><description>Use to pass all precisions in a single API call.</description></item>
            <item><term>medPrecisionYear</term><description>%Y</description></item>
            <item><term>medPrecisionMonth</term><description>%m/%Y</description></item>
            <item><term>medPrecisionWeek</term><description>%Y, week %U</description></item>
            <item><term>medPrecisionDay</term><description>%m/%d/%Y</description></item>
            <item><term>medPrecisionHour</term><description>%m/%d/%Y at %I:00%p</description></item>
            <item><term>medPrecisionMinute</term><description>%m/%d/%Y %I:%M%p</description></item>
            <item><term>medPrecisionSecond</term><description>%m/%d/%Y %I:%M:%S%p</description></item>
            <item><term>medPrecisionTimeonly</term><description>%I:%M%p</description></item>
            </list>
            <para>Each of the above format strings uses a specification similar to that documented for the 
            standard C library strftime function. Each individual format specifier is a percent ('%') 
            followed by a specification character. The format specification characters supported by the 
            server are as follows:
            <list type="table">
            <listheader><term>Specification Character</term><description>Specification format.</description></listheader>
            <item><term>%</term><description>the percent character</description></item>
            <item><term>b</term><description>abbreviated month name (i.e. Jan, Feb, Mar, etc.)</description></item>
            <item><term>B</term><description>full month name (i.e. January, February, etc.)</description></item>
            <item><term>d</term><description>two-digit day of the month (i.e. 01, 02, etc.)</description></item>
            <item><term>e</term><description>day of the month (i.e. same as above without leading zero)</description></item>
            <item><term>H</term><description>two-digit hour (i.e. 00 to 23)</description></item>
            <item><term>I</term><description>two-digit hour (i.e. 01 to 12)</description></item>
            <item><term>j</term><description>three-digit day of the year (001 to 366)</description></item>
            <item><term>m</term><description>one or two-digit month (i.e. 1 to 12)</description></item>
            <item><term>n</term><description>two-digit month (i.e. 01 to 12)</description></item>
            <item><term>M</term><description>two-digit minute (i.e. 00 to 59)</description></item>
            <item><term>p</term><description>AM or PM</description></item>
            <item><term>S</term><description>two-digit second (i.e. 00 to 59)</description></item>
            <item><term>U</term><description>two-digit week number (i.e. 00 to 53)</description></item>
            <item><term>y</term><description>two-digit year without century (i.e. 00 to 99)</description></item>
            <item><term>Y</term><description>four-digit year</description></item>
            <item><term>Z</term><description>the time zone string passed as the format property using 
            medPrecisionTimeZone. Note that this string is limited to three characters. It is initialized 
            to a null string.</description></item>
            </list></para>
            <para>All other characters are taken literally. A format must not exceed 31 characters in length.</para>
            <para>When precision is passed as medPrecisionAll, then the string parameter should contain
            a newline (VbLf, 10d, '\n') delineated list of time formats; the Tab delineated parameters
            of each time format substring should be in the format <c>'precision ^T format'</c>.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetTimedSections">
            <summary>
            This method is used to set or obtain the state associated with presenting timed findings (findings 
            with an onset date more recent than the encounter date) into separate section groupings.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetTimedSections(Medicomp.TimedSections)"/>
            <returns>The current state of TimedSections is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetTimedSections(Medicomp.TimedSections)">
            <summary>
            This method is used to set the state associated with presenting timed findings (findings with an 
            onset date more recent than the encounter date) into separate section groupings.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetTimedSections"/>
            <param name="nNewValue">One of the <see cref="T:Medicomp.TimedSections">TimedSections</see> enumeration. (Int16 for ActiveX)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Certain findings, such as vital signs, stress test measurements, etc., may have values 
            recorded over time. These findings may be presented either in finding sequence, or grouped 
            into sections by time. This method controls the sequencing performed by the narrate() method.
            For the medTimedOn and medTimedHeading flags, findings with onset times greater than the encounter time will be 
            sequenced after all findings without an onset time. For the medTimedVitals flag, Vital Signs with onset times 
            will be sequenced by onset time within the narrative’s vital signs section. Setting the medTimedHeading flag 
            incorporates the functionality of medTimedOn so both flags do not need to be set.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddItemTag(System.Int32,System.Int32,System.String)">
            <summary>
            This function is used to add a client tag to a finding previously added to the finding collection.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate;
            it is used to identify the encounter finding associated with the item tag.</param>
            <param name="lTag">The tag number to be added to the finding.</param>
            <param name="sTag">The tag text to be added to the finding identified by the itemid. 
            The text can be of any length.</param>
            <returns>If the tag is successfully added, AddItemtag returns 1; otherwise it returns 0. </returns>
            <remarks>Note that you can add either or both tag units. When the tag(s) is(are) added to the 
            generated text, the lTag will be presented before the sTag. An itemtag lTag field is 
            recommended when using narrative output generated in HTML, as the itemtag lTag field can be 
            used for the HREF link (the sTag field can also be used for the link; however, it can be 
            better used for showing additional data).
            <para>The sTag field can be composed of multiple fields, each field delimited by a distinct 
            character that appears as the first character of the string. The string can be emitted 
            appearing before the finding text or following the finding text by means of the ShowItemTag 
            method.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all 
            tags can be emitted under program control by using the NarrateGroups API with a tag specifier 
            along with the ShowItemTag method. An example of an itemtag string with multiple fields 
            would be: '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold 
            data on the provider originally entering data and the provider editing data. The fields could 
            be selectively narrated by using the NarrateGroups API.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetShowItemtag">
            <summary>
            This method is used to obtain the state of adding a client tag (number and/or string) to the 
            generated text.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <seealso cref="M:Medicomp.Connection.AddItemTag(System.Int32,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.NarrateGroups(System.String)"/>
            <seealso cref="T:Medicomp.NarrativeTags"/>
            <returns>The current state of ShowItemTag is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)">
            <summary>
            This method is used to set the state of adding a client tag (number and/or string) to the generated 
            text. The nNewValue may consist of the sum of two or more values.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetShowItemtag"/>
            <seealso cref="M:Medicomp.Connection.AddItemTag(System.Int32,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.NarrateGroups(System.String)"/>
            <seealso cref="T:Medicomp.NarrativeTags"/>
            <param name="nNewValue">Any combination of the <see cref="T:Medicomp.NarrativeTags">NarrativeTags</see> enumeration (Int16 for ActiveX and Java)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Item tags are assigned to a finding by AddItemtag. The state is initially set to 
            medTagNone; it is not affected by ClearNarrative().
            <para>Note that the number will be prefixed with MessageString(MSG_SHOWOPEN) and suffixed with 
            MessageString(MSG_SHOWCLOSED); thus, your application can change the appearance of the string 
            prefixed to the finding text.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all tags 
            can be emitted under program control by using the NarrateGroups method with a tag specifier 
            along with the ShowItemTag method. An example of an itemtag string with multiple fields 
            would be: '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold 
            data on the provider originally entering data and the provider editing data. The fields could 
            be selectively narrated by using the NarrateGroups method.</para>
            <para>
            The nNewValue parameter is used to set the state of adding a client tag (number and/or string) to the generated text. 
            The newstate may consist of the sum of two or more values. The allowable choices for newstate are as follows:
            </para>
            <list type="table">
            <listheader><term>Show Enum</term><description>Functionality</description></listheader>
            <item><term>medTagNone</term><description>Nothing is prefixed to finding text.</description></item>
            <item><term>medTagLong</term><description>The item lTag, if any, is prefixed to the generated text.</description></item>
            <item><term>medTagString</term><description>The item sTag, if any, is prefixed to the generated text.</description></item>
            <item><term>medTagAll</term><description>Both tags are prefixed to the generated text</description></item>
            <item><term>medTagAsHREF</term><description>When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as an 
            HTML link (HREF=) using the lTag field of the itemtag. If medTagLong is not specified and medTagString is, 
            then the string tag will be used for the link and will be unavailable for showing. The text encompassed by the link will be the first word 
            of the corresponding finding text (or first two words if the first word is shorter than five characters). The tag will be prefixed 
            with <c>"C:\"</c> so that a web browser control considers the URL to be local to the machine. For example, using medTagLong+medTagAsHREF 
            and an itemtag of 17, the URL reference will be, <c>"C:\17"</c>. When the NarrativeOutput property is set to medOutputRTF, 
            the lTag field will be emitted formatted as rtf hidden text by surrounding the tag string with <c>"\v"</c> and <c>"\v0"</c> rtf codes. 
            A full rtf reader will properly format the text as hidden. The medTagAsHREF property is ignored if NarrativeOutput is neither medOutputHTML 
            nor medOutputRTF. Note that the prefix string, <c>"c:\"</c> used to construct the URL reference can be altered by changing MessageString(MSG_HREFPREFIX).</description></item>
            <item><term>medShowBookmark</term><description>When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as a bookmark. 
            The application can then use this bookmark for navigation using the HTML rendering engine. The bookmark will use the long tag if specified, 
            or the itemid if the long tag is 0. The bookmark can be used independently of or concurrently with the HREF. Bookmarks are constructed as 
            <c>NAME="ltag"</c> or <c>NAME="itemid"</c> and are within the scope of the finding anchor tag.</description></item>
            <item><term>medTagStringPost</term><description>The item sTag, if not used for medTagAsHREF,  is postfixed to the generated text following any attached note. 
            If the sTag contains multiple fields, fields may be selected for presentation using the NarrateGroups API. The tag string is preceded with a 
            MSG_SHOWOPEN string and succeeded with a MSG_SHOWCLOSED string. The string will be presented using the medTagText element styling. </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.TranscribeItem(System.String,System.String,System.Int32)">
            <summary>
            This method generates narrative text for the finding previously added to the narrative collection 
            and identified by itemid. 
            </summary>
            <param name="texttype">'P' to request phrase text, or 'S' to request sentence text.</param>
            <param name="lingo">'D' for doctor or professional language, or 'P' for patient or lay language.</param>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate;
            it is used to reference the desired finding.</param>
            <returns>The narrated finding is returned.</returns>
            <remarks><para>The generation will use the current states of ShowMedcinid, ShowItemid, and ShowItemTag. 
            The text generated includes: the value as applicable; onset, duration, and episode; any note, 
            and any rxstr. This essentially performs the functionality of Transcribe with the additional 
            data elements. Note that if the showItemtag parameter currently includes the medTagHTML setting, 
            the itemtag will be excluded from the transcribed string. The current narrative output for note 
            text is considered to be plain text.</para>
            <para>Note that if texttype is 'S' and lingo is 'D', and the text string applicable to 
            medcinid is a one-space string, a null string will be returned. This permits the application 
            to replace a finding using a User-Defined Finding (UDF) with a one-space DoctorPositiveText 
            string to eliminate the sentence text. This may be useful for those applications that desire 
            to eliminate the 'The Chief Complaint is:' text string for a narration.</para>
            <para>Note that if the application has provided a code string for the finding instance using the
            AddNarrateCode API, and the Narrative Format includes one of the flag bits that specifies presentation
            of the code string description, this API will include the code string based on the flag settings of
            the NarrativeFormat. This may substitute the code description for the Medcin description, or emit both
            descriptions. When the flags indicate use of only the code description, the API will still include any
            added note text; but no other properties will be part of the string returned</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.ItemsTag(System.Int32)">
            <summary>
            This method is used to obtain the item's string tag for a finding added to the narrative collection 
            by AddNarrate() or AddNarrate2.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate or 
            the itemid assigned by your application.</param>
            <returns>The item string tag for the specified finding is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.ItemlTag(System.Int32)">
            <summary>
            This method is used to obtain the item's numeric tag for a finding added to the narrative collection 
            by AddNarrate() or AddNarrate2.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate 
            or the itemid assigned by your aspplication.</param>
            <returns>The item's lTag is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.RtfStyle(Medicomp.RTFelements,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes,System.Int16,System.String)">
            <summary>
            This method is used to set the style of each narrative textual element in either HTML 
            or Rich Text output.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)"/>
            <seealso cref="M:Medicomp.Connection.ParagraphStyle(System.Int16,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,Medicomp.RTFcolors,Medicomp.BorderFrames,System.Int16)"/>
            <param name="element">Specifies the narrative element.
            See <see cref="T:Medicomp.RTFelements">Medicomp.RTFelements</see> for the list of choices. (Int16 for ActiveX)</param>
            <param name="font">Specifies the font for the element.
            See <see cref="T:Medicomp.RTFfonts">Medicomp.RTFfonts</see> for the list of choices. (Int16 for ActiveX)</param>
            <param name="color">Specifies the color of the font.
            See <see cref="T:Medicomp.RTFcolors">Medicomp.RTFcolors</see> for the list of choices. (Int16 for ActiveX)</param>
            <param name="size">The font size is designated in half-points (i.e. 20, 24, 28, 36, etc.); 
            use half-points is specified in the Microsoft Rich Text Format Specification.</param>
            <param name="attributes">Specifies the appearance of the font.
            See <see cref="T:Medicomp.RTFattributes">Medicomp.RTFattributes</see> for the list of choices. (Int16 for ActiveX and Java)</param>
            <param name="style">Style is used to associate a paragraph style (margins, alignment, border) to 
            the textual element. For other than style 0, the application must create a style with the 
            <see cref="M:Medicomp.Connection.ParagraphStyle(System.Int16,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,Medicomp.RTFcolors,Medicomp.BorderFrames,System.Int16)">ParagraphStyle</see> method. Note that the 
            server pre-assigns ParagraphStyle 1 to the medElementBody rtfStyle element. This is used to 
            establish a default indent of 0.25 inches. The default ParagraphStyle 1 can be changed by the 
            application by simply passing a 1 as the style parameter of the ParagraphStyle API.</param>
            <param name="tabstops">Tabstops is used to enter one or more tabstops for the element referenced. 
            A single tabstop is entered as an alignment character in either upper or lower case 
            ('C' implies centered, 'D' implies alignment to the decimal point, 'L' implies alignment flush 
            left, and 'R' implies alignment flush right). This is immediately followed by the tab position 
            expressed in inches; the numeric value must be greater than 0. If the alignment character is 
            omitted, flush left is taken as the default. Additional tabstops are delimited with a comma. 
            For example: 'R3.0,R4.5' define two tabs; the first flush right at three inches, the second 
            flush right at 4.5 inches. Tabstops also determine the number of columns in HTML tables. 
            To clear all current tab stops for an element, pass an empty string. Clearing the tab stops 
            for the TableHead and TableBody elements, results in those tables formed as single columns 
            with data fields delimited by a space. When the normal range data field is emitted, it will 
            be enclosed in parentheses. Note that the RichText control used in your application program 
            may not support all tab orientations.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Text strings that are distinct textual elements but are part of a sentence, rather than 
            a stand alone string, will be decorated with the element's font, font size, and font color, 
            as well as the bold, italic, underline, and strikethrough attributes; all other presentation 
            characteristics of the sentence's paragraph element will be retained. For example, a free text 
            note attached to a finding will use the font appearance and attributes of the Free Text element, 
            but the rest of the finding text will appear in the presentation styling of the Body or Body 
            outline element. For an additional example, note that the headings that occur in the Review 
            of Systems group in Outline Format are Sub-heads; they will be presented with the font and 
            attribute characteristics of the SubHead element; however, paragraph styling will be based on 
            the Body Outline element.</remarks>
        </member>
        <member name="M:Medicomp.Connection.RtfIndentLevel(Medicomp.RTFelements,System.Double)">
            <summary>
            This method is used to set the amount of indentation per level used in indenting the outline 
            portions of the narrative.
            </summary>
            <seealso cref="M:Medicomp.Connection.RtfStyle(Medicomp.RTFelements,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes,System.Int16,System.String)"/>
            <param name="element">Element is one of the elements identified in rtfStyle; however, only the medElementBodyOutline element is subject to outlining. (Int16 for ActiveX)</param>
            <param name="amount">Amount is expressed in inches and can vary from 0.0 to 2.0.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetMedcinVersion">
            <summary>
            This method obtains the internal version string of the Medcin server.
            </summary>
            <returns>The Medcin server version is returned.</returns>
            <remarks>The version string is typically in the format, 'M.VN.x.y' where 'M' is the major
            version of the server, 'VN' indicates the minor version which is followed by release indicators.
            The 'x' field indicates the year and quarter of the release: 20142 is 2nd quarter 2014.
            A version string of the Medcin database can be recovered from the Sdocneg property of Medcinid=1.
            This string is of the form, VN:YYYYMMDD. The 'VN' of the data and the 'VN' of the server
            must match for proper operation. The date portion of the string indicates the date of the release.
            <para>The database and server version data can be viewed from the system tray dialog of the
            Windows server version.</para>
            <example>This fragment gets the server's minor version
            <code>
               string version = Medconn.GetMedcinVersion();
               if (version.StartsWith("2."))
               {
                  // Find out what the minor version number is for spreadsheet functions
                  MedcinServerVersion = Convert.ToInt16(version.Substring(2, 2));
               }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddRxstr(System.Int32,System.String)">
            <summary>
            This function is used to add a prescription string to a finding previously added to the finding collection. 
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the itemid</param>
            <returns>If the rxstr is successfully added, AddRxstr returns 1; otherwise it returns 0. </returns>
            <remarks>
            <para>
            <example>Function to build an Rx string based on a Medicomp.Objects.MedPrescription object:
            <code>
            private string RxToString(MedPrescription oRx)
            {
            string strOut = string.Empty;
            string strSig = null;
            MedSIG objSIG = default(MedSIG);
            try {
            	if ((oRx != null)) {
            		if (oRx.NDC.Length &gt; 0) strOut = oRx.NDC + ": ";
            		strOut = strOut + oRx.Strength;
            		if (oRx.StrengthUnit.Length &gt; 0) strOut = strOut + " " + oRx.StrengthUnit;
            		if (oRx.Form.Length &gt; 0) strOut = strOut + " " + oRx.Form;
            		if (oRx.IV.Length &gt; 0)) strOut = strOut + " " + oRx.IV;
            		strSig = "";
            		if (oRx.Site.Length &gt; 0) strSig = "At:" + oRx.Site;
            		if (oRx.Quantity &gt; 0)) strSig = strSig + " " + oRx.Quantity;
            		if (oRx.QuantityUnit.Length &gt; 0) strSig = strSig + " " + oRx.QuantityUnit;
            		if (oRx.Route.Length &gt; 0) strSig = strSig + " " + oRx.Route;
            		if (oRx.Frequency.Length) &gt; 0) strSig = strSig + " " + oRx.Frequency;
            		if (oRx.RxWhen.Length &gt; 0) strSig = strSig + " " + oRx.RxWhen;
            		if (oRx.NumberOfDays &gt; 0) strSig = strSig + " " + oRx.NumberOfDays;
            		if (strSig.Length &gt; 0) {
            			strOut = strOut + " (" + Strings.Trim(strSig) + ")";
            		}
            		if ((oRx.cSIGs.Count &gt; 0)) {
            			foreach ( objSIG in oRx.cSIGs) {
            				strSig = "";
            				if (objSIG.Site.Length &gt; 0) strSig = "At:" + objSIG.Site;
            				if (objSIG.Quantity &gt; 0)) strSig = strSig + " " + objSIG.Quantity;
            				if (objSIG.Unit.Length &gt; 0) strSig = strSig + " " + objSIG.Unit;
            				if (objSIG.Route.Length &gt; 0) strSig = strSig + " " + objSIG.Route;
            				if (objSIG.Frequency.Length &gt; 0) strSig = strSig + " " + objSIG.Frequency;
            				if (objSIG.RxWhen.Length &gt; 0) strSig = strSig + " " + objSIG.RxWhen;
            				if (objSIG.Days &gt; 0) strSig = strSig + " " + objSIG.Days;
            				if (strSig.Length &gt; 0) {
            					strOut = strOut + " " + Strings.Trim(strSig) + ";";
            				}
            			}
            		}
            		if (oRx.Amount &gt; 0) strOut = strOut + " DISP:" + oRx.Amount;
            		if (oRx.FormPackage.Length &gt; 0) strOut = strOut + " " + oRx.FormPackage;
            		if (oRx.NumberOfRefills &gt; 0) strOut = strOut + " Refill:" + oRx.NumberOfRefills;
            		strOut = strOut + " Generic:" + oRx.Generic;
            		if (oRx.BrandName.Length &gt; 0) strOut = strOut + " Using:" + oRx.BrandName;
            		if (oRx.Lot.Length &gt; 0) strOut = strOut + " Lot:" + oRx.Lot;
            		if (oRx.ManufacturerName.Length &gt; 0) strOut = strOut + " Mfg:" + oRx.ManufacturerName;
            		if (oRx.Note.Length &gt; 0) strOut = strOut + " Note:" + oRx.Note;
            	}
            } catch (Exception ex) {
            	return ex.Message;
            }
            return strOut;
            }
            </code></example></para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.ParagraphStyle(System.Int16,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,Medicomp.RTFcolors,Medicomp.BorderFrames,System.Int16)">
            <summary>
            This method is used to set the parameters of a designated paragraph style for use in Rich Text or 
            HTML output. The style parameter becomes the reference used in the  rtfStyle method to associate
            a designated  paragraph style to a textual element. Note that the same style can be applied
            to more than  one textual element.
            </summary>
            <seealso cref="M:Medicomp.Connection.RtfStyle(Medicomp.RTFelements,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes,System.Int16,System.String)"/>
            <param name="Style">The style identifier to which the parameters pertain.</param>
            <param name="marginTop">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="marginLeft">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="marginBottom">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="marginRight">The margin parameter in units of inches (i.e. 0.25, 1.0, etc.).</param>
            <param name="Indent">The indent parameter in units of inches refers to the first line only.</param>
            <param name="Alignment">Alignment is 'L', 'C', 'R', or 'J' for left, centered, right, or justified. 
            Note that HTML output does not support justified alignment.</param>
            <param name="borderWidth">BorderWidth is the width in pixels of a border to surround the paragraph. 
            These values will be converted to twips at a factor of 20 twips per pixel for Rich Text output. 
            The acceptable range for borderWidth is 0 to 8 (0 implies no border).</param>
            <param name="borderColor">The color of the border.
            See <see cref="T:Medicomp.RTFcolors">Medicomp.RTFcolors</see> for the allowable choices. (ebumRTFcolors for ActiveX and Int16 for Java)</param>
            <param name="borderFrame">Specifies the border surrounding the paragraph.
            See <see cref="T:Medicomp.BorderFrames">Medicomp.BorderFrames</see> for the allowable choices. (enumBorderFrame for ActiveX and Int16 for Java)</param>
            <param name="borderSpacing">BorderSpacing is the amount of white space to leave between all sides 
            of the paragraph and the border. Its value is expressed in pixels, which will be converted to 
            twips at a factor of 20 twips per pixel for Rich Text output.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Borders are applied only to table elements for HTML output, and all elements for RTF output. 
            Note, however, that the Microsoft RichText control does not support borders. Nevertheless, 
            the RTF output from the narrative generator emits the RTF border codes (the result may be 
            seen in Microsoft Word). For NarrativeOutput in HTML, the only valid combinations are (words in 
            parentheses indicate HTML equivalent):
            <list type="number">
            <item>medFrameLeft, medFrameTop, medFrameRight, medFrameBottom (BOX)</item>
            <item>medFrameRight, medFrameLeft (VSIDES)</item>
            <item>medFrameBottom, medFrameTop (HSIDES)</item>
            <item>medFrameTop (ABOVE)</item>
            <item>medFrameRight (RHS)</item>
            <item>medFrameBottom. (BELOW)</item>
            <item>medFrameLeft (LHS)</item>
            </list>
            <para>For NarrativeOutput in HTML the medFrameShadow value will be ignored. 
            Any other combination of values will be invalid.</para>
            <para>The margin parameters relate to the white space to be left above, left of, below, and right 
            of the textual element. The medElementBody element 
            defaults to an indent of 0.25 inches; if you wish to change this property, you must assign 
            a paragraph style to the body element of the rtfstyles. MarginLeft and Indent work together 
            to form the paragraph presentation of the Physical and ROS narrative groups. These are 
            initialized to a marginLeft of 0.25 and an indent of -0.25 that results in a hanging indent 
            styled paragraph. This is the default presentation for those groups formatted with outline style.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddDxPrompt(System.Int32,System.Int32,System.String,Medicomp.ListSizes,System.Int16)">
            <summary>
            The Intelligent Prompting and Diagnosis Prompting functionality use lists of findings specific to 
            each diagnosis for creating lists for presentation to the user for entry. This method provides a 
            functionality for an application program to supplement the prompting lists based on input from 
            end users.
            </summary>
            <seealso cref="M:Medicomp.Connection.SaveUdf"/>
            <param name="dx">Dx is the medcinid of the concept for which the prompting list is assigned. 
            There is no inherent reason why Dx has to be a diagnosis, thus this list creation method and 
            the list retrieval method ActivateDx() may be applied to support home grown functionality. 
            For example, this technique could support maintaining prompting lists for tests that require 
            prerequisites to be input whenever the test is ordered. See Note: below.</param>
            <param name="medcinid">Medcinid is a finding that is added to the Dx's list. Medcinid could also 
            be the id of a user-defined finding. This allows users to add their own unique findings to the 
            prompting lists. If medcinid is zero, all user-defined items for the dx are dropped.</param>
            <param name="prefix">Prefix is the prefix code for the medcinid. Prefix codes can be retrieved 
            using the QualifierList API with the listname of "PREFIX". Example prefixes are 'H' History, 'F' 
            Family History, 'O' Order, and ' ' blank.</param>
            <param name="listsize">Listsize provides for retrieval of the prompt list in three different sizes 
            using the Activate() and ActivateDx() methods. The value of the listsize argument in these two 
            methods is: 1 = ShortList 2; = LongList; 3 = FullList. The values of listsize argument in this 
            AddUserPrompt() method are:<list type="table">
            <listheader><term>List Size</term><description>Size Function</description></listheader>
            <item><term>0</term><description>Drop item from list</description></item>
            <item><term>1</term><description>Add to Shortlist</description></item>
            <item><term>2</term><description>Eligible for LongList, Always in Fulllist</description></item>
            </list></param>
            <param name="childrendx">If the childrendx argument is non-zero, the medcinid will also be added to the lists of all children of the dx. 
            With this capability, findings for prompting lists can quickly be spread throughout the MEDCIN hierarchy. </param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The shortlist is the briefest, containing only the most important findings for a diagnosis. 
            A longlist contains shortlist and longlist items but some longlist items may be removed if 
            their respective parents are not in the chart. A fulllist is all of the prompt findings. 
            The '0 =  Drop' value will suppress an item in the list if the item is not a user defined item, 
            user defined items are removed from the list.</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetMessageString(System.Int16)">
            <summary>
            This method can be used to get any of the message strings used in the generation of the narrative. 
            These strings include Group headings, Table headings, Sentence prefixes, pronouns, canned 
            phrases, date and time units, etc. Rather than delineate the nearly 200 strings in this document,
            refer to the file named messages.h in the SDK\client\source folder for a description of each message index.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetMessageString(System.Int16,System.String)"/>
            <param name="Index">The index number of the message you wish to retrieve.<para>If you wish to set all message 
            strings to their original value, simply pass a negative index when assigning a new string. 
            The string passed will be ignored. <c>Medcin.MessageString(-1) = "ignored ";</c></para> 
            <para>A single message string can be reset to its original value by passing a null string as the new string. 
            Thus, you cannot set a string to a null string but you can set a string to a single space. <c>Medcin.MessageString(MSG_PHYSIC) = "";</c></para></param>
            <returns>Returns the message string assigned to the index.</returns>
            <remarks>If, when retrieving a string, the index is less than zero, the returned string will 
            contain the index number of the last message string. This can be used as an upper boundary 
            when retrieving the messages.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetMessageString(System.Int16,System.String)">
            <summary>
            This method can be used to change any of the message strings used in the generation of the narrative. 
            These strings include Group headings, Table headings, Sentence prefixes, pronouns, canned phrases, 
            date and time units, etc. Rather than delineate the nearly 200 strings in this document, refer 
            to the file named messages.h in the 
            SDK\Clients\source directory for a description of each message index.
            </summary>
            <param name="Index">The message index number as noted in the referenced source file.</param>
            <param name="lpszNewValue">The string you wish to assign to the message.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetNarrateOptions">
            <summary>
            This method is used to obtain the options used to customize the narrate generation.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetNarrateOptions(Medicomp.NarrateOptions)"/>
            <seealso cref="T:Medicomp.NarrateOptions"/>
            <returns>This returns the current NarrateOptions setting.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetNarrateOptions(Medicomp.NarrateOptions)">
            <summary>
            This method is used to set the options used to customize the narrate generation. The nNewValue may 
            consist of the sum of two or more values.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetNarrateOptions"/>
            <seealso cref="T:Medicomp.NarrateOptions"/>
            <param name="nNewValue">Any combination of the <see cref="T:Medicomp.NarrateOptions">NarrateOptions</see> enumeration. (Int16 for ActiveX and Java)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><b>NarrateHeader</b>
            <para>
            This header string will be formatted according to the specification codes found in the connection’s MessageString (MSG_NARHEAD). 
            A specification consists of the percent character followed by a code letter. Note that the code letter is case sensitive. 
            The following code letters are supported:
            <list type="table">
            <listheader><term>Character</term><description>Header SubString</description></listheader>
            <item><term>%</term><description>Inserts a percent character (since the percent character is treated as a specification escape character, 
            in order to emit a percent, the format string needs two consecutive percent characters).</description></item>
            <item><term>b</term><description>Inserts the patient’s birthdate formatted according to the current day precision format (see TimeFormats API).</description></item>
            <item><term>d</term><description>Inserts the doctor name associated with the doctorid of the latest date encounter passed using the AddEncounter API.</description></item>
            <item><term>g</term><description>Inserts the patient’s gender as passed in the SetPatient API as a single character.</description></item>
            <item><term>G</term><description>Inserts the patient’s gender as passed in the SetPatient API as a word (male, female, unknown). 
            The words are obtained from the appropriate message strings.</description></item>
            <item><term>p</term><description>Inserts the patient’s name as passed in the SetPatient API</description></item>
            <item><term>n</term><description>Insets a document break.</description></item>
            <item><term>t</term><description>Inserts the encounter time associated with the latest date encounter passed using the AddEncounter API; 
            the date is formatted according to the current day precision format (see TimeFormats API).</description></item>
            <item><term>T</term><description>Inserts the encounter time associated with the latest date encounter passed using the AddEncounter API; 
            the date is formatted according to the current minute precision format (see TimeFormats API).</description></item>
            </list>
            All other characters, as well as any character following a "%" that is not in the above code letter list will be inserted intact. 
            The default MSG_NARHEAD format string is <c>"%p: %g: %b: %T"</c>. The string will be emitted using the preferences currently 
            assigned to the medElementHeader element (see the rtfStyle API).
            </para>
            <para>
            The following is a sample of the default header as it appears in the narrative:
            </para>
            <para><c>Bob James: M: Mar 11, 1950 : Jul 2, 2001 03:04PM</c></para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.NarrateGroups(System.String)">
            <summary>
            This method is used to restrict the narrative generation to a specific set of groups or to specify 
            what fields of itemtag strings are to be emitted during a narration.
            </summary>
            <seealso cref="M:Medicomp.Connection.NarrateEx(Medicomp.NarrateOptions,Medicomp.NarrativeContexts,Medicomp.NarrativeFormats,Medicomp.NarrativeOutputs,Medicomp.LinkPMHs,Medicomp.ShowOptions,Medicomp.TimedSections,System.String)"/>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <param name="NewValue">The groups you wish to specify are passed as a series of range values encoded 
            in a string. For example, to restrict the narrative to Groups 2 through 5, 7, 9 through 15, 
            and 22, enter a string of <c>2-5,7,9-15,22</c>. The string will be parsed until the end of the 
            string is reached, or an invalid syntax is detected. If your range values are malformed, no 
            error will be generated; however, ranges interpreted prior to an invalid syntax will be 
            established for subsequent narrations.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>To narrate all groups, use a string of '1-64'. Note that a string with a single zero 
            character ('0') will also be interpreted as specifying all groups. If NewValue is a null string, 
            then no change from the previous Group setting will be interpreted. This may be useful when 
            passing the parameter in a NarrateEx function.
            <para>To use the API to specify what fields of string tags should appear in a narration, the NewValue 
            string should have a 'T' or 't' as the first character. Thus, an NewValue string of 
            <c>T1,3-5</c> would specify that fields 1, 3, 4, and 5 of itemtag strings would appear for 
            each finding if itemtag strings are turned on with the ShowItemTag API.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.NarrateEx(Medicomp.NarrateOptions,Medicomp.NarrativeContexts,Medicomp.NarrativeFormats,Medicomp.NarrativeOutputs,Medicomp.LinkPMHs,Medicomp.ShowOptions,Medicomp.TimedSections,System.String)">
            <summary>
            This method sets the current states of NarrateOption, NarrativeContext, NarrativeFormat, 
            NarrativeOutput, LinkPMH, Show(Medcinid, Itemid, and Tag), TimedSections, and NarrateGroups 
            to the values passed in the parameter list. It then generates the narrative for the current 
            collection of findings previously added to the narrative collection as if Narrate() was invoked.
            </summary>
            <seealso cref="M:Medicomp.Connection.Narrate"/>
            <seealso cref="M:Medicomp.Connection.SetNarrateOptions(Medicomp.NarrateOptions)"/>
            <seealso cref="M:Medicomp.Connection.SetNarrativeContext(Medicomp.NarrativeContexts)"/>
            <seealso cref="M:Medicomp.Connection.SetNarrativeFormat(Medicomp.NarrativeFormats)"/>
            <seealso cref="M:Medicomp.Connection.SetNarrativeOutput(Medicomp.NarrativeOutputs)"/>
            <seealso cref="M:Medicomp.Connection.SetShowMedcinid(System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.SetShowItemid(System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.SetShowItemtag(Medicomp.NarrativeTags)"/>
            <seealso cref="M:Medicomp.Connection.SetTimedSections(Medicomp.TimedSections)"/>
            <seealso cref="M:Medicomp.Connection.NarrateGroups(System.String)"/>
            <param name="Options">Any combination of the <see cref="T:Medicomp.NarrateOptions">NarrateOptions</see> enumeration. (Int16 for ActiveX and Java)</param>
            <param name="Context">One of the <see cref="T:Medicomp.NarrativeContexts">NarrateContexts</see> enumeration. (Int16 for ActiveX)</param>
            <param name="Format">One of the <see cref="T:Medicomp.NarrativeFormats">NarrateFormats</see> enumeration. (Int16 for ActiveX)</param>
            <param name="Output">One of the <see cref="T:Medicomp.NarrativeOutputs">NarrateOutputs</see> enumeration. (Int16 for ActiveX)</param>
            <param name="LinkPMH">If this parameter is non-zero, the original values of the other parameters
            will be restored before the method returns. If this parameter is 0, the passed values will be retained. (Int16 for ActiveX)</param>
            <param name="Show">Any combination of the <see cref="T:Medicomp.ShowOptions">ShowOptions</see> enumeration. (Int16 for ActiveX and Java)</param>
            <param name="Timed">One of the <see cref="T:Medicomp.TimedSections">TimedSections</see> enumeration. (Int16 for ActiveX)</param>
            <param name="Groups">The string designating the groups to narrate.</param>
            <returns>A string containing the narration generated using the passed parameters is returned.</returns>
            <remarks>
            <para>
            If Format is passed as medFormatTree, then the method will return a set of data relative to the current encounter. 
            If the Show parameter contains medShowMedcinid, then the text returned will be a string containing a subset of property 
            values for every finding in the encounter. If the Show parameter does not include medShowMedcinid, 
            then the text returned will be a set of data for constructing an outline view tree of the encounter. 
            Both these sets of data are detailed below. 
            </para>
            <para>
            This Show argument is a composite of ShowItemid, ShowMedcinid, and ShowItemtag. The argument may consist of the sum of 
            two or more values. The allowable choices are as follows:
            </para>
            <list type="table">
            <listheader><term>Show Enum</term><description>Functionality</description></listheader>
            <item><term>medShowNone</term><description>Nothing is prefixed to finding text.</description></item>
            <item><term>medShowTagLong</term><description>The item lTag, if any, is prefixed to the generated text.</description></item>
            <item><term>medShowTagString</term><description>The item sTag, if any, is prefixed to the generated text.</description></item>
            <item><term>medTagAll</term><description>Both tags are prefixed to the generated text</description></item>
            <item><term>medShowTagAsHREF</term><description>When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as an 
            HTML link (HREF=) using the lTag field of the itemtag. If medTagLong is not specified and medTagString is, 
            then the string tag will be used for the link and will be unavailable for showing. The text encompassed by the link will be the first word 
            of the corresponding finding text (or first two words if the first word is shorter than five characters). The tag will be prefixed 
            with <c>"C:\"</c> so that a web browser control considers the URL to be local to the machine. For example, using medTagLong+medTagAsHREF 
            and an itemtag of 17, the URL reference will be, <c>"C:\17"</c>. When the NarrativeOutput property is set to medOutputRTF, 
            the lTag field will be emitted formatted as rtf hidden text by surrounding the tag string with <c>"\v"</c> and <c>"\v0"</c> rtf codes. 
            A full rtf reader will properly format the text as hidden. The medTagAsHREF property is ignored if NarrativeOutput is neither medOutputHTML 
            nor medOutputRTF. Note that the prefix string, <c>"c:\"</c> used to construct the URL reference can be altered by changing MessageString(MSG_HREFPREFIX).</description></item>
            <item><term>medShowBookmark</term><description>When the NarrativeOutput property is set to medOutputHTML, the tag will be generated as a bookmark. 
            The application can then use this bookmark for navigation using the HTML rendering engine. The bookmark will use the long tag if specified, 
            or the itemid if the long tag is 0. The bookmark can be used independently of or concurrently with the HREF. Bookmarks are constructed as 
            <c>NAME="ltag"</c> or <c>NAME="itemid"</c> and are within the scope of the finding anchor tag.</description></item>
            <item><term>medTagStringPost</term><description>The item sTag, if not used for medTagAsHREF,  is postfixed to the generated text following any attached note. 
            If the sTag contains multiple fields, fields may be selected for presentation using the NarrateGroups API. The tag string is preceded with a 
            MSG_SHOWOPEN string and succeeded with a MSG_SHOWCLOSED string. The string will be presented using the medTagText element styling. </description></item>
            <item><term>medShowMedcinid</term><description>The Medcinid will be prefixed to the generated text.</description></item>
            <item><term>medShowItemid</term><description>The itemid will be prefixed to the generated text.</description></item>
            <item><term>medShowChapters</term><description>When used with medFormatTree for the Format parameter and medShowMedcinid is not flagged, 
            then the outline view data returned will include the chapter property of each finding inserted as the 2nd field. See the Outline View information below for details.</description></item>
            </list>
            <para>
            When the Format parameter is medFormatTree, the returned string contains special data for every finding
            in the encounter. This data is encoded as follows where records are delimited using a vbLF character ('\n') and fields
            are delimited using a vbTab character ('\t'). When Show includes medShowMedcinid, each record includes in order: 
            Itemid, Medcinid, Nodekey, TermType.</para>
            <para>Subsequent fields are added only if strings are not empty or numeric values are not zero. Each field begins with
            a field specification that designates the property in that field. These are: g, Flag; e, Eflag; q, Qflags; a, CAFlags;
            r, RxCode; c, CPT code; i, ICD9 code; x, ICD-10-CM code, map group 1 if no prefix requirement (V22+); u, Unit; h, Range Normal High; 
            l, Range Normal Low; G, Narrative Group; S, Narrative sub-group if not 0; p, GPflags.
            </para>
            <para>
            When Show does not include medShowMedcinid, each record includes in order: ItemID; Chapter (included only when
            the Show parameter includes medShowChapters); Narration Group; Ordering Key; '+' if positive, or '-' if negative;
            TermType; CPT code; ICD9 code; Text field (Transcribe of the finding with the 1st letter capitalized)</para>
            <para>Records are ordered by Chapter (if specified), Group Sequence, by Ordering Key. The ordering key used is the Sequence property formatted
            as a 5-digit number left-filled with zeroes if the finding is in the Assessment narrative group and has a non-zero
            sequence, or the Nodekey of the finding. A group record will precede the start of each new group. A group record is
            identified by an Itemid of 0 and a non-zero group number. Only the Narration Group and Transcribe fields will be populated
            with data, the Text field will contain the current group name of the group.</para>
            <para>If the Show parameter includes medShowChapters, every record will include the item’s chapter assignment as the 2nd
            data element. A record with an itemid of '0' and a group number of '0' will contain only the chapter number
            (which could be 0) and the chapter heading in the Text field. Be aware that without the medShowChapters flag,
            each record contains only 8 fields; with the flag each record contains 9 fields.</para>
            <para>A large encounter can be passed to the server with virtually no delay by coding a special bulk load of an encounter
            using the various AddNarrate forms that do not require return codes, and refraining from obtaining any other
            intermediate data from the Medcin server during the encounter loading. This NarrateEx method can be then used to get
            bulk data for the entire encounter using just two API calls.</para>
            <example>Procedure handles the narration of an encounter
            <code>
            private void Narrate()
            {
               // Get a narration; this API is used to pass all parameters in the API
               // Use the 'narrate()' API to utilize existing parameters.
               // Note that this sample has no API code for controlling presentation styles
               // We are specifying HTML output
               myNarration = Medconn.NarrateEx(
                   NarrateOptions.medNarrateHeader | NarrateOptions.medInlineBullets | NarrateOptions.medNumberedUseBullets | NarrateOptions.medChapterHeadings,
                   NarrativeContexts.medContextChart,
                   NarrativeFormats.medFormatOutline | NarrativeFormats.medFormatUseMedcinUseCodeStr | NarrativeFormats.medFormatAddTextDelimiter | NarrativeFormats.medFormatAddCodeToCodeStr,
                   OutputMode,
                   LinkPMHs.medHPILinkOff,
                   ShowOptions.medShowTagLong | ShowOptions.medShowTagAsHREF,
                   //ShowOptions.medShowTagString | ShowOptions.medShowMedcinid,
                   TimedSections.medTimedOff,
                   "0");
               if (OutputMode == NarrativeOutputs.medOutputHtml)
               {
                   string Path = Application.UserAppDataPath + "\\default.htm";
                   wbrNote.BringToFront();
                   // Create an instance of StreamWriter to write text to a file.
                   // The using statement also closes the StreamWriter.
                   using (StreamWriter sw = new StreamWriter(Path))
                   {
                       sw.Write(myNarration);    // Write the narration text
                   }
                   wbrNote.Navigate(Path);     // Now show the HTML narration in the web browser
               }
               else
               {
                   txtNote.Text = myNarration;
                   txtNote.BringToFront();
               }
               txtProperties.Text = Medconn.NarrateEx(
                   NarrateOptions.medOptionNone, NarrativeContexts.medContextNone, NarrativeFormats.medFormatTree,
                   NarrativeOutputs.medOutputPlain, LinkPMHs.medHPILinkOff, ShowOptions.medShowChapters,
                   TimedSections.medTimedOff, "0").Replace("\n", "\r\n");
               tbcViews.SelectedIndex = 1;
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.ActivateEM(System.Int32,System.String,System.Int32)">
            <summary>
            This method produces lists based on the last call to CalculateEM that show items from the encounter 
            that are relevant to calculating one of the requested 12 components.
            </summary>
            <seealso cref="M:Medicomp.Connection.CalculateEM(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.ActivateEMprompt(Medicomp.ListSizes,System.Int32,System.String,System.String,System.Int32)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="icode">The HCFA component number (1-12) for which supporting encounter data is desired. 
            The components are enumerated as follows (ResponseItem fields are referenced as:M=MedcinId, P=Prefix, N=nodekey, 
            D=Description, T=Termtype, F=Flags, S=Subs, C=CalculatedDx or ItemData):
            <list type="table"><listheader><term>Code</term><description>Data Content</description></listheader>
            	<item><term>1 - HPI</term><description>Produces a list of findings (itemids) and the item's 
            	attribute count for all findings in the encounter that are a part of the HPI component.
            	M=Itemid, D=TranscribeItem description, T=count of item's attributes, S=elements credited as a combination 
            	of the single letters indicating the attributes. See the aflags property for the letter assignments.</description></item>
            	<item><term>2 - ROS</term><description>Produces a list of findings (itemids) and the HCFA 
            	body system code for all findings in the encounter that are a part of the ROS component.
            	M=itemid; if this field is –1 then the only valid arguments are Description which contains 
            	the body system description which may be used as a heading, 
            	and termtype which contains the count of items satisfying that body system.  
            	Headings are followed by their respective itemids. P=ROS body system code: A=Constitutional, B=Eyes,
            	C=ENM&amp;T, D=Cardiovascular, E=Respiratory, F=Gastrointestinal, G=Genitourinary, H=Musculoskeletal, 
            	I=Integumentary, J=Neurological, K=Psychiatric, L=Endocrine, M=Hematologic/Lymphatic, N=Allergic/Immunologic,
            	O=Free text (special use only for value field; if the client application is using the value field of the 
            	ROS free text finding to designate a numbered quantity of ROS body systems, 
            	then data summary details will show up in this code.). T=If Medcinid=-1, 
            	this contains the count of items satisfying that body system; otherwise N/A.
            	F=Flags, S=N/A, C=N/A.</description></item>
            	<item><term>3 - PFSH</term><description>Produces a list of findings (itemids) and the HCFA 
            	category of Prior medical, Family history, or Social history, for all findings in the 
            	encounter that are a part of the PFSH component.
            	M=itemid; if this field is –1 then the only valid argument is Description which contains the 
            	description for one of the three categories which may be used for a heading. 
            	P=PFSH body system code (1=PMH, 2=SH,3=FH). N=nodekey. D=TranscribeItem() Description,
            	T=N/A, F=Flags, S=N/A, C=N/A.</description></item>
            	<item><term>4 - Overall History</term><description>Is not applicable.</description></item>
            	<item><term>5 - EXAM</term><description>Produces a list of the last computed exam's body 
            	systems, or a list of bullets for the requested body system, or a list of findings in the 
            	encounter for the requested bullet. Uses sParam and wParam to differentiate.</description></item>
            	<item><term>6 - Overall MDM</term><description>Is not applicable.</description></item>
            	<item><term>7 - Dx/Mgt Options</term><description>Produces a list of findings (itemids) 
            	and each item's complexity for all findings in the encounter that are a part of the 
            	Dx/Mgt Options component.
            	M=itemid, P=N/A, N=nodekey, D=TranscribeItem() Description, Y=N/A, F=N/A, S=ASCII value of item’s complexity 
            	or points contributed by the problem workup, C=N/A</description></item>
            	<item><term>8 - Complexity of Data </term><description>Produces a list of findings (itemids) 
            	for all findings in the encounter that are a part of the Complexity of Data component.
            	M=itemid, P=N/A, N=nodekey, D=TranscribeItem() Description, T=N/A, F=N/A, S=ASCII value of item’s complexity, C=N/A.</description></item>
            	<item><term>9 - Overall Risk </term><description>Is not applicable.</description></item>
            	<item><term>10 - Presenting Problem</term><description>Produces a list of findings 
            	(itemids) and each item’s risk for all findings in the encounter that are a part of the 
            	Presenting Problem component.
            	M=itemid, P=N/A, N=nodekey, D=TranscribeItem() Description, T=N/A, F=N/A, S=ASCII value of item’s risk, C=N/A.</description></item>
            	<item><term>11 - Diagnostic Procedures Ordered</term><description>Produces a list of 
            	findings (itemids) and each item’s risk for all findings in the encounter that are a 
            	part of the Diagnostic Procedures Ordered component.
            	M=itemid, P=N/A, N=nodekey, D=TranscribeItem() Description, T=N/A, F=N/A, S=ASCII value of item’s risk, C=N/A.</description></item>
            	<item><term>12 - Management Options Selected</term><description>Produces a list of 
            	findings (itemids) and each item’s complexity for all findings in the encounter that are 
            	a part of the Management Options Selected component.</description></item>
            </list></param>
            <param name="sparm">Used to specify a particular body system for the Exam component. See table below.</param>
            <param name="wparm">Used to specify a particular Bullet for a body system for the Exam component. See table below.</param>
            <returns>The specified data is returned as an ArrayList of ResponseItem data structures.</returns>
            <remarks>
            <b>Use of sparm and wparm for Exam</b>
            <list type="table">
            <listheader><term>sparm &amp; wparm</term><description>Data returned in ResponseItem fields</description></listheader>
            <item><term>sparm=""; wparm=0</term><description>Produces a list of body systems descriptions for the last computed examtype.
            M=-1; F=number of bullets met; T=number of bullets in body system; P=body system code; S="+" if encounter data exists for body system; 
            C=set if body system is satisfied; D=body system description.</description></item>
            <item><term>sparm=Body system code returned in the Prefix argument in the above row; wparm=0</term>
            <description>Produces a list of bullet descriptions for the requested body system. M=-1; T=bullet number; P=body system code; 
            S="+" if encounter data exists for body system; C=set if body system is satisfied; D=body system description.</description></item>
            <item><term>sparm=Body system code returned in the Prefix argument in the first row; wparm=Bullet number returned in the termtype argument in the above row.</term>
            <description>Produces a list of findings from the encounter that are relevant to the bullet. M=itemid; C=set; D=TranscribeItem() description.</description></item>
            </list>
            <para>Note: Whether or not that bullet has been met is based on a comprehensive examination (level 4) for the type of 1997 exam being calculated (GMS, ENT, etc.). 
            Note that for 1997 GMS, a comprehensive exam requires <i>“for each area/system, documentation of at least two elements identified by a bullet”</i>. 
            For most organ specific exams, <i>“document every element in each box with a shaded border and at least one element in each box with an unshaded border”</i>. 
            Exceptions for the shaded box requirements exist for the musculoskeletal and skin boxes of the musculoskeletal examination, 
            and for the skin box of the skin examination. Since the 1995 GMS exam has no such requirements for the comprehensive level, 
            the column indicates “TRUE” if 4 elements are present to address the needs of the 1995 4X4 method.</para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.ActivateEMprompt(Medicomp.ListSizes,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This function produces prompt lists for each of the 11 E and M physical exams as well as the ROS, 
            HPI, and PFSH components. A list can be created for the whole exam, a single body system for 
            an exam, or a single bullet for a body system.
            </summary>
            <seealso cref="M:Medicomp.Connection.CalculateEM(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="listsize">size of prompt list: 1 = show base medcinids for request, 
            2 = show base medcinids and additional children where diagnostically relevant. (Int16 for ActiveX)</param>
            <param name="icode">The HCFA component number (1-5) for which prompting data is desired:
            <para>
            <list type="table">
            <listheader><term>Component</term><description>Prompting Data</description></listheader>
            <item><term>1=HPI</term><description>Produces a list of findings that are part of the HPI component.</description></item>
            <item><term>2=ROS</term><description>Produces a list of findings that are a part of the ROS component.</description></item>
            <item><term>3=PFSH</term><description>Produces a list of findings for the PFSH component of Prior medical, Family history, or Social history.</description></item>
            <item><term>4=HISTORY</term><description>N/A</description></item>
            <item><term>5=EXAM</term><description>Produces a list of findings for each of the 11 Physical exam types.  Uses examtype, sParam, and wParam to be more specific.</description></item>
            </list></para></param>
            <param name="examtype">One of the codes in the set of records retrieved from the QualifierList("EXAMTYP") API. 
            This parameter is used only when icode = 5.</param>
            <param name="sparm">Used to specify a particular body system for the Exam component. The specific combination of values 
            for the parameters and resulting ResponseList fields are summarized in the table below.  
            The values for wParam are the same as used in the ActivateEM() API.</param>
            <param name="wparm">Used to specify a particular Bullet for a body system for the Exam component. 
            The specific combination of values for the parameters and resulting ResponseList fields are summarized in the table below. 
            The values for sParam are the same as used in the ActivateEM() API.</param>
            <returns>Returns an ArrayList of ResponseItem data structures.</returns>
            <remarks>
            <b>Use of sparm and wparm for Exam</b>
            <list type="table">
            <listheader><term>sparm &amp; wparm</term><description>Data returned in ResponseItem fields</description></listheader>
            <item><term>sparm=""; wparm=0</term><description>Produces a complete list of finding for all body systems in the requested examtype. 
            When medcinid = -1 the description field is a body system description or a bullet description
            M=MedcinId or -1; F=N/A; T=termtype if medcinid != -1. When the CodeDetail iCode parameter is -5, this field will be filled with the body system code group number assigned 
            to the finding with that number normally retrieved using the Cgn API; P=prefix of medcinid if medcinid!= -1, else if medcinid = -1 then prefix is a body system code or a bullet number; 
            S="+" if medcinid != -1 and finding has children; 
            C=if medcinid = -1; TRUE if description is a body system, FALSE is description is a bullet; D=body system, bullet, or finding description.</description></item>
            <item><term>sparm=Body system code returned in the Prefix argument in the above row; wparm=0</term>
            <description>Produces a list of bullet descriptions for the requested body system.
            M=MedcinId or -1; F=N/A; T=termtype if medcinid != -1. When the CodeDetail iCode parameter is -5, this field will be filled with the body system code group number assigned 
            to the finding with that number normally retrieved using the Cgn API; P=prefix of medcinid if medcinid!= -1, else if medcinid = -1 then prefix is a body system code or a bullet number; 
            S="+" if medcinid != -1 and finding has children; 
            C=if medcinid = -1; TRUE if description is a body system, FALSE is description is a bullet; D=body system, bullet, or finding description.</description></item>
            <item><term>sparm=Body system code returned in the Prefix argument in the first row; wparm=Bullet number returned in the termtype argument in the above row.</term>
            <description>Produces a list of findings from the encounter that are relevant to the bullet.
            M=MedcinId or -1; F=N/A; T=termtype if medcinid != -1. When the CodeDetail iCode parameter is -5, this field will be filled with the body system code group number assigned 
            to the finding with that number normally retrieved using the Cgn API; P=prefix of medcinid if medcinid!= -1, else if medcinid = -1 then prefix is a body system code or a bullet number; 
            S="+" if medcinid != -1 and finding has children; 
            C=if medcinid = -1; TRUE if description is a body system, FALSE is description is a bullet; D=body system, bullet, or finding description.</description></item>
            </list>
            <para>Note: Whether or not that bullet has been met is based on a comprehensive examination (level 4) for the type of 1997 exam being calculated (GMS, ENT, etc.). 
            Note that for 1997 GMS, a comprehensive exam requires <i>“for each area/system, documentation of at least two elements identified by a bullet”</i>. 
            For most organ specific exams, <i>“document every element in each box with a shaded border and at least one element in each box with an unshaded border”</i>. 
            Exceptions for the shaded box requirements exist for the musculoskeletal and skin boxes of the musculoskeletal examination, 
            and for the skin box of the skin examination. Since the 1995 GMS exam has no such requirements for the comprehensive level, 
            the column indicates “TRUE” if 4 elements are present to address the needs of the 1995 4X4 method.</para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.CalculateEM(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            This method is used to calculate an Evaluation and Management code using the MEDCIN findings in the current encounter 
            and additional data captured as part of your user interface. The method of calculation is based 
            on the <i>Health Care Financing Administration (HCFA) 1997 Documentation Guidelines for Evaluation 
            and Management Services</i>; the document is available from 
            <see url="http://www.cms.hhs.gov/medlearn/emdoc.asp">CMS's web site</see>. 
            </summary>
            <param name="setting">One of the codes in the set of records from the qualifier table having the 
            codename <c>SETTINGS</c>.</param>
            <param name="service">One of the codes in the set of records from the qualifier table having the 
            codename <c>SERVICE</c>. Note that only specific services are valid for a given setting. These 
            are easily determined as follows: Services valid for a setting include those where the first 
            character of the service code matches the setting code, or where the service code begins with 
            'A' or 'B'. It is recommended that a user interface validate a services presentation list when 
            the setting selection is performed. </param>
            <param name="patientstatus">Either <c>N</c> for a new patient, or <c>E</c> for an established patient.</param>
            <param name="examtype">One of the codes in the set of records from the qualifier table having the 
            codename <c>EXAMTYPE</c>.</param>
            <param name="facetime">The time in minutes spent total face to face with the patient. Per current 
            HCFA guidelines this time is defined: <i>For coding purposes, face to face time for these 
            services is defined as only that time that the physician spends face to face with the patient 
            and/or family. This includes the time in which the physician performs such tasks as obtaining 
            a history, performing an examination, and counseling the patient.</i>  This time entry is 
            important for those E and M codings that rely specifically on time (e.g. Hospital discharge 
            services – Final discharge).</param>
            <param name="overhalf">1 if more than 50% of the total face to face time was spent counseling; 
            0 otherwise. In the case where counseling and/or coordination of care dominates (more than 50%) 
            of the physician/patient and/or family encounter (face to face time in the office or other 
            outpatient settings, floor/unit time in the hospital or nursing facility), time is considered 
            the key or controlling factor to qualify for a particular level E and M services.</param>
            <param name="codedetails">This string is used to calculate the user-override E and M code. This is 
            a string containing twelve ASCII characters, each a 0-4 indicating the level for one of the 
            12 components. If the level is 0, the level will be computed based on the encounter data (the 
            computed levels are returned from CalculateEM()). Levels 1-4 are user-overrides. The meanings 
            for levels 1- 4 vary according to the component (see table below). If your application wants the
            server to return additional code data, append a '+' character to the 12-character CodeDetails string.</param>
            <returns>The returned string encodes three parts which are delineated with a semicolon.
            Two additional parts are optionally provided based on the terminating character of the codedetails parameter.
            <list type="number">
            	<item>Medcinid of the calculated E and M code.</item>
            	<item>Medcinid of E and M code with user override (if any).</item>
            	<item>Computation results of the 15 components from which the two calculated E and M codes are 
            	based on.</item>
            	<item>This field, when requested, contains the CPT code determined by the calculator from the
            	Medcinid returned in field 1. If secondary codes from prolonged service times are determined,
            	they will be contained in this field. An example of the field is <c>99215 99354 X1 99355 X2</c>.</item>
            	<item>This field, when requested, contains the CPT code determined by the calculator from the
            	Medcinid returned in field 2. If secondary codes from prolonged service times are determined,
            	they will be contained in this field. An example of the field is <c>99215 99354 X1 99355 X2</c>.</item>
            </list><para>An example of a codestring returned is <c>42351;42351;232433423213433</c></para>
            <para>To get the E and M code for the returned Medcinids use the CodeFromMedcin API of the returned medcinid 
            using medCodeCpt for the CodeSet parameter.</para></returns>
            <remarks>The method employed is to suggest to the user the calculated E and M code that's based on 
            the patient's encounter data (what's documented), and to allow the user to override this code 
            by adjusting the level of any of the 12 components computed from the patient’s encounter data.
            <para>The 12 components are documented in the 1997 HCFA E and M guidelines. The patient's encounter 
            data that gets evaluated is the same as that passed via AddNarrate() and friends which is used 
            to generate a narrative of the encounter.</para>
            <para>
            For the determination of CPT codes that are based in part on patient age, the API uses a method of 
            calculation of age by calendar differentiation of the birth date and latest encounter time in the 
            narrative chart records so as to determine an exact age to the day. The client must provide the 
            birth date in the SetPatient API; the age parameter of that API is not used for E/M calculations.
            </para>
            <para>Note that the value field of HPI free text findings can be used to designate the level of HPI 
            for E and M purposes where uncoded data is entered as free text. Entering a <c>1</c> for the 
            value would imply level 1. Entering a <c>2</c> for the value would imply level 2. The value 
            field is ignored for narrative emission of free text. The free text HPI findings are:
            <list type="bullet">
            	<item>112342 - HPI [use for free text]</item>
            	<item>115033 - Preliminary Background HPI [use for free text]</item>
            	<item>115034 - Supplemental HPI [use for free text]</item>
            </list></para>
            <para>
            The value field can also contain the E/M elements satisfied by that free text finding instance. 
            In this method, the letters acceptable are any combination of the 1st letter of each attribute identified 
            in the section on aflags exclusive of laterality. These letters are: “LQSDTCMA”. Furthermore, the unit field 
            can be used to specify the HPI finding’s contribution to ROS body systems as discussed below for the ROS free text finding. 
            See the freetext_em parameter in the MEDCIN server documentation for the medcin.ini file for additional information.
            </para>
            <para>
            Also note that the value field of the ROS free text finding (Medcinid = 112344) can be used to designate information 
            on the HCFA ROS body system satisfied by the finding’s instance. See the rosvalue_em parameter in the MEDCIN server 
            documentation for the medcin.ini file for additional information. When the rosvalue_em parameter value is ‘yes’, 
            then the value field of the ROS free text finding will be interpreted as follows:
            <list type="bullet">
            <item>A negative value specifies that the free text finding instance satisfies that quantity of HCA ROS systems, 
            taking the absolute value of the number. Additional instances of the ROS free text finding can be used to specify 
            additional body systems. There is no mechanism to designate exactly what body systems are satisfied using this approach, simply the quantity</item>
            <item>A positive value specifies that the free text finding instance satisfies the particular HCFA body system 
            enumerated (1-14) on page 8 of the Documentation Guidelines for Evaluation and management Services. 
            The list is also enumerated as A-N under the ROS section of the ActivateEM API in this document and is available from the qualifierList API</item>
            <item>A value of one or more alphabetic letters A through N designate the particular HCFA ROS body systems satisfied 
            by that free text finding instance. The list is enumerated as A-N under the ROS section of the ActivateEM API in 
            this document and is available from the qualifierList API.</item>
            </list>
            </para>
            <para>When specifying user overrides via codedetails, the following table will assist in 
            understanding the levels for each component.
            <list type="table">
            <listheader><term>Character Position and Component</term><description>ASCII Value</description></listheader>
            <item><term>1 - HPI</term><description>1=Brief, 2=Extended</description></item>
            <item><term>2 - ROS</term><description>1=Problem pertinent, 2=Extended, 3=Complete</description></item>
            <item><term>3 - PFSH</term><description>1=Pertinent, 2=Complete</description></item>
            <item><term>4 - Overall History</term><description>1=Problem focused, 2=Expanded problem focused, 
            3=Detailed, 4=Comprehensize; Calculated from HPI, ROS, PFSH and cannot be directly overridden.</description></item>
            <item><term>5 - EXAM</term><description>1=problem focused, 2=Expanded Problem Focused, 3=Detailed, 
            4 = Comprehensive</description></item>
            <item><term>6 - Overall MDM</term><description>1=straightforward 2=low complexity 
            3=moderate complexity 4=high complexity; Calculated from Dx/Mgt Options, Complexity of data 
            and cannot be directly overridden.</description></item>
            <item><term>7 - Dx/Mgt Options</term><description>1=Minimal, 2=Limited, 3=Multiple, 4=extensive</description></item>
            <item><term>8 - Complexity of Data</term><description>1=Minimal, 2=Limited, 3=Moderate, 4=Extensive</description></item>
            <item><term>9 - Overall Risk</term><description>1=Minimal, 2=Low, 3=Moderate, 4=High; Calculated 
            from Presenting problem, Diagnostic Procedures Ordered, Management Options Selected and cannot 
            be directly overridden.</description></item>
            <item><term>10 - Presenting Problem</term><description>1=Risk level 1, 2=Risk level 2, 3=Risk level 3, 4=risk level 4</description></item>
            <item><term>11 - Diagnostic Procedures Ordered</term><description>1=Risk level 1, 2=Risk level 2, 3=Risk level 3, 4=risk level 4</description></item>
            <item><term>12 - Management Options Selected</term><description>1=Risk level 1, 2=Risk level 2, 3=Risk level 3, 4=risk level 4</description></item>
            <item><term>13 - Overall History calculated from user override</term><description>1=Problem focused, 
            2=Expanded problem focused, 3=Detailed, 4=Comprehensize; Calculated from user override of HPI, 
            ROS, and PFSH. In returned codestring only.</description></item>
            <item><term>14 - Overall MDM calculated from user override</term><description>1=straightforward 
            2=low complexity 3=moderate complexity 4=high complexity; Calculated from user override of 
            Dx/Mgt Options, and Complexity of data. In returned codestring only.</description></item>
            <item><term>15 - Overall Risk calculated from user override</term><description>1=Minimal, 2=Low, 
            3=Moderate, 4=High; Calculated from user override of  Presenting problem, Diagnostic 
            Procedures Ordered, and Management Options Selected. In returned codestring only.</description></item>
            </list></para>
            <para>
            Note that the installation can require the entry of a ‘chief complaint’ or ‘reason for visit’ in the encounter 
            before allowing the E/M calculator determined Medcinid to be returned. The medcin.ini parameter reqccrfv_em 
            is used for this determination. If this parameter is yes, and the encounter does not include a chief complaint 
            or reason for visit, then the E/M calculator will return a 0 for the Medcinid and override Medcincid, 
            and an error code of ‘101’ will be appended to the end of the CodeDetails returned string. The requirement is satisfied 
            if the encounter contains any of the following: Chief Complaint narrative group, Reason for Visit narrative group, 
            the Chief Complaint free text finding assigned to any group, or the Reason for Visit free text finding assigned to any group. 
            The parameter defaults to ‘no’.
            </para>
            <para>
            Note that the installation can disallow the calculation of a 1995 gms level 3 (detailed) exam by setting the medcin.ini 
            “allow95gms3_em=no” parameter. This parameter determines if the E/M calculator will surface the calculation of a level 3 
            (detailed) 1995 gms exam based on the criteria documented in the EandMWhitePaper. If this parameter is set to ‘no’, 
            and the calculator determines the 1995 gms exam to be a level 3, it will return a 0 for exam level and add an error 
            number of “102” to the data returned by the CalculateEM API. If the parameter is set to ‘yes’ or does not appear 
            in the medcin.ini file, no restriction will be in place. The default if the parameter is not in the medcin.ini file 
            is ‘yes’; 1995 level 3 exam calculation is allowed.
            </para>
            The “usehpiinros_em” medcin.ini option setting can be used to alter the methods used by the E/M engine for determining the ROS level.
            <para>
            </para></remarks>
        </member>
        <member name="M:Medicomp.Connection.LinkFindings(System.Int32,System.String,System.Int32)">
            <summary>
            This method can be used to group a set of related findings for narrative presentation,
            or to associate two findings for the narrative.
            </summary>
            <param name="itemid1">This number should be one of the values previously returned by AddNarrate 
            and represents the finding to be used for the left-hand side of the linked pair or the itemid 
            of the finding to be assigned a link group code.</param>
            <param name="linktype">For linking two findings, this is the referenced linkage type and must be 
            one of the qualifier codes in the qualifier table for codename <c>LINKS</c>, or a string 
            containing a single minus sign ('-') that is used to unlink two previously linked findings. 
            When the LINKS code description contains a '~V', it indicates that the linktype usually 
            includes a duration-type time period that represents the time period between the two findings 
            linked. The duration format is the string form of a numeric value followed by a precision 
            character: 'Y' for years, 'M' for months, 'W” for weeks, 'D' for days, 'H' for hours, 'I' for 
            minutes, 'S' for seconds. For example, <c>2H</c> is interpreted as two hours, <c>7I</c> is 
            interpreted as seven minutes. The duration string should be appended to the linkage type code. 
            Note that linktype can also be a null string that will force the itemid2 finding to be narrated 
            immediately following the itemid1 finding but without any connection string. For setting a link 
            group code for a finding, this is the single character designating the link group.</param>
            <param name="itemid2">For linking two findings, this number should be one of the values previously 
            returned by AddNarrate and represents the finding to be used for the right-hand side of the 
            linked pair. For setting a link group code to itemid1, itemid2 must be a zero value.</param>
            <returns>See remarks below.</returns>
            <remarks>The group and group sequence of itemid2 will be changed to that of itemid1 when two 
            findings are linked. In addition, if the group is Family History, the prefix of itemid2 will 
            be changed to G_FAM_HIST (family history) so that it can be properly narrated. The revised 
            prefix, if any, will be returned by the method call if no link error occurs. It is the 
            responsibility of the application program to update any presentation displays that place the 
            itemid2 into a grouping; the new group assignment can be recovered with a GroupNumbuer method 
            call. The original prefix, group, and group sequence will be restored if the two linked 
            findings are unlinked.
            <para>For example, if a fever finding was linked with a chest pain finding using the <c>AW</c> LINKS 
            code, the narrative generation would be structured as, <i>fever associated with chest pain</i>. 
            If a headache finding was linked with a chest pain finding using <c>FL2H</c> as the linkage 
            type, the narrative generation would be structured as, <i>headache followed two hours later by 
            chest pain</i>.</para>
            <para>Any two distinct findings in the narrative finding collection can be linked together. The 
            finding represented by itemid2 will always be narrated immediately following the finding 
            narrated by itemid1; thus, a finding may appear in a group other than its normal grouping.</para>
            <para>When two or more related findings are assigned to a link group, they will be sequentially 
            positioned in the narrative presentation. Related findings are findings that have the same 
            level 1 parent (i.e. matching nodekeys of length 4).</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.BuildListMode(Medicomp.BuildListModes)">
            <summary>
            This method is used to alter the data returned in lists.
            </summary>
            <seealso cref="T:Medicomp.BuildListModes"/>
            <seealso cref="M:Medicomp.Connection.GetBuildListMode"/>
            <param name="mode">The mode parameter affects data passed into the ResponseItem data 
            structure and returned in ArrayList lists. (Int32 for ActiveX and Java)</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetUserFindingTag(System.Int32)">
            <summary>
            This method gets the tag string previously applied to a User Finding.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)"/>
            <param name="userid">This is the id of the user-finding in question.</param>
            <returns>The previously assigned tag is returned.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.SetUserFindingTag(System.Int32,System.String)">
            <summary>
            This method sets a tag string to a User Defined Finding.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetUserFindingTag(System.Int32)"/>
            <param name="userid">Userid is the id of the user-finding or Medcin finding for which the 
            code information applies.</param>
            <param name="stag">This is the tag to assign to the finding referenced.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The assigned tag is not used by any function in the server. The tag can be
            recovered by using the GetUserFinding method.</remarks>
        </member>
        <member name="M:Medicomp.Connection.Tsearch(System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse search text for the specified finding is no longer returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.Stersepos(System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse sentence docpos text for the specified finding is no longer returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.Sterseneg(System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse sentence docneg text for the specified finding is no longer returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.Ptersepos(System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse phrase docpos text for the specified finding is no longer returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.Pterseneg(System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The terse phrase docneg text for the specified finding is no longer returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.DoseList(System.Int32)">
            <summary>
            This method obtains a list of dosage ids and data for the specified medcinid. A dosage string may 
            contain all of the fields listed in the Dose() method.
            </summary>
            <seealso cref="M:Medicomp.Connection.BrandList(System.Int32,System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.DoseList(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The delimited list of dose identification in the format, 
            <c>Doseid1\nDosestr1\nDoseid2\nDosestr2…\nDoseidN\nDosestrN\n\0</c>.</returns>
            <remarks>MEDCIN has findings that are prescription medications. These medicinids can be identified 
            by the property TermType(medcinid) = TYPE_RX (0x0007) and property Rxcode(medcinid)  = 'M' for 
            non-narcotic medications or 'N' for narcotic medications. The property Flag(medcinid) has the 
            0x0010 bit set when the finding which should be restricted from being ordered (i.e. a drug 
            removed from use but needs to be entered as history). The property Eflag(medcinid) has the 
            0x1000 bit set when the finding is a prescription drug that has dose and possibly brand 
            information.</remarks>
        </member>
        <member name="M:Medicomp.Connection.BrandList(System.Int32,System.Int32)">
            <summary>
            This method obtains a list of brands and manufacturers of the specified dose.
            </summary>
            <seealso cref="M:Medicomp.Connection.Dose(System.Int32,System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.DoseList(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="doseid">The unique doesid for the dosage in question.</param>
            <returns>Returns the list of brands in the following format:
            <c>Brandname1-Manufacturer1\nBrandname2-Manufacturer2….. BrandnameN-ManufacturerN\n\0</c></returns>
            <remarks>MEDCIN has findings that are prescription medications. These medicinids can be identified 
            by the property TermType(medcinid) = TYPE_RX (0x0007) and property Rxcode(medcinid)  = 'M' for 
            non-narcotic medications or 'N' for narcotic medications. The property Flag(medcinid) has the 
            0x0010 bit set when the finding which should be restricted from being ordered (i.e. a drug 
            removed from use but needs to be entered as history). The property Eflag(medcinid) has the 
            0x1000 bit set when the finding is a prescription drug that has dose and possibly brand 
            information.
            <example>The following example illustrates loading a listview with a list of brand names:
            <code>
            private bool loadBrands()
            {
               bool functionReturnValue = false;
               string strText = null;
               string[] strData = null;
               string[] strBrands = null;
               int Count = 0;
               try {
                   functionReturnValue = false;
                   strText = MedClient.BrandList(MyRxMedcinid, MyRxDoseID);
                   if ((Strings.Len(strText) &gt; 0)) {
                    strData = Strings.Split(strText, Constants.vbLf, -1);
                    for (Count = 0; Count &lt;= Information.UBound(strData) - 1; Count++) {
            	        strBrands = Strings.Split(strData(Count), "-", -1);
            	        ListViewItem listItem = new ListViewItem(strBrands(0));
            	        if ((strBrands.Length &gt; 1)) {
            		        listItem.SubItems.Add(strBrands(1));
            	        } else {
            		        listItem.SubItems.Add("Any");
            	        }
            	        lvwBrands.Items.Add(listItem);
                    }
                    functionReturnValue = true;
                   }
               } catch (Exception ex) {
                   PostTheError(ex);
               }
               return functionReturnValue;
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.Dose(System.Int32,System.Int32)">
            <summary>
            This method returns a list of data fields separated by '\n' that contains all the elements of the 
            specified dosage string. The last element in the list is terminated with '\n\0'.
            </summary>
            <seealso cref="M:Medicomp.Connection.BrandList(System.Int32,System.Int32)"/>
            <seealso cref="M:Medicomp.Connection.DoseList(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="doseid">Specifies the Medcin dose identification.</param>
            <returns>The list of doseage data is returned in a delimited string. See 'remarks' for data elements.</returns>
            <remarks>MEDCIN has findings that are prescription medications. These medicinids can be identified 
            by the property TermType(medcinid) = TYPE_RX (0x0007) and property Rxcode(medcinid)  = 'M' for 
            non-narcotic medications or 'N' for narcotic medications. The property Flag(medcinid) has the 
            0x0010 bit set when the finding which should be restricted from being ordered (i.e. a drug 
            removed from use but needs to be entered as history). The property Eflag(medcinid) has the 
            0x1000 bit set when the finding is a prescription drug that has dose and possibly brand 
            information.
            <para>The order of and description of the dose fields follows:
            <list type="numeric">
            <item>strength or doseage (numeric)</item>
            <item>strength unit code (max 5 chars)</item>
            <item>form (max 6 chars)</item>
            <item>prescribed quantity (numeric)</item>
            <item>prescribed quantity unit (eg. teaspoon) (max 5 chars)</item>
            <item>prescribed route ie: po, ap, im. (max 5 chars)</item>
            <item>prescribed frequency abbreviation ie: q4h, qd, pid. (max 5 chars)</item>
            <item>prescribed frequency numeric ie: 2, 3, 4. (numeric)</item>
            <item>'rxwhen' modifier for frequency ie: prn, ac, pc. (max 5 chars)</item>
            <item>number of days for prescribed therapy (numeric)</item>
            <item>dispense amount (numeric)</item>
            <item>dispense form/packaging (max 6 chars) (numeric)</item>
            <item>number of refills permitted (numeric)</item>
            <item>maximum daily dose - ingredient 1 (numeric)</item>
            <item>maximum daily dose - ingredient 2 (numeric)</item>
            <item>maximum daily dose - ingredient 3 (numeric)</item>
            <item>(Y/N) alert provider when Rx is about to expire</item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistDelete(System.Int32)">
            <summary>
            Deletes the chart record added via HistAddNarrate() for the specified seq argument.
            </summary>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistNarrate(System.String)">
            <summary>
            Similar to Narrate(); HistNarrate() references the history pool.
            </summary>
            <param name="encountertime">Specify the history pool encounter to narrate.</param>
            <returns>Returns the narration based on current parameters.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistTranscribeItem(System.String,System.String,System.Int32)">
            <summary>
            Similar to <see cref="M:Medicomp.Connection.TranscribeItem(System.String,System.String,System.Int32)">TranscribeItem</see> but for the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.TranscribeItem(System.String,System.String,System.Int32)"/>
            <param name="texttype">'P' to request phrase text, or 'S' to request sentence text.</param>
            <param name="lingo">'D' for doctor or professional language, or 'P' for patient or lay language.</param>
            <param name="seq">This number should be one of the seq values previously used to add gthe history item;
            it is used to reference the desired finding.</param>
            <returns>The narrated finding is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistFlush">
            <summary>
            This method transmits remaining history data in the internal buffer to the Medcin server.
            <b>This must be the last history API call invoked.</b>
            </summary>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistAddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            [packet] This function's arguments are the same as the AddNarrate() function, except for the seq argument. 
            The seq argument is used in all the other HistAdd* functions to specify which chart record is to be modified
            </summary>
            <seealso cref="M:Medicomp.Connection.AddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.HistAddNote(System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.HistAddOrder(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, AddNarrate will return a 0.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>
            <para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            <para>When using HistAddNarrate() to add an unmapped test order/result or Rx to the history 
            pool, use the default medcinids listed below:</para>
            <list type="bullet">
            	<term>test order use medcinid 186675</term>
            	<term>test result use medcinid 184607</term>
            	<term>prescription drug use medcinid 195027</term>
            	<term>other therapy use medcinid 195025</term>
            	<term>for unmapped allergies use medcinid 122299 with an 'AL' prefix</term>
            </list><para>For all of these medcinids that represent unmapped chart data, use the function 
            HistAddNote() to associate a free text string to describe the data (test/result/drug name). 
            Also use HistAddOrder() to supply an order id number that can be used to link tests with 
            results, or supply an Rx writer with its original id number to use for deletion, renewing, 
            or other status changes.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)">
            <summary>
            [packet] Similar to AddNarrate2 but for adding to the history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="medcinid">The unique Medcin identification for the finding.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, it will be ignored.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <param name="groupNumber">If you wish to assign the finding to a specific narrative group instead 
            of having the narrative engine determine the group using its internal algorithm, then pass the 
            group number you wish to assign. Otherwise, groupnumber should be 0. Note that once you make a 
            non-zero specification of groupnumber for a finding, the narrative engine will continue to use 
            that assigned group number until you restore dynamic group determination by passing a 0 value 
            (See the <see cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)">GroupNumber API</see>). (Int16 for ActiveX and Java)</param>
            <param name="DecorationStyle">If you wish to provide decoration of the text phrase for this used 
            in the narrative presentation, pass one of the decoration style numbers your application set 
            up using the AddDecorationStyle API <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)"> See the 
            AddDecorationStyle API</see> for more details about text decoration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)">
            <summary>
            [packet] Similar to AddNarrate2Ex but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode string 
            <see cref="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)">as documented in AddEpisode</see>.</param>
            <param name="note">The note text to be added to the finding identified by the itemid. The text is 
            limited to the maximum length of a string. See the <see cref="M:Medicomp.Connection.AddNote(System.Int32,System.String)">
            AddNote API concerning marking of substrings</see> as plain text, RTF, and HTML for selectable output.</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the itemid.</param>
            <param name="valuestr">The value formated for display presentation.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr.</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalLow(System.Int32,System.String)">RangeNormalLow</see> 
            method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalHigh(System.Int32,System.String)">RangeNormalHigh </see> 
            method request for the finding.</param>
            <param name="lTag">The tag number to be added to the finding.</param>
            <param name="sTag">The tag text to be added to the finding identified by the itemid. 
            The text can be of any length.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            Note that you can add either or both tag units. When the tag(s) is(are) added to the 
            generated text, the lTag will be presented before the sTag. An itemtag lTag field is 
            recommended when using narrative output generated in HTML, as the itemtag lTag field can be 
            used for the HREF link (the sTag field can also be used for the link; however, it can be 
            better used for showing additional data).
            <para>The sTag field can be composed of multiple fields, each field delimited by a distinct 
            character that appears as the first character of the string. The string can be emitted 
            appearing before the finding text or following the finding text by means of the ShowItemTag 
            method.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all 
            tags can be emitted under program control by using the <see cref="M:Medicomp.Connection.NarrateGroups(System.String)">
            NarrateGroups API </see> with a tag specifier along with the ShowItemTag method.
            An example of an itemtag string with multiple fields would be: 
            '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold data 
            on the provider originally entering data and the provider editing data. The fields could be 
            selectively narrated by using the NarrateGroups API.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddEpisode(System.Int32,System.String)">
            <summary>
            [packet] Similar to AddEpisode but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode string.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddValue(System.Int32,System.String,System.String,System.Double,System.Double)">
            <summary>
            [packet] Similar to AddValue but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddValue(System.Int32,System.String,System.String,System.Double,System.Double)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="valuestr">The value formated for display presentation.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr.</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous RangeNormalLow method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous RangeNormalHigh method request for the finding.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistSetDoctorID(Medicomp.DocCodes,System.Int32)">
            <summary>
            [packet] Similar to SetDoctorid but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetDoctorid(Medicomp.DocCodes,System.Int32)"/>
            <param name="code">Code is one of the <see cref="T:Medicomp.DocCodes">Medicomp.DocCodes</see> enumerations. (Int16 for ActiveX)</param>
            <param name="docid">Specifies the doctor identification for the code.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            Particular narration groups (G_REFERDX, G_PLAN, G_ASSESS, G_EDUCATION, and G_DISCUSS) 
            will sequence findings by the entering data doctor identification so that the narration can 
            present sub-groupings. Where the doctor string is cited in the narration, the correct doctor 
            name for the sub-grouping will be emitted.</remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddNote(System.Int32,System.String)">
            <summary>
            [packet] Similar to AddNote but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddNote(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="note">The marked or unmarked note text to be added to the 
            finding identified by the itemid. The text is limited to the maximum 
            length of a string.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            Marking is implemented according to the following:
            <list type="bullet">
            <item>SOT control code followed by ASCII '0' – plain text</item>
            <item>SOT control code followed by ASCII '1' – RTF</item>
            <item>SOT control code followed by ASCII '2' – HTML</item></list>
            <para>SOT is the control code x'02' or chr$(2).</para>
            <para>Text with no marking, or marked as plain text, will be filtered 
            as noted below. Sub-strings will be interpreted as follows:</para>
            <list type="bullet">
            <item>No marker found – plain text</item>
            <item>Plain Text marker found – plain text until next marker or end of string.</item>
            <item>RTF marker found – RTF until next marker or end of string.</item>
            <item>HTML marker found – HTML text until next marker or end of string.</item></list>
            <para>The following indicates the handling of narration output:</para>
            <list type="bullet">
            <item>For a finding that has unmarked free text, filtering as noted below 
            will be applied.</item>
            <item>For a finding that has marked text, if a marked sub-string is present that 
            matches the current narrative output, it will be added to the finding's free 
            text presentation.</item>
            <item>For a finding that has marked text, if a marked sub-string is not present 
            that matches the current narrative output, the following procedure will 
            be used:
            <list type="bullet">
            <item>If marked plain text is present, emit the plain text filtered according to the criteria below</item>
            <item>Otherwise emit the only marked text present (in this case, only one sub-string was present).</item></list></item></list>
            <para>The server handler for AddNote() strips a terminating period from unmarked 
            note text in addition to the filtering noted below. For marked Plain Text, 
            only filtering is performed. Therefore if you do not want the handler to 
            remove a terminating period from plain text, prefix the plain text marker.</para>
            <para>Plain text notes will accept the tilde character ('~') as a logical new 
            line and will convert it, on outline or narrative format narrated output only, 
            to the appropriate line break for each of the narrative output options 
            (plain text, Rich text, or HTML). If you want to have a tilde in the note text 
            appear as a tilde, then provide two tildes.</para>
            <para>Notes attached to findings are considered free text and are presented 
            using the styling of the Free Text element (see the rtfStyle API). 
            If the narration output is HTML or RTF, the narration generator will 
            filter the text and perform character substitutions per the following 
            table so rendering engines will correctly present the output:</para>
            <list type="table">
            <listheader><term>Character</term><description>HTML output</description><description>RTF output</description></listheader>
            <item><term>back slash</term><description>No change</description><description>back slash back slash</description></item>
            <item><term>left brace</term><description>No change</description><description>back slash left brace</description></item>
            <item><term>right brace</term><description>No change</description><description>back slash right brace</description></item>
            <item><term>ampersand</term><description>ampersand amp</description><description>No change</description></item>
            <item><term>left angle bracket</term><description>ampersand lt</description><description>No change</description></item>
            <item><term>right angle bracket</term><description>ampersand gt</description><description>No change</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddRxstr(System.Int32,System.String)">
            <summary>
            [packet] Similar to AddRxstr but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddRxstr(System.Int32,System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="rxstr">The prescription text to be added to the finding identified by the seq argument</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistLinkFindings(System.Int32,System.String,System.Int32)">
            <summary>
            [packet] Similar to LinkFindings but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.LinkFindings(System.Int32,System.String,System.Int32)"/>
            <param name="seq1">The seq1 argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="linktype">For linking two findings, this is the referenced linkage type and must be 
            one of the qualifier codes in the qualifier table for codename <c>LINKS</c>, or a string 
            containing a single minus sign ('-') that is used to unlink two previously linked findings. 
            When the LINKS code description contains a '~V', it indicates that the linktype usually 
            includes a duration-type time period that represents the time period between the two findings 
            linked. The duration format is the string form of a numeric value followed by a precision 
            character: 'Y' for years, 'M' for months, 'W” for weeks, 'D' for days, 'H' for hours, 'I' for 
            minutes, 'S' for seconds. For example, <c>2H</c> is interpreted as two hours, <c>7I</c> is 
            interpreted as seven minutes. The duration string should be appended to the linkage type code. 
            Note that linktype can also be a null string that will force the itemid2 finding to be narrated 
            immediately following the itemid1 finding but without any connection string. For setting a link 
            group code for a finding, this is the single character designating the link group.</param>
            <param name="seq2">The seq2 argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddDocName(System.Int32,System.String)">
            <summary>
            [packet] Similar to AddDocname but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddDocName(System.Int32,System.String)"/>
            <param name="docid">The identification numer of the provider.</param>
            <param name="name">The name of the provider as you want it to appear in the narration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddEncounter(System.String,System.Int32)">
            <summary>
            [packet] Similar to AddEncounter but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.AddEncounter(System.String,System.Int32)"/>
            <param name="encountertime">The encounter time to reference the encounter. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter 
            time is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. For example, '199805071610' 
            designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="docid">The docid of the provider responsible for the encounter. The HistAddDocname 
            method is used to associate a name with the docid.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddOrder(System.Int32,System.String)">
            <summary>
            [packet] This method attaches the originating order id to a patient history record identified by seq. This 
            is a mechanism to link a test order with its respective results or to save the order id for 
            an external Rx writer.
            </summary>
             <seealso cref="M:Medicomp.Connection.HistAddNote(System.Int32,System.String)"/>
             <seealso cref="M:Medicomp.Connection.HistAddNarrate(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16)"/>
             <seealso cref="M:Medicomp.Connection.HistRetrieveOrder(System.String)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="orderid">The order identification string to assign.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            The originating test order record should have the 'O' prefix, the test results records 
            have no prefix, and the test review record should have the 'R' prefix in the HistAddNarrate() 
            call. The order id may also come from an external Rx writer. This provides the external 
            reference id.
            <para>The seq id is the field set in the HistAddNarrate() function to represent an id 
            for a history record. When calling HistAddNarrate() to add the test order/result or Rx to the 
            history pool, a medcinid must be supplied. If a test order is not mapped to a medcinid use 
            medcinid 186675 in the HistAddNarrate() call. If a test result is not mapped to a medcinid use 
            medcinid 184607 in the HistAddNarrate() call. If an Rx Order is not mapped to a medcinid and 
            it is a prescription drug use medcinid 195027, if it is any other therapy use medcinid 195025. 
            For all of these medcinids that represent for unmapped chart data, use the function HistAddNote() 
            to associate a free text string to describe the patient history data record.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistGroupNumber(System.Int32,Medicomp.MedcinGroups)">
            <summary>
            [packet] Similar to GroupNumber but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="groupnumber">The new value of the group number to be assigned. (Int16 for ActiveX)</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistSetDecorationStyle(System.Int32,System.Int16)">
            <summary>
            [packet] Similar to SetDecorationStyle but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetDecorationStyle(System.Int32,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="DecorationStyle">Specify the decoration style to apply.
            See <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)">AddDecorationStyle</see> for additional information.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            Similar to AddChart but for adding to history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">Minutes since birth.</param>
            <param name="duration">in minutes</param>
            <param name="prefix">The prefix qualifier code.</param>
            <param name="result">The result qualifier code.</param>
            <param name="scale">The scale field is usually calculated using the function CalcScale.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistRemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)">
            <summary>
            Similar to RemoveChart but for adding to history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.RemoveChart(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int16)"/>
            <param name="medcinid">Medcinid of finding or User-Defined ID of finding.</param>
            <param name="onset">minutes since birth</param>
            <param name="duration">in minutes</param>
            <param name="prefix">the prefix qualifier code</param>
            <param name="result">the result qualifier code</param>
            <param name="scale">The scale field is calculated using the function CalcScale</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistHaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            Similar to HaveList but for referencing the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveList(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">The list size in question. (Int16 for ActiveX)</param>
            <param name="termtype">The terminology type in question. (Int16 for ActiveX)</param>
            <returns>This function returns the Boolean value of true if the requested listsize 
            contains the requested termtype.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistActivate(Medicomp.ListSizes,System.Int16)">
            <summary>
            This method retrieves a list of patient history for the specified listsize and termtype that is 
            relevant to a short list of potential diagnoses calculated from the specified list of findings 
            passed with HistAddChart().
            </summary>
             <seealso cref="M:Medicomp.Connection.Activate(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">This argument provides for three different list sizes. 
            Shortlist=1, Longlist=2, Fulllist=3 (Int16 for ActiveX)</param>
            <param name="loadtype">The termtype argument restricts the returned list to the related termtypes</param>
            <returns>The list of relevant history as an ArrayList of ResponseItem data structures.</returns>
            <remarks></remarks>
            <example>This procedure shows a flow sheet based on the history pool findings that are relevant to the Medcinid parameter passed.
            <code>
             private void BuildFlowSheet(int Medcinid, bool Regenerate)
            {
               try
               {
                   if (Regenerate)
                   {
                       // We first clear any chart findings from the history IP list
                       Medconn.HistClearChartFindings();
                       // We add the current data tree finding to the IP list
                       Medconn.HistAddChart(Medcinid, 0, 0, "", "", 0);
                       // This instructs the server to use the finding's prompt list
                       // to extract relevant history pool chart data
                       Medconn.HistCalculate();
                       // This checks to see if there is any chart history relevant to the finding's prompt list
                       short count = Medconn.HistHaveList(ListSizes.medListLarge, MedTermtypes.medTermAll);
                       if (count == 0)
                       {
                           MessageBox.Show("There is no history that is relevant to that finding");
                           return;
                       }
                       CurrentFlowSheetMedcinid = Medcinid;        // Keep the id for regeneration
                   }
                   // This instructs the response list to be formatted for a spreadsheet
                   // with extended data in the prefix property
                   Medconn.BuildListMode(BuildListModes.medSpreadsheet | BuildListModes.medExtended);
                   // This retrieves the complete data layout in spreadsheet format
                   // of the history relevant to the current finding
                   System.Collections.ArrayList rl = Medconn.HistActivate(myListSize, 0);
                   // We first will show the data in the listview control so that the actual data is observed
                   ViewResponseList(rl);
                   grdView.Enabled = false;
                   // Now present the data into a grid view
                   for (int i = 0; i &lt; rl.Count; ++i)
                   {
                       ResponseItem ri = (ResponseItem)rl[i];
                       AddResponseItemToGrid(ri);
                   }
                   grdView.Enabled = true;
                   for (int col = 0; col &lt; grdView.Columns.Count; ++col)
                       grdView.AutoResizeColumn(col, DataGridViewAutoSizeColumnMode.AllCells);
                   PromptSizeMode = IPMode.FlowSheet;              // Set current mode to FS for regenerate on list size change
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
               finally
               {
                   Medconn.BuildListMode(BuildListModes.medNormal);
               }
            }
            </code></example>
        </member>
        <member name="M:Medicomp.Connection.HistCalculate">
            <summary>
            This method performs the IP calculation and creates lists from the patient's history pool. 
            These lists are reserved until HistCalculate() is called again, which would then take into 
            account any new data added via the HistAddChart() function.
            </summary>
             <seealso cref="M:Medicomp.Connection.Calculate"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistClearChartFindings">
            <summary>
            The HistClearChartFindings() method clears the findings passed via HistAddChart().
            </summary>
             <seealso cref="M:Medicomp.Connection.ClearChartFindings"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistClearChart(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method has been replaced by HistClearChartFindings.
            </summary>
             <seealso cref="M:Medicomp.Connection.HistClearChartFindings"/>
            <param name="age">Patient’s age in minutes. The 15768000 is 80 year old in minutes 
            (30yrs * 365* 1440). This method is precise enough to support the algorithms.</param>
            <param name="gender">Patient’s gender. 'M' = Male, 'F' = Female, 'U' = unknown.  
            Use unknown when prompting should supply non-gender specific findings.</param>
            <param name="ethnic">One of the qualifier codes for ethnicity.</param>
            <param name="religion">One of the qualifier codes for religion.</param>
            <param name="race">One of the qualifier coes for race.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistAddDx(System.Int32)">
            <summary>
            Similar to AddDx but for adding to the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.AddDx(System.Int32)"/>
            <param name="medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistClearDx">
            <summary>
            Clears the list of diagnoses, problems, and syndromes accumulated from invoking the HistAddDx() function.
            </summary>
             <seealso cref="M:Medicomp.Connection.ClearDx"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This method retrieves a list of patient history for the specified listsize and termtype that is 
            relevant to the diagnoses, problems, or syndromes passed with the HistAddDx() function.  
            </summary>
             <seealso cref="M:Medicomp.Connection.ActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">This argument provides for three different list sizes. Shortlist=1, Longlist=2, 
            Fulllist=3. (Int16 for ActiveX)</param>
            <param name="termtype">The termtype parameter restricts the returned list to the designated terminology type. (Int16 for ActiveX)</param>
            <returns>The patient history is returned as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistHaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)">
            <summary>
            This method is used to determine which termtypes of findings appear in the respective reserved lists 
            of the history pool based on the listsize argument. This function returns the Boolean value of 
            true if the requested  listsize contains the requested termtype. Note that the termtype
            ALL_TYPES will return true if any termtypes exist in the list specified by the termtype argument.
            </summary>
             <seealso cref="M:Medicomp.Connection.HaveDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <param name="listsize">The list size in question. (Int16 for ActiveX)</param>
            <param name="termtype">The terminology type in question. (Int16 for ActiveX)</param>
            <returns>This returns non-zero if the respective list is not empty; otherwise 0.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistActivateWordSearch(Medicomp.MedTermtypes)">
            <summary>
            This method retrieves records from the patient history pool that match the word search results and 
            the specified termtype.
            </summary>
            <seealso cref="M:Medicomp.Connection.ActivateWordSearch(Medicomp.MedTermtypes)"/>
            <param name="termtype">One of the <see cref="T:Medicomp.MedTermtypes">MedTermtypes</see> enumeration. (Int16 for ActiveX)</param>
            <returns>The list of patient history is returned as an ArrayList of ResponseItem data structures.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistHaveWordSearch(Medicomp.MedTermtypes)">
            <summary>
            Similar to HaveWordSearch but for the History Pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.HaveWordSearch(Medicomp.MedTermtypes)"/>
            <param name="termtype">One of the <see cref="T:Medicomp.MedTermtypes">medTermtypes</see> for 
            checking the availability of a list. (Int16 for ActiveX)</param>
            <returns>The method returns non-zero if the requested termtype is available, otherwise 0. 
            Note that the termtype medTermAll will return true if any termtypes exist in the list specified 
            by the termtype argument.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistWordSearch(System.String)">
            <summary>
            Similar to WordSearch but for the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.WordSearch(System.String)"/>
            <param name="words">String of words to search for. Words are 'anded', meaning a finding has to 
            have all words.</param>
            <returns>Returns how many related terms were found.</returns>
            <remarks>This function creates a list of patient history that contains the search words.
            Word completion also occurs; a search word 'leg' will also locate findings that contain the word 'legs'.</remarks>
        </member>
        <member name="M:Medicomp.Connection.HistRetrieveOrder(System.String)">
            <summary>
            This method is invoked to retrieve all the records associated with a test order, test results, test 
            review, or any other finding such as an Rx. The linking mechanism is the Order id# that is passed 
            into the history pool using the HistAddOrder() function.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistAddOrder(System.Int32,System.String)"/>
            <param name="orderid">Id of original test order. Test Order record has 'O' prefix.
            Result records have no prefix, test reviewed record has an 'R' prefix</param>
            <returns>This returns a list of all records matching the orderid.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistRetrieveEncounter(System.String)">
            <summary>
            This method is invoked to retrieve all the records associated with an encountertime that are in the 
            history pool.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="encountertime">The encounter time to reference the encounter. The format is 
            'YYYYMMDDHHIISS'</param>
            <returns>Data is returned in accordance with the BuildlistMode() settings. </returns>
        </member>
        <member name="M:Medicomp.Connection.HistSetPoolId(System.Int32)">
            <summary>
            Establishes which history pool to use. 
            </summary>
            <param name="histpoolid">The number of the history pool to attach to.</param>
            <returns>If the history pool identified by poolid does not exist, the return code is 0.</returns>
            <remarks>
            <example>The following example illustrates passing an encounter of findings to the history pool:
            <code>
            private int AddEncounterToHistoryPool(MedEncounter oEnc, Medicomp.IConnection Connection)
            {
               int functionReturnValue = 0;
               int lCount = 0;
               // Count of chart records added
               int Seq = 0;
               // Seq is the UniqueID originally assigned
               int EnterDoc = 0;
               // Current entering docid
               string sEtime = null;
               // Encounter time in Connection format
               MedChart oChart = default(MedChart);
               try {
                   // Convert the time to yyyymmddhhnnss (drop seconds)
                   sEtime = Date2Mdate(oEnc.EncounterTime).Substring(0, 12);
                   Connection.HistAddEncounter(sEtime, oEnc.ProviderID);
                   // Add any chapter headings for this encounter
                   if ((oEnc.Chapters.Length > 0))
                    Connection.HistAddEncounterHeadings(sEtime, 1, oEnc.Chapters);
                   // Add any miscellaneous subgroup headings for this encounter
                   if ((oEnc.SubGroupHeadings.Length > 0))
                    Connection.HistAddEncounterHeadings(sEtime, 2, oEnc.SubGroupHeadings);
                   // Start with entering doc same as encounter
                   Connection.HistSetDoctorID(DocCodes.medDocEntering, 0);
                   // Loop through the collection of MedEncounter objects
                   foreach ( oChart in oEnc.Charts) {
                    lCount += 1;
                    // Accumulate the count
                    Seq = oChart.Uniqueid;
                    // Currently, the only doctor reference being
                    // maintained is the docid of the doctor entering
                    // data if different from the encounter docid
                    if ((oChart.EnterDocID > 0)) {
            	        // Get the reference, assume medDocEntering
            	        // since we are supporting only one at this time
            	        int Docid = oChart.EnterDocID;
            	        // If this id is not the current one,
            	        // change current to this one;
            	        if ((Docid != EnterDoc)) {
            		        EnterDoc = Docid;
            		        Connection.HistSetDoctorID(DocCodes.medDocEntering, EnterDoc);
            	        }
                    }
                    // Add the finding to the history list
                    // The current entering data docid is added by the server.
                    Connection.HistAddNarrate2(Seq, oChart.Medcinid, sEtime, oChart.Prefix, oChart.Modifier, oChart.Result, oChart.Status, oChart.Onset, oChart.Duration, oChart.Referid,
                    oChart.Flag, oChart.Group, 0);
                    // If a value is entered, add the associated data
                    if ((oChart.Value.Length > 0)) {
            	        Connection.HistAddValue(Seq, oChart.Value, oChart.Unit, oChart.RangeNormalLow, oChart.RangeNormalHigh);
            	        if ((oChart.RangeScale > 0))
            		        Connection.HistAddRangeScale(Seq, oChart.RangeScale);
                    }
                    // If a note is added, pass it along
                    if ((oChart.Note.Length > 0))
            	        Connection.HistAddNote(Seq, oChart.Note);
                    // If an episode string is available, pass it
                    if ((oChart.Episode.Length > 0))
            	        Connection.HistAddEpisode(Seq, oChart.Episode);
                    // If this has a prescription object, build the string and pass it along
                    if (((oChart.RxObj != null))) {
            	        Connection.HistAddRxstr(Seq, oChart.RxObj.ToString());
                    } else if ((oChart.Timing.Length > 0)) {
            	        Connection.HistAddRxstr(Seq, oChart.Timing);
                    }
                    // Check for link group
                    if ((oChart.QualifierLinkSequence == 0 &amp; oChart.QualifierLink.Length > 0)) {
            	        // Server differentiates LinkGroup from LinkedRNDx
            	        Connection.HistLinkFindings(Seq, oChart.QualifierLink, 0);
                    }
                    // Check for order reference id
                    if ((oChart.ReferenceID.Length > 0))
            	        Connection.HistAddOrder(Seq, oChart.ReferenceID);
                    if ((oChart.Chapter != 0))
            	        Connection.HistAddChapter(Seq, oChart.Chapter);
                    if ((oChart.UserSubGroup != 0)) {
            	        Connection.HistSetSubGroup(Seq, oChart.UserSubGroup);
            	        //ElseIf (.Group >= MedcinGroups.Miscellaneous1) Then
            	        //    Connection.HistSetSubGroup(Seq, 0)
                    }
                    if ((oChart.Specifier.Length > 0))
            	        Connection.HistAddSpecifier(Seq, oChart.Specifier);
                    if ((oChart.Codes.Length > 0)) {
            	        Connection.HistAddNarrateCode(Seq, ModeFromCodeStr(oChart.Codes), oChart.Codes);
                    }
                    if ((MyConfig.AutoImage)) {
            	        if (((oChart.SBlob != null) &amp;&amp; oChart.SBlob.Length > 0)) {
            		        // Need to flush the history cache, 
            		        // since we may be getting the image from the server
            		        Connection.HistFlush();
            		        AddFindingImage(Connection, false, true, oChart, false, false);
            	        } else {
            		        string Marker = TagHasMarker(oChart);
            		        if ((Marker.Length > 0)) {
            			        // Markers are not from the server, so no need to flush the history cache
            			        AddFindingImage(Connection, false, true, oChart, false, false);
            		        }
            	        }
                    }
                   }
                   functionReturnValue = lCount;
               } catch (Exception ex) {
                   PostTheError(ex);
               }
               oChart = null;
               return functionReturnValue;
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistSetPoolPid(System.String)">
            <summary>
            Establishes which history pool to use by patient identifier.
            </summary>
            <param name="patientid">The patient identification string used to create the history pool.</param>
            <returns>If the history pool identified by the patientid does not exist, the return code is 0.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistCreatePool(System.String)">
            <summary>
            Create a shared history pool for this patient.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistReleasePool"/>
            <param name="patientid">Specifies the patient identification string.</param>
            <returns>The return code has three states: Zero means failure. Greater than zero indicates 
            successful creation of a new pool. This return code is the pool's identifier.  Less than zero 
            means a pool already exists for this patient, so loading of the patient’s history may already 
            be completed. The poolid is the positive of this return code.</returns>
            <remarks>
            Functions identified with "[packet]" work as group to send the entire patient chart to the history pool in medcinserv. 
            The strategy here is for an application to read the patient's history from whatever databases are used and then to 
            use these functions to send the data to medcinserv. The Medcin server then organizes the patient's history into a 
            data model that is used to support many built in high level functions that are accessible through API calls. 
            To conserve network bandwidth and for speed, these functions internally buffer data into 10 kilobyte blocks before 
            transmitting via TCP. When data loading is complete, a call to HistFlush() will transmit any remaining data in the 
            internal buffer to the Medcin server.  
            <para>A pool is a temporary in-memory collection of a single patient's entire medical record. 
            All of the Hist* functions operate on this pool. The pool may be shared with other 
            applications or with other workstations that have the same current patient.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistReleasePool">
            <summary>
            Disassociates the history pool with current session. If the history pool is not in use by any other 
            session, the current session's history pool is deallocated. The current session may also be 
            looked upon as the current connection or as closed connection that has it's state saved.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistCreatePool(System.String)"/>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistDeleteEncounter(System.String)">
            <summary>
            This method deletes all records with the specified encountertime from the history pool.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistAddEncounter(System.String,System.Int32)"/>
            <param name="encountertime">The encounter time to reference the encounter.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistEncounterList">
            <summary>
            This method returns a list of all encountertimes that are in the history pool. The encountertimes are 
            delimited with a tab character.
            </summary>
            <returns>A string containg the list of encounters is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistLocate(System.Int32,System.Int16)">
            <summary>
            This method is invoked to retrieve the children findings for the passed medcinid from the 
            patient history pool.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="medcinid">medcinid or user-defined finding ID to locate</param>
            <param name="mode">If 0 then all history matching the medcinid is returned. If 1, then only the 
            children of the passed medcinid will be returned, not grand-children or their siblings. If 2, 
            then retrieve all levels of children of the passed medcinid from the patient history pool. 
            If 3 then all data from the above modes is returned. If 4 then all above and additional history 
            in the same group as the medcinid as defined in the document groups.doc.</param>
            <returns>Data is returned in accordance with the BuildlistMode() settings.</returns>
            <remarks>You can retrieve all of the findings in the history pool by terminology type by calling 
            HistLocate six times – each with one of the Medcinids corresponding to the base nodekey for a 
            terminology type. These Medcinids are shown in the following list for your convenience:
            <list type="bullet">
            	<item>Symptoms: 2952</item>
            	<item>History: 5141</item>
            	<item>Physical: 6000</item>
            	<item>Tests: 102905</item>
            	<item>Diagnoses: 39448</item>
            	<item>Therapy: 40000</item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistList(System.String,System.Int16)">
            <summary>
            This method is invoked to retrieve the children findings for the passed medcinid from the patient 
            history pool. This function behaves exactly like the HistActivate function used for intelligent 
            prompting, with the exception that there is no listsize or termtype.
            </summary>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <param name="medcinids">A comma separated list of medcinids or user-defined finding IDs to locate.
            Medcinids passed as an empty string implies all history pool entries are to be returned,
            subject to the limits imposed by data filtering. Mode would then be irrelevant in this case.
            The server will not include root-level findings in the response list. The delimited list may also
            designate a custom layout that would be used to produce a custom flow sheet using the buildlist
            spreadsheet mode. This is discussed below. Each finding in the list can be prefixed with a
            character that forces a specific override for that Medcinid. These overrides are as follows:
            <list type="bullet">
            <item>An asterisk designates that if the mode is less than 6, set the mode to 6 for this finding.
            This allows the finding to include itself as well as all children findings to appear in the response
            list even if the mode was set to 0-4.</item>
            <item>An ampersand designates that the Medcinid should be included in the response list even if
            no history data matches. This allows the finding to appear in the respnse list even if the mode is 0-4.</item>
            <item>A number sign designates both of the above actions.</item>
            </list></param>
            <param name="mode">Specifies different mechanisms for extracting history data:
            <list type="table">
            <listheader><term>Mode</term><description>Description of Value</description></listheader>
            <item><term>0</term><description>All history matching the medcinids is returned.</description></item>
            <item><term>1</term><description>Only children of the passed medcinids will be returned, not grand-children or their siblings.</description></item>
            <item><term>2</term><description>Retrieve all levels of children of the passed medcinids from the patient history pool.</description></item>
            <item><term>3</term><description>All data from the above modes is returned.</description></item>
            <item><term>4</term><description>All above and additional history in the same subgroups as the medcinids as defined in the document groups.doc.</description></item>
            <item><term>5</term><description>All history matching medcinid and all medcinids in the list are returned.</description></item>
            <item><term>6</term><description>All of 5 and all levels of children are returned.</description></item>
            <item><term>7</term><description>All of 6 plus additional history in the same sub-groups as the medcinids.</description></item>
            </list></param>
            <returns>Data is returned in accordance with the BuildlistMode() settings.</returns>
            <remarks><para><b>Custom Flow Sheet</b></para>
            <para>A custom flow sheet is one where the application specifies headings, subheadings and the findings that should be
            considered for rows subordinate to the subheadings. This implies no relationship to narrative groups or body systems,
            but simply provides total control of the grid presentation based on the custom design. The finding rows of the grid
            retain the sequence of the findings in the list. History pool data extracted that is related to a provided finding
            based on the Mode argument is then sequenced by Nodekey.</para>
            <para></para>The following points designate the syntax required for header and subheader specifications within the
            delimited list of Medcinids.
            <para><list type="table">
            <listheader><term>Medcinid</term><description>Description of Value</description></listheader>
            <item><term>Medcinid = –1</term><description>This specifies global parameters for the spreadsheet.
            This would take the form of '-1:S=[M|C]:H=[M|C]' where the 'S' parameter specifies row sort order Using Medicomp or Custom,
            and the 'H' parameter specifies using Medicomp or Custom headers. At this time, the only acceptable set of parameters is Custom;
            thus, the field must be specified as '-1:S=C:H=C'. This must be the first field of the Medcinids delimited list.</description></item>
            <item><term>Medcinid = –2</term><description>This specifies a row header. This would be of the form, '-2:My Header Text'.
            The header text cannot include a comma. The header text would be in effect for all rows emitted until the next header is reached.</description></item>
            <item><term>Medcinid = –3</term><description>This specifies a row subheader. This would be of the form, '-3:My Sub-Header Text'.
            The subheader text cannot include a comma. The subheader text would be in effect for all rows emitted until the next subheader is reached.</description></item>
            </list></para>
            <para>Findings must always be subordinate to a subheader.</para>
            <para>
            <example>This provides a spreadsheet of the complete history pool:
            <code>
            private void histListAllToolStripMenuItem_Click(object sender, EventArgs e)
            {
               try
               {
                   Medconn.BuildListMode(BuildListModes.medSpreadsheet | BuildListModes.medExtended);
                   System.Collections.ArrayList rl = Medconn.HistList("", 0);
                   Medconn.BuildListMode(BuildListModes.medNormal);
                   if (rl.Count &gt; 0)
                   {
                       // We first will show the data in the listview control so that the actual data is observed
                       ViewResponseList(rl);
                       grdView.Enabled = false;
                       // Now present the data into a grid view
                       for (int i = 0; i &lt; rl.Count; ++i)
                       {
                           ResponseItem ri = (ResponseItem)rl[i];
                           AddResponseItemToGrid(ri);
                       }
                       grdView.Enabled = true;
                       for (int col = 0; col &lt; grdView.Columns.Count; ++col)
                           grdView.AutoResizeColumn(col, DataGridViewAutoSizeColumnMode.AllCells);
                   }
                   else
                       MessageBox.Show("There is no history to retrieve");
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
            }
            </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistGetItemData(System.Int32,System.String)">
            <summary>
            This method can be used to retrieve a string that contains the field data passed to the server 
            using the various data histadd functions for an item. The retreived string is similar to that 
            returned as the extended prefix argument in a response list; however in this method, there is 
            no truncation of data. Thus, if you need to retrieve entire data of a history item (such as 
            the note text string), this method may be useful.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetItemData(System.Int32,System.String)"/>
            <param name="seq">This parameter specifies the sequence number that was used to identify the item 
            in the various histadd functions. If the Seq passed is not present, an empty string is returned.</param>
            <param name="fields">This parameter specifies the data elements that are to be returned; only those 
            elements specified in the argument will be returned and their appearance in the string will be 
            in the order of the characters specified in the fields argument. </param>
            <returns>The fields specified. Data elements in the returned string are separated with tabs.</returns>
            <remarks>The following fields are defined:
            <list type="table">
            <listheader><term>Element Character</term><description>Element Description</description></listheader>
            <item><term>a</term><description>status</description></item>
            <item><term>B</term><description>Enter doc</description></item>
            <item><term>b</term><description>referred to doc</description></item>
            <item><term>c</term><description>chartflag</description></item>
            <item><term>d</term><description>duration</description></item>
            <item><term>e</term><description>encountertime</description></item>
            <item><term>G</term><description>String Tag</description></item>
            <item><term>i</term><description>Medcinid</description></item>
            <item><term>k</term><description>episode</description></item>
            <item><term>l</term><description>RangeScale</description></item>
            <item><term>m</term><description>modifier</description></item>
            <item><term>n</term><description>note</description></item>
            <item><term>o</term><description>onset</description></item>
            <item><term>p</term><description>prefix</description></item>
            <item><term>P</term><description>Narrative Group</description></item>
            <item><term>r</term><description>Rx string</description></item>
            <item><term>t</term><description>result</description></item>
            <item><term>u</term><description>unit of measure</description></item>
            <item><term>v</term><description>value string</description></item>
            <item><term>y</term><description>range normal low</description></item>
            <item><term>z</term><description>range normal high</description></item>
            </list>
            <para>A sample returned string follows (using "\t" to indicate a tab:
            <c>i=20905\tp=O\te=200402031440\tv=\tu=mg/100ml\tm= \tt= a= \tb=0\tc=0\ty=0\tz=0\t\tB=1</c>
            </para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.GetBuildListMode">
            <summary>
            This method obtains the current BuildListMode value
            </summary>
            <seealso cref="M:Medicomp.Connection.BuildListMode(Medicomp.BuildListModes)"/>
            <seealso cref="T:Medicomp.ResponseItem"/>
            <returns>The current BuildListMode is returned.</returns>
            <remarks>This mode alters the field content of certain ResponseItem fields.</remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddFuList(System.String)">
            <summary>
            This is a complementary function used by selected Hist* retrieval methods when the BuildListMode 
            has the medFollowup bit set.
            </summary>
            <seealso cref="M:Medicomp.Connection.HistCalculate"/>
            <seealso cref="M:Medicomp.Connection.HistWordSearch(System.String)"/>
            <seealso cref="M:Medicomp.Connection.HistActivateDx(Medicomp.ListSizes,Medicomp.MedTermtypes)"/>
            <seealso cref="M:Medicomp.Connection.BuildListMode(Medicomp.BuildListModes)"/>
            <seealso cref="T:Medicomp.BuildListModes"/>
            <param name="medcinids">This passes a list of medcinids (separated by commas) to the medcin server.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The medcinids in the list and matching findings (and children) from the history pool will 
            then be included in the retrieved spreadsheet. The list of medcinids specified in this function 
            will stay in affect until another list is specified or a blank list is specified.</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetGroupSequenceEx">
            <summary>
            This method is used to obtain the sequence of all groups as a comma-delimited string.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetGroupSequenceEx(System.String)"/>
            <returns>This returns a string containing the comma delimited list of sequence numbers in group order.</returns>
            <remarks>The delimited list of numbers are ordered by group: G_REASON, G_HPI, G_CURMED, G_PAST_MED_HIST, etc.
            Thus, using the default sequence, the string returned would be '2,4,5,6,...'.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetGroupSequenceEx(System.String)">
            <summary>
            This method is used to alter the sequence of all groups by passing a comma-delimited string. 
            Passing a null string for GroupList will reset the sequence to the initial server sequence.
            </summary>
            <param name="GroupList">The list of sequence numbers in group order.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The GroupList string should contain a list of sequence numbers in group order and not 
            the group numbers in the sequence you wish them to be presented. For instance, if you wish the 
            narrative groups to be in a presentation sequence of 28, 6, 27, 1, 20, 2, 24, 3, 30, 23, 29, 4, 
            32, 33, 7, 5, 16, 9, 34, 19, 21, 31, 8, 11, 26, 25, 13, 10, 12, 22, 14, 15, 17, 35, 36, 18 
            (Misc1, History, Reason for Visit, Chief Complaint, …, Misc9, Past Tests), then the GroupList 
            should be '4,6,8,12,16,2,15,23,18,28,24,29,27,31,32,17,33,36,20,5,21,30,10,7,26,25,3,1,11,9,22,
            13,14,19,34,35' (Chief complaint is sequenced 4th, HPI is sequenced 6th, Current medication 
            is sequenced 8th, etc).
            <para>The initial sequence of groups for presentation purposes is as follows:
            <list type="number">
            <item>Reason for visit</item><item>Chief Complaint</item><item>Referred Here</item>
            <item>History Of Present Illness</item><item>Current Medication</item><item>Past Medical History</item>
            <item>Previous Therapy</item><item>Personal History</item><item>History</item>
            <item>Family History</item><item>Review Of Systems</item><item>Physical Findings</item>
            <item>Objective</item><item>Tests</item><item>Rule Out</item>
            <item>Previous Tests</item><item>Assessment</item><item>Test Conclusions</item>
            <item>Therapy</item><item>Allergies</item><item>Vaccinations</item>
            <item>Counseling and Education</item><item>Discussed</item><item>Plan</item>
            <item>Notes</item><item>Other</item><item>Practice Management</item>
            </list></para><para>Miscellaneous1 through Miscellaneous37 follow in sequence.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.SetGroupName(Medicomp.MedcinGroups,System.String)">
            <summary>
            This method is used to change the name of a group in the presentation of the narrative. 
            It works the same as the MessageString API but is simpler to use when you want to change 
            only the names of groups as they appear in the narrative. 
            </summary>
            <param name="groupnumber">One of the <see cref="T:Medicomp.MedcinGroups">MedcinGroups</see> enumeration
            that designates the narrative group name you wish to change. (Int16 for ActiveX)</param>
            <param name="newname">The name you wish to use for the narrative group in question.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>A group name can be reset to its original value by passing a null string as the newname parameter.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetDoctorid(Medicomp.DocCodes,System.Int32)">
            <summary>
            This method is used to both set the role of the provider entering data as well as set the
            provider identification (docid) for narration add functions when the docid for the function
            is different than the docid for the encounter (i.e. the docid passed in the AddEncounter API).
            Once set to a non-zero value, the docid passed will be assigned to the function identified by the code.
            The Code parameter identifies the role of the provider. The role is used to alter the behavior of
            specific functionality in the server. At this time, the role differentiates the functionality of
            intelligent prompting 
            </summary>
            <param name="code">Code is one of the <see cref="T:Medicomp.DocCodes">Medicomp.DocCodes</see> enumerations.
            The enumeration is treated as a set of bit flags; thus, a single provider can combine roles. (Int32 for ActiveX)</param>
            <param name="docid">Specifies the provider identification for the code.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Particular narration groups (G_REFERDX, G_PLAN, G_ASSESS, G_EDUCATION, and G_DISCUSS) 
            will sequence findings by the entering data provider identification so that the narration can 
            present sub-groupings. Where the provider string is cited in the narration, the correct provider 
            name for the sub-grouping will be emitted.</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetDoctorName(System.Int32)">
            <summary>
            This function obtains the doctor name string for the given doctor identification that was 
            assigned with a previous <see cref="M:Medicomp.Connection.AddDocName(System.Int32,System.String)">AddDocname</see> method.
            </summary>
            <param name="docid">The identifier of the provider in question.</param>
            <returns>Returns the doctor name assigned to a docid.
            If the Docid parameter passed is 0, then the entire list of docid and docname pairs will be returned 
            in a single tab-delimited string using the format where docid is expressed in string form and '^t' 
            represents a Tab character (0x09 or ‘\t’ or VbTab):
            <para><c>docid1^tdocname1^tdocid2^tdocname2^…docidn^tdocnamen</c> </para></returns>
        </member>
        <member name="M:Medicomp.Connection.NextUdf">
            <summary>
            This method returns the next user-finding id to use when creating a new user-finding.
            </summary>
            <returns>Returns the next available user-finding id. The returned id is one greater than the highest user-finding in server memory</returns>
        </member>
        <member name="M:Medicomp.Connection.SaveUdf">
            <summary>
            This method writes the user-findings and user-prompts currently in server memory to the medcin.udf 
            and medcin.udp files respectively. These files are created in the same folder as the MEDCIN variable data files.
            </summary>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When the MEDCIN server restarts, it will load the data in these files back into server memory, 
            which restores the user-findings and user-prompts.
            <para>
            </para>A medcin.udf file currently has the following format (all fields are double-quote delimited strings including record type):
            <list type="table">
            <listheader><term>Record Type</term><description>Description of Data</description></listheader>
            <item><term>Header</term><description>The lowest and highest user-defined finding number</description></item>
            <item><term>1</term><description>Userid, Parentid, Search, Nomen, sDocpos, sDocneg, pDocpos, pDocneg, extrasearch</description></item>
            <item><term>2</term><description>Userid, Icd, Icd2, Icdh, Icdf, Cpt, Cptmod</description></item>
            <item><term>3</term><description>Userid, Unit, Femlowrange, Femhighrange, Malelowrange, Malehighrange</description></item>
            <item><term>4</term><description>Userid, UserProperties</description></item>
            <item><term>7</term><description>Userid, codetype, year, code</description></item>
            <item><term>8</term><description>Userid, stag</description></item>
            </list></remarks>
        </member>
        <member name="M:Medicomp.Connection.CheckAlert(System.String,System.String,System.String,System.String,Medicomp.MedAlertFlags)">
            <summary>
            This API uses patient data from the history pool, the current encounter, 
            and any medcinids with modifiers to find alerts.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetAlertLookBackPeriod(System.String)"/>
            <seealso cref="M:Medicomp.Connection.SetAlertSuppression(System.String)"/>
            <param name="encountertime">The encounter time to reference an encounter in the History pool. 
            The format is YYYYMMDDHHIISS.</param>
            <param name="medcinids">This is a list of medcinids and associated arguments that modifiy the medcinid separated by tabs.</param>
            <param name="itemids">This is a list of itemid numbers separated by tabs. An Itemid refers to a finding in the current encounter.</param>
            <param name="seqs">This is a list of seq numbers separated by tabs. A seq number is a unique identifier for a chart record
            supplied as an argument in the HistAdd API.</param>
            <param name="flags">This is a 32 bit flags to indicate preferences on results and evaluation considerations. (Int32 for ActiveX and Java)</param>
            <returns>The results are returned as a single null terminated string where records are delimited by a newline character, 
            and fields within a record are delimited by a tab character.</returns>
            <remarks>
            <para>
            This alerts algorithm differs from all others because it evaluates the patient’s entire medical history. 
            The alert knowledge base is expressed using medcinids, prefix, onset, delay, expiration, results, value, 
            and separate value ranges by age for both male and female patients. The CheckAlert function specifies 
            what to evaluate and what results to return. The function uses patient data from the history pool, 
            the current encounter, and any medcinids with or without modifiers.
            Normally, the CheckAlert function will evaluate all data in the history pool; however, the client can control 
            how far back CheckAlert will look by setting the “lookback” period using the SetAlertLookBackPeriod API. 
            Note that if a finite period has been set, the client can override the setting when calling CheckAlert 
            by setting the IgnoreLookBack flag bit. The client application can also pass information to the server that 
            identifies alerts that should be suppressed. This is discussed in the section on the SetAlertSuppression API
            </para>
            <para><b>Table of Flags</b></para>
            <list type="table">
            <listheader><term>Flag Value</term><description>Return Value Includes</description></listheader>
            <item><term>0x00000001</term><description>Results are alerts level 1.</description></item>
            <item><term>0x00000002</term><description>Results are alerts level 2.</description></item>
            <item><term>0x00000004</term><description>Results are alerts level 3.</description></item>
            <item><term>0x00000008</term><description>Results are alerts level 4.</description></item>
            <item><term>0x00000010</term><description>Add counts of alerts for levels 4,3,2,1 to start of results string.</description></item>
            <item><term>0x00000020</term><description>Only evaluate initiating findings with a prefix of 'O'.</description></item>
            <item><term>0x00000040</term><description>Don’t recalculate, just return alert results from last calculation.</description></item>
            <item><term>0x00000080</term><description>For this check, ignore any lookback period set by the SetAlertLookBackPeriod API call.</description></item>
            </list>
            <para><b>Results Format</b></para>
            <para>
            The results are returned as a single null terminated string where records are delimited by a newline character, 
            and fields within a record are delimited by a tab character.
            Whenever the counts of alerts is requested by setting the 0x00000010 bit in the flags argument, 
            it will appear as a record at the head of the results string as below.
            Level 4 alerts will appear 1st then level 3, level 2, and finally level1. For example,
            '<c>1\t3\t0\t10\n</c>' means one level 4 alert, three level 3 alerts, no level 2 alerts, and ten level 4 alerts, 
            </para>
            <para>
            Whenever the alerts data records are requested by setting the 0x00000001, 0x00000002, 0x00000004, or 0x00000008 bit 
            in the flags argument, each alert will appear as a separate record with fields delimited by tabs.  
            Alerts records will follow a counts of alerts record (if counts of alerts is requested).  
            then end of record but not necessarily the end of the string because other flags may be set.
            </para>
            <para><b>Medcinids list format</b></para>
            <para>
            This is a list of records delimited by the newline character.  Each record has several fields delimited by tabs.
            <list type="table">
            <listheader><term>Field</term><description>Field Contents</description></listheader>
            <item><term>1</term><description>Medcinid</description></item>
            <item><term>2</term><description>EncounterTime</description></item>
            <item><term>3</term><description>Prefix</description></item>
            <item><term>4</term><description>Onset</description></item>
            <item><term>5</term><description>Duration</description></item>
            <item><term>6</term><description>Result</description></item>
            <item><term>7</term><description>Value</description></item>
            <item><term>8</term><description>Unit of Measure</description></item>
            </list>
            </para>
            <para><b>Returned Alert Data Record Format</b></para>
            <para>Example: '<c>199811041345\tIid\tIPfx\tAce inhibitors\t199811041345\tDid\tDPfx\tSwollen lips\t4\n</c>'</para>
            <list type="table">
            <listheader><term>Field</term><description>Contents of Field</description></listheader>
            <item><term>1</term><description>The encounter date and time of the initiating finding (Nov. 4th 1998 13:45)</description></item>
            <item><term>2</term><description>The Medcinid of the initiating finding (Iid)</description></item>
            <item><term>3</term><description>The prefix of the initiating finding (IPfx)</description></item>
            <item><term>4</term><description>The initiating finding’s narrative description (Ace inhibitors)</description></item>
            <item><term>5</term><description>The encounter date and time of the discovered finding (Nov. 4th 1998 13:45)</description></item>
            <item><term>6</term><description>The Medcinid of the discovered finding (Did)</description></item>
            <item><term>7</term><description>The prefix of the discovered finding (DPfx)</description></item>
            <item><term>8</term><description>The discovered finding’s narrative description (Swollen lips)</description></item>
            <item><term>9</term><description>The alert level which is 1,2,3, or 4 (4)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.GetReferenceInfo(System.Int32,System.Int32,Medicomp.ReferenceInfos)">
            <summary>
            This function works in concert with a reference information datafile, medinfo.dat, to retrieve 
            reference information useful for a doctor and/or patient.
            It is also used to retrieve comments associated with specific Medcin findings.
            </summary>
            <param name="Source">This should contain the numeric identification of the information provider. 
            At this time, Source must be set to a value of 0 that identifies Medicomp.</param>
            <param name="Id">This is the numeric identifier of the information. Its value will depend on the 
            Options parameter.</param>
            <param name="Options">This is a parameter that identifies the nature of the request. (enumReferenceInfo for ActiveX)
            <list type="table">
            <listheader><term>Value and Enum</term><description>Description of Option</description></listheader>
            <item><term>0 - medRefSourceAvail</term><description>Use to determine if reference information is 
            available for the designated source. Will return a string containing either '1' if the source 
            information is available or '0' if it is not. See the information below for a description of 
            the structure of the returned string.</description></item>
            <item><term>1 - medRefDocInfo</term><description>Use to retrieve the doctor information for the 
            given Id.</description></item>
            <item><term>2 - medRefPatFormList</term><description>Use to retrieve a list of Ids and Forms 
            available for the given Id. A Tab character is used to 
            delimit the Id and Form; a NewLine as used to delimit each list record.</description></item>
            <item><term>3 - medRefPatInfo</term><description>Use to retrieve the patient information for the 
            given Id, which is one of the Ids returned in the list retrieved using an API call with 
            Options=2. See the information below for a description of the structure of the returned string.</description></item>
            <item><term>8 - medRefComment</term><description>Use with Source = 0 to retrieve the finding comment</description></item>
            </list></param>
            <returns>The information pertinant to the request is returned.</returns>
            <remarks><b>Information Format</b>
            <para>This section discusses the format of the doctor and patient information. The first three 
            characters of the string contain the data file type to be used if writing the information to a 
            file. The remaining 
            string contains one or more language-specific pages of information – each delimited with a 
            Tab. Each language section begins with 'L=xxx', where xxx indicates the language of the section. 
            </para>
            <para>Where information is available in more than one language, html page information includes 
            hyperlinks to cross-reference the language pages. In order for these links to work, each 
            language-specific page data should be written to a file named medinfoxxx.typ, where 'xxx' is 
            the 3-letter language code and 'typ' is the file type identified above.</para>
            <para>When Source=0 and Options=8, the comment string for a Medcin finding is retrieved by passing
            the Medcinid for the Id parameter. When a finding has an associated comment,
            the 0x0010 bit of it’s GpFlags property will be set</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.ImageSupport">
            <summary>
            This function is used to determine if imaging is supported by the server you are connected to.
            </summary>
            <returns>ImageSupport returns a 1 if imaging support is available; otherwise, it returns a 0.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">
            <summary>
            This function returns the identification number of the image that is appropriate 
            for the combination of system, region, and view passed in the parameters. If all three
            parameters are passed as 0, the function will return the identification number of the
            highest numbered image. Images are numbered starting from 1, and not all numbers from
            1 to the highest have images. The GetImageLen API can be used to determine if a given
            image is present in the data base.
            </summary>
            <param name="system">The system code of the desired image
            <list type="table">
            <listheader><term>System Code</term><description>Code description</description></listheader>
            <item><term>1</term><description>Skin</description></item>
            <item><term>2</term><description>Respiratory</description></item>
            <item><term>3</term><description>Cardiovascular</description></item>
            <item><term>4</term><description>Breasts</description></item>
            <item><term>5</term><description>Lymphatic</description></item>
            <item><term>6</term><description>Gastrointestinal</description></item>
            <item><term>7</term><description>Urologic</description></item>
            <item><term>8</term><description>Genital</description></item>
            <item><term>9</term><description>Endocrine</description></item>
            <item><term>10</term><description>Muscle</description></item>
            <item><term>11</term><description>Skeletal</description></item>
            <item><term>12</term><description>Neurologic</description></item>
            <item><term>13</term><description>Eye</description></item>
            </list></param>
            <param name="region">The region code of the desired image
            <list type="table">
            <listheader><term>Region Code</term><description>Code description</description></listheader>
            <item><term>1</term><description>Full body</description></item>
            <item><term>2</term><description>Head-Neck</description></item>
            <item><term>3</term><description>Trunk</description></item>
            <item><term>4</term><description>Upper extremities</description></item>
            <item><term>5</term><description>Lower extremities</description></item>
            </list></param>
            <param name="view">The view code of the desired image
            <list type="table">
            <listheader><term>View Code</term><description>Code description</description></listheader>
            <item><term>1</term><description>Front</description></item>
            <item><term>2</term><description>Back</description></item>
            <item><term>3</term><description>Medial</description></item>
            <item><term>4</term><description>Left</description></item>
            <item><term>5</term><description>Right</description></item>
            <item><term>6</term><description>Top</description></item>
            <item><term>7</term><description>Bottom</description></item>
            <item><term>8</term><description>Anterior</description></item>
            <item><term>9</term><description>Posterior</description></item>
            <item><term>10</term><description>Cross Section Left</description></item>
            <item><term>11</term><description>Cross Section Right</description></item>
            <item><term>12</term><description>Reserved</description></item>
            <item><term>13</term><description>Reserved</description></item>
            <item><term>14</term><description>Reserved</description></item>
            <item><term>15</term><description>Miscellaneous 1</description></item>
            <item><term>16</term><description>Miscellaneous 2</description></item>
            <item><term>17</term><description>Miscellaneous 3</description></item>
            </list></param>
            <returns>The ImageID of the appropriate image is returned. 
            If no image matches the parameters, 0 is returned. If all three parameters are 0, 
            the function will return the highest ImageId number.
            <c>tssCurrent.Text += "; Maximum ImageID = " + Medconn.GetImageId(0, 0, 0).ToString();</c></returns>
            <remarks>Since such a combination may have male-specific and female-specific images, 
            as well as different images for different ages, the patient's age and gender are 
            used when needed. The patient's age and gender are determined from the last 
            SetPatient API call.
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.GetImageIdex(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            This function obtains the identification number of the image that is appropriate for the 
            combination of system, region, view, and attributes passed in the parameters. Since such 
            a combination may have male-specific and female-specific images, as well as different 
            images for different ages, the patient's age and gender are used when needed. The patient's 
            age and gender are determined from the last <see cref="M:Medicomp.Connection.SetPatient(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">SetPatient</see> method.
            </summary>
            <param name="system">The system code. See <see cref="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">GetImageId</see>.</param>
            <param name="region">The region code. See <see cref="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">GetImageId</see>.</param>
            <param name="view">The view code. See <see cref="M:Medicomp.Connection.GetImageId(System.Int16,System.Int16,System.Int16)">GetImageId</see>.</param>
            <param name="attributes">Attribute codes are identified in the following table:
            <list type="table">
            <listheader><term>Attribute Parameter Code</term><description>Code Definition</description></listheader>
            <item><term>0</term><description>Combined or Normal</description></item>
            <item><term>1</term><description>Left body part only</description></item>
            <item><term>2</term><description>Right body part only</description></item>
            </list></param>
            <returns>The ImageID of the appropriate image is returned. 
            If no image matches the parameters, 0 is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetImageLen(System.Int32)">
            <summary>
            This function obtains the length, in bytes, of the image identified by the ImageId parameter. 
            </summary>
            <param name="ImageId">The identifying number of the image.</param>
            <returns>If the ImageId is invalid, or imaging is currently unsupported, the length returned will be 0.</returns>
            <remarks>The image can be retrieved as a Portable Network Graphics (PNG) file image stored as a 
            byte array by using the <see cref="M:Medicomp.Connection.GetImage(System.Int32)">GetImage</see> method.</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetImage(System.Int32)">
            <summary>
            This method obtains the image identified by the ImageId parameter. 
            </summary>
            <param name="ImageId">The identifying number of the image.</param>
            <returns>If the ImageId is invalid, or imaging is currently unsupported, an empty byte array will 
            be returned. When the desired image is available, it will be returned as a singly-dimensioned array of bytes.</returns>
            <remarks>Images are provided in Portable Network Graphic (PNG) file format as an array of bytes.
            <p code="net">This can be passed to an PictureBox control using streams:</p>
            <p code="net"><c>Dim buffer() As Byte = Medcin.GetImage(Imageid)</c></p>
            <p code="net"><c>MyPictureBox.Image = Image.FromStream(New System.IO.MemoryStream(buffer))</c></p>
            <para>
            <example>This illustates showing a selected image
            <code>
            private void lstImage_SelectedIndexChanged(object sender, System.EventArgs e)
            {
               if (lstImage.Items.Count == 0) return;
               // Get the currently selected item in the ListBox.
               ImageReference curItem = (ImageReference)lstImage.SelectedItem;
               try
               {
                   if (Medconn.GetImageLen(curItem.ImageID) > 0)
                   {
                       // Medcin images are PNG files returned as a byte array
                       byte[] mbytBuffer = Medconn.GetImage(curItem.ImageID);
                       if (mbytBuffer.GetLength(0) == 0)
                       {
                           MessageBox.Show("Unable to retrieve that image");
                           return;
                       }
                       // Display the image in the picture box - we show it centered
                       picImage.Image = Image.FromStream(new System.IO.MemoryStream(mbytBuffer));
                       tssImgSys.Text = curItem.System;
                       tssImgReg.Text = curItem.Region;
                       tssImgView.Text = curItem.View;
                       tssImgAtt.Text = curItem.Attributes;
                   }
                   else
                       MessageBox.Show("That image is not accessible");
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
            }
            </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetHotspotsLen(System.Int32)">
            <summary>
            This function obtains the length of the encoded hotspots applicable for the image identified by 
            the ImageId parameter. 
            </summary>
            <param name="ImageId">Specifies the image identifier in question.</param>
            <returns>If the image has no hotspots assigned, or the ImageId is invalid, or imaging is currently 
            unsupported, a 0 will be returned. The length returned is one greater than the actual length 
            of the string of characters to account for a terminating NULL character.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetHotspots(System.Int32)">
            <summary>
            This method retrieves the recordset of hotspots associated with the image identified by the 
            ImageId parameter. 
            </summary>
            <param name="ImageId">Specifies the image identifier in question.</param>
            <returns>If the image has no hotspots assigned, or the ImageId is invalid, or imaging is currently 
            unsupported, a zero-length string will be returned. When hotspots are available, the entire 
            recordset of hotspots is returned as a tokenized string of hotspots with each hotspot having 
            the format as noted below.</returns>
            <remarks>The following designates the hotspot format(spaces added only for readability):
            <para><c>HotSpotID \t BoundsLeft \t BoundsTop \t BoundsRight \t BoundsBottom \t Attributes 
            \t clickFlag \t ListId \t PicklistID \t ReferenceID \t zoomIn \t zoomOut \t Description</c></para>
            <para>Hotspot fields are delimited with a '\t' token character (a vbTab). Hotspot records are 
            delimited with a '\n' token character (a vbLf). This string can be converted to data fields 
            by a two-stage split operation; splitting the string on vbLf into an array of hotspot strings, 
            then splitting each hotspot string in the array derived from the split on vbTab to create an 
            array of hotspot fields. The following table describes the content of each hotspot field.
            <list type="table"><listheader><term>Field</term><description>Field Contents</description></listheader>
            <item><term>HotSpotID</term><description>This field is the identification number of the hotspot. 
            These numbers indicate nothing special; however, each hotspot assigned to an image has a 
            unique HotSpotID.</description></item>
            <item><term>BoundsLeft</term><description>This is the X-coordinate of the northwest corner of the 
            hotspot as it is positioned on the image. Coordinates are measured in pixels. Each image is 
            sized at 360 pixels vertical by 300 pixels horizontal.</description></item>
            <item><term>BoundsTop</term><description>This is the Y-coordinate of the northwest corner of the 
            hotspot as it is positioned on the image.</description></item>
            <item><term>BoundsRight</term><description>This is the X-coordinate of the southeast corner of the 
            hotspot as it is positioned on the image.</description></item>
            <item><term>BoundsBottom</term><description>This is the Y-coordinate of the southeast corner of 
            the hotspot as it is positioned on the image.</description></item>
            <item><term>Attributes</term><description>This is a number that indicates special attributes about 
            the hotspot. The attributes are: 0 = none; 1 = left lateral; 2 = right lateral </description></item>
            <item><term>ClickFlag</term><description>This is a number that provides a recommended default 
            action to be taken when a user clicks in the region bounded by the hotspot. The numbers are:
            1 = prompt using the list identified by ListId;
            2 = provide a picklist using the list identified by ListId;
            3 = provide the user with selecting a personal picklist that they have assigned to the hotspot;
            4 = show the image identified by the ZoomIn image identifier;
            5 = show the image identified by the ZoomOut identifier</description></item>
            <item><term>ListId</term><description>This is a ListItems identification number that may be assigned 
            to a hotspot. Where a list is available, it is retrieved using the GetListItems API. Only the 
            Medcinid and Age fields of each ListItems item are applicable.</description></item>
            <item><term>PicklistID</term><description>This is a ListItems identification number that may be 
            assigned to a hotspot. Where a list is available, it is retrieved using the GetListItems API. 
            The Medcinid, Prefix, and Note fields of each ListItems item are applicable.</description></item>
            <item><term>ReferenceID</term><description>If non-zero, this represents a single Medcinid that is 
            associated with the hotspot.</description></item>
            <item><term>ZoomIn</term><description>If non-zero, this represents the ImageId of an image that is 
            considered a magnification of the area of the current image that is associated with the hotspot. 
            The zoom-in image provides more detail of an area.</description></item>
            <item><term>ZoomOut</term><description>If non-zero, this represents the ImageId of the image that 
            this image is a magnification of. The zoom-out image is used to navigate back to the image of 
            lesser magnification.</description></item>
            <item><term>Description</term><description>This is a caption string that tersely describes the 
            hotspot. It can be used when providing a tooltip for the hotspot when the mouse hovers over 
            the region bounded by the hotspot.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetListItemsLen(System.Int32)">
            <summary>
            This method retrieves the length of the encoded ListItems recordset identified by the ListId 
            parameter.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetListItems(System.Int32)"/>
            <param name="ListId">The list identifier of the desired list.</param>
            <returns>If the List is empty, or the ListId is invalid, or imaging is currently unsupported, a 0 
            will be returned. The length returned is one greater than the actual length of the string of 
            characters to account for a terminating NULL character.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetListItems(System.Int32)">
            <summary>
            This method retrieves the set of ListItems associated with the ListId parameter.
            </summary>
            <seealso cref="M:Medicomp.Connection.GetListItemsLen(System.Int32)"/>
            <param name="ListId">The list identifier of the desired list.</param>
            <returns>If the List is empty, or the ListId is invalid, or imaging is currently unsupported, a 
            zero-length string will be returned. When ListItems are available, the entire set of ListItems 
            is returned as a tokenized string of ListItems with each ListItem having the format identified below.</returns>
            <remarks>Each ListItem has the following format (spaces added only for readability):
            <para><c>Medcinid \t Prefix \t AgeLower \t AgeUpper \t Note</c></para>
            <para>ListItem fields are delimited with a '\t' token character (a vbTab). ListItems records are 
            delimited with a '\n' token character (a vbLf). This string can be converted to data fields by 
            a two-stage split operation; splitting the string on vbLf into an array of ListItem strings, 
            then splitting each ListItem string in the array derived from the split on vbTab to create an 
            array of ListItem fields. The following table describes the content of each hotspot field.
            <list type="table"><listheader><term>Field</term><description>Field Contents</description></listheader>
            <item><term>Medcnid</term><description>This is the Medcinid to be used with Intelligent Prompting® 
            or the finding displayed for picklist data entry.</description></item>
            <item><term>Prefix</term><description>When the list is used for a picklist, this is the prefix 
            qualifier to be assigned.</description></item>
            <item><term>AgeLower</term><description>This indicates a lower age boundary for applicability of 
            the list item to a patient.</description></item>
            <item><term>AgeUpper</term><description>This indicates an upper age boundary for applicability of 
            the list item to a patient.</description></item>
            <item><term>Note</term><description>When the list is used for a picklist, this is a free text note 
            that may be applied to a finding entered into a chart.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)">
            <summary>
            This method is used to establish a numbered style that can be referenced to decorate the 
            finding text of a specific finding in the narrative presentation.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetDecorationStyle(System.Int32,System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)"/>
            <param name="DecorationStyle">A non-zero number desigating the style.</param>
            <param name="Font">One of the <see cref="T:Medicomp.RTFfonts">RTFfonts</see> enumeration. (Int16 for ActiveX)</param>
            <param name="Color">One of the <see cref="T:Medicomp.RTFcolors">RTFcolors</see> enumeration. (Int16 for ActiveX)</param>
            <param name="Size">The font size is designated in half-points (i.e. 20, 24, 28, 36, etc.); use 
            of half-points is specified in the Microsoft Rich Text Format Specification.</param>
            <param name="Attributes">Any combination of the <see cref="T:Medicomp.RTFattributes">RTFattributes</see> enumeration
            incorporating plain, <b>bold</b>, <i>italic</i>, <u>underline</u>, or <strike>strikethrough</strike>. (Int16 for ActiveX and Java)</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetDecorationStyle(System.Int32,System.Int16)">
            <summary>
            This method is used to set the text decoration for a finding added to the narrative collection 
            to a style previously established using the AddDecorationStyle API. You can remove the text 
            decoration by passing DecorationStyle as a 0 value.
            </summary>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate;
            it is used to identify the encounter finding to decorate.</param>
            <param name="DecorationStyle">Specify the decoration style to apply.
            See <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)">AddDecorationStyle</see> for additional information.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>When a finding is decorated, the HTML anchor tag that shows the text as a link in a browser 
            will use the text color of the decoration style in effect for the finding associated with the link. 
            When the finding is not decorated, the RTF_BODY element color will be used.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddNarrate2(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int16,Medicomp.MedcinGroups,System.Int16)">
            <summary>
            This function is used to add a finding to the narrative finding collection with the application 
            assigning the itemid that is used as the finding's reference in subsequent modifications of 
            the finding in the collection.
            <para>If itemid is passed as a negative number, then AddNarrate2 will assume that you are adding 
            the finding and will use the absolute value of that number as the itemid. When itemid is passed 
            as a positive number, AddNarrate2 will assume that you are changing the data of an existing 
            finding in the collection. <b>Make sure that you assign unique numbers.</b> </para>
            </summary>
            <param name="itemid">This number is passed to the function in order to modify any of the subsequent 
            parameter values once a finding has been added to the finding collection. If itemid is 
            negative, then the finding addition is considered to be new to the collection. To change any 
            value of a finding once added, you edit it by passing the positive value of the itemid 
            previously passed when adding the finding.</param>
            <param name="medcinid">The unique Medcin identification for the finding.</param>
            <param name="encountertime">The encounter time to which the finding belongs. The format is 
            'YYYYMMDDHHIISS' where 'YYYY' is the year, 'MM' is the month, 'DD' is the day, 'HH' is the 
            hour, 'II' is the minute, and 'SS' is the second. Use as much precision as the encounter time 
            is recorded (usually either 'YYYYMMDD' or 'YYYYMMDDHHII'. Note that a format of 'YYYYWWW' is 
            interpreted as a precision of week, where WWW is a three-digit week of the year (000-053). 
            For example, '199805071607' designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time.</param>
            <param name="prefix">The prefix qualifier for the finding.</param>
            <param name="modifier">The modifier qualifier for the finding.</param>
            <param name="result">The result qualifier for the finding.</param>
            <param name="status">The status qualifier for the finding.</param>
            <param name="onset">The date and time of the onset for the finding. Use the same format as used 
            for encountertime. If the onset string starts with a '0', it is interpreted as a single time 
            period expressed in the narrative as 'numeric period ago'. This syntax is detailed in the following table:
            <list type="table">
            <listheader><term>Onset String</term><description>Narrative Expression</description></listheader>
            <item><term>0yyy</term><description>yyy years ago</description></item>
            <item><term>0000mm</term><description>mm months ago</description></item>
            <item><term>0000www</term><description>www weeks ago</description></item>
            <item><term>000000dd</term><description>dd days ago</description></item>
            <item><term>00000000hh</term><description>hh hours ago</description></item>
            <item><term>0000000000ii</term><description>ii minutes ago</description></item>
            <item><term>000000000000ss</term><description>ss seconds ago</description></item>
            </list></param>
            <param name="duration">The duration of the finding. The format is the string form of a numeric 
            value followed by a precision character: 'Y' for years, 'M' for months, 'W' for weeks, 
            'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. For example, '3W' is 
            interpreted as three weeks, '7M' is interpreted as seven months, '10567I' is interpreted as 
            ten thousand, five hundred sixty seven minutes. The string is limited to a maximum of 9 digits 
            plus the precision character for a total string length of 10 characters. If this limit is 
            exceeded, it will be ignored.</param>
            <param name="rdoc">The docid of the referred doctor, if any.</param>
            <param name="chartflag">A flag field for the finding. A flag mask value of 1 indicates that the 
            finding should be grouped into Review of Systems (G_ROS) other than History of Present Illness 
            (G_HPI). A flag mask value of 2 indicates that the finding should be grouped into Chief 
            Complaint (this flag bit takes precedence over all other evaluations for group assignment). 
            A flag mask value of 4 when applied to a narrative group free-text finding indicates that the 
            note should be presented before all other findings of that group. All other bits are reserved.</param>
            <param name="groupNumber">If you wish to assign the finding to a specific narrative group instead 
            of having the narrative engine determine the group using its internal algorithm, then pass the 
            group number you wish to assign. Otherwise, groupnumber should be 0. Note that once you make a 
            non-zero specification of groupnumber for a finding, the narrative engine will continue to use 
            that assigned group number until you restore dynamic group determination by passing a 0 value 
            (See the <see cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)">GroupNumber API</see>). (Int16 for ActiveX)</param>
            <param name="DecorationStyle">If you wish to provide decoration of the text phrase for this used 
            in the narrative presentation, pass one of the decoration style numbers your application set 
            up using the AddDecorationStyle API <see cref="M:Medicomp.Connection.AddDecorationStyle(System.Int16,Medicomp.RTFfonts,Medicomp.RTFcolors,System.Int16,Medicomp.RTFattributes)"> See the 
            AddDecorationStyle API</see> for more details about text decoration.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.AddNarrate2Ex(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Int32,System.String)">
            <summary>
            This method is used to add additional data to a finding previously added to the finding collection. 
            The method does not provide a server return code so it should operate faster through the socket 
            interface to the MEDCIN server. It is equivalent to calling AddEpisode, AddNote, AddRxstr, 
            AddValue, and AddItemtag APIs. 
            </summary>
            <param name="itemid">This number should be one of the values previously returned by AddNarrate.</param>
            <param name="episode">The episodic data formatted for presentation or an encoded episode string 
            <see cref="M:Medicomp.Connection.AddEpisode(System.Int32,System.String)">as documented in AddEpisode</see>. The episode data string 
            will be presented prior to the onset string. In a statement of the form, "John Doe reported coughing up 
            sputum every 2-3 hours lasting 5 minutes May 1998 for 2 months", "every 2-3 hours lasting 5 minutes" is the episode, 
            "May 1998" is the onset, and "2 months" is the duration. The phrases "for" is introduced by the narrative generator. 
            The phrase, "every 2-3 hours lasting 5 minutes" is the episode passed here or in AddEpisode.</param>
            <param name="note">The note text to be added to the finding identified by the itemid. The text is 
            limited to the maximum length of a string. See the <see cref="M:Medicomp.Connection.AddNote(System.Int32,System.String)">
            AddNote API concerning marking of substrings</see> as plain text, RTF, and HTML for selectable output.
            Plain text notes will accept the tilde character ('~') as a logical new line and will convert it, 
            on outline or narrative format narrated output only, to the appropriate line break for each of the 
            narrative output options (plain text, Rich text, or HTML). Notes attached to findings are considered free text 
            and are presented using the styling of the Free Text element (see the rtfStyle API); however, if the application 
            decorates the text of the finding using the SetDecorationStyle API, the note attached to the finding will be similarly decorated.
            </param>
            <param name="rxstr">The prescription text to be added to the finding identified by the itemid.</param>
            <param name="valuestr">The value formated for display presentation.</param>
            <param name="unit">The unit for valuestr, as applicable for the valuestr. When the Unit parameter is "lbs", 
            the valuestr parameter can accept a string of the form "val1#val2". When the string is in this format, 
            the "val1" portion will be interpreted as the quantity of pounds and the "val2" portion will be interpreted 
            as the quantity of ounces. When emitted in the narration, it will be presented as "val1 lbs val2 oz". 
            For example, "150#8" is equivalent to "150.5". However, the former will be emitted in the narration as "150 lbs 8 oz,
            whereas the latter will be emitted as "150.5 lbs".</param>
            <param name="rangeNormalLow">The rangeNormalLow as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalLow(System.Int32,System.String)">RangeNormalLow</see> 
            method request for the finding.</param>
            <param name="rangeNormalHigh">The rangeNormalHigh as returned by a previous 
            <see cref="M:Medicomp.Connection.RangeNormalHigh(System.Int32,System.String)">RangeNormalHigh </see> 
            method request for the finding.</param>
            <param name="lTag">The tag number to be added to the finding.</param>
            <param name="sTag">The tag text to be added to the finding identified by the itemid. 
            The text can be of any length.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>Note that you can add either or both tag units. When the tag(s) is(are) added to the 
            generated text, the lTag will be presented before the sTag. An itemtag lTag field is 
            recommended when using narrative output generated in HTML, as the itemtag lTag field can be 
            used for the HREF link (the sTag field can also be used for the link; however, it can be 
            better used for showing additional data).
            <para>The sTag field can be composed of multiple fields, each field delimited by a distinct 
            character that appears as the first character of the string. The string can be emitted 
            appearing before the finding text or following the finding text by means of the ShowItemTag 
            method.</para>
            <para>When the string tag is composed of multiple fields, each individual field throughout all 
            tags can be emitted under program control by using the <see cref="M:Medicomp.Connection.NarrateGroups(System.String)">
            NarrateGroups API </see> with a tag specifier along with the ShowItemTag method.
            An example of an itemtag string with multiple fields would be: 
            '\Dr Jones\10/02/01\04:27 PM\Dr Smith\10/17/01\03:05 PM' which could be used to hold data 
            on the provider originally entering data and the provider editing data. The fields could be 
            selectively narrated by using the NarrateGroups API.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.CodeFromMedcin(System.Int32,Medicomp.CodeLinks,System.Int32)">
            <summary>
            This method obtains a string containing the one or more codes mapped to the Medcinid.
            The API may return a code string that includes multiple codes of a particular CodeSet mapped to the Medcin term.
            Multiple codes that are each a distinct mapping are delimited using a vertical bar character.
            Multiple codes that make up a group of codes that use the group for a mapping are delimited using a reverse slash character.
            Both types of delimiters may appear in the same code string.
            </summary>
            <seealso cref="M:Medicomp.Connection.SetCodeDate(System.String)"/>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations. (enumCodeSet for ActiveX)</param>
            <param name="Mode">Mode is used to handle variations. See table blow.</param>
            <returns>The specified code mapping is returned. If an ICD-9-CM code is invalid for billing (i.e. requires a 4th or 5th digit),
            then an asterisk will be appended to the code</returns>
            <remarks>Codes are available based on their effective validity by date. The server maintains the 
            effective dates on a system basis. The SetCodeDate API can be called by a client to change the 
            current code date for that client connection
            <para>
            Codes may have a suffix element that relates to the availability of additional data. 
            Where such data is available, the code will have a suffix that includes an exclamation mark ("!") followed by one or more 
            letters that indicate the type of additional data. This feature can be suppressed for all sever connections by setting the 
            "addcodedata" medcinserv.ini parameter to "no" from its default of "yes". The letters can be one or more of the following:
            <list type="bullet">
            <item>"H" indicates an available hint string (e.g. ICD code first);</item>
            <item>"P" indicates the actual code varies by data parameters entered with a finding (e.g. V85 varies with BMI);</item>
            <item>"S" indicates that additional specifiers should be used (e.g. ICD-10-CM specifiers or DSM-IV 4th &amp; 5th digit specifiers for uncoded textual content)</item>
            </list>
            </para><br></br>
            <para>The following code types may have more than one code map record, each map constitutes a complete set of data: 
            ICD-10-CM (code type 5), LOINC (code type 25), RXNORM (code type 31), and SNOMED (code type 3). 
            For these code types, the API returns data different from that returned for all other types that have at most one 
            code string per type.</para>
            <p>This table enumerates the values supported for the Mode parameter:</p>
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>0</term><description>Retrieves only the code (or multiple code set).
            Where extra fields are added to the code, they are delimited with a Tab character ('\t'). 
            Each code within a map set that is composed of more than one code is delimited using a back slash character ("\").</description></item>
            <item><term>1</term><description>Retrieves the code as well as the description, where applicable, using the same delimiters identified for mode 0.
            The V21 server provides descriptions only for ICD-9-CM. The V22 server provides descriptions for ICD-9-CM, ICD-10-CM, LOINC, RXNORM, SNOMED, UNII, and DODUC</description></item>
            <item><term>2</term><description>Retrieves the code hint relating to the code, where applicable.
            The string contains one or more encoded hints delimited with a semicolon.
            <para>For ICD-9-CM hints, the first hint could be a textual hint that is encased in dollar signs. 
            All other hint types start with a 2-letter code. The first two characters of the code string indicate the type of hint: 
            'CF' indicates Code First; 'UA' indicates Use Additional Code; 'MC' indicates Must Code; 'CM' indicates Composite Measure (e.g. CPT Category II Codes). 
            For example, <c>'$This is a textual hint$;CF123.45-123.49,234.56;UAE908-909'</c> represents a string that contains three hints: 
            the 1st is textual, the 2nd is a code first hint, and the 3rd is a use additional code hint.</para></description></item>
            <item><term>4</term><description>Retrieves the code specifier relating to the code, where applicable.
            This is returned as a semi-colon delimited string of positional specifier list codes for the code (ex: 'DSM001;DSM006;'). 
            The first field will be the code for the 1st list; the 2nd field will be the code for the 2nd list; 
            the 3rd field will be the code for the 3rd list. A field could be empty indicating no list is available for that position.
            <para>The string returned contains both the code and the code specification for all mapped code types that have multiple maps 
            per code type (ICD-10-CM, SNOMED, LOINC, RXNorm) that have specifications using the same delimiters identified for mode 0. 
            The code is included to enable validating what code the spec is for in case more than one code map has specs. 
            The code will have the suffix ('!') character added followed by the character 'S'. 
            Note that the code specification for ICD10CM is a semi-colon delimited list of elements; 
            each element consists of a digit position (4-7) and an ICD10 list reference using a comma delimiter. 
            An example of a specification string that contains 3 elements is <c>'5,ICD29;6,ICD4;7,ICD1'</c>. 
            The digit position refers to the actual character position where a character is placed that corresponds to an entry in the list; 
            this is used to construct a reportable code. The list reference refers to an entry in the qualifier list named 'ICD10LIST'. 
            The example references lists for digit positions 5, 6, and 7. When a specification contains more than one digit list, 
            an entry must be selected from each list to make a reportable code.</para></description></item>
            <item><term>8</term><description>Retrieves any additional data characters if the code for the given codeset
            of the given medcin finding has any additional code data. If appending of code data is globally suppressed in the
            medcinserv.ini file by setting the 'addcodedata' entry to 'no', then this mode may be used to recover what hints, if any, apply to the code.
            The string returned will include both the code and the suffix. If the suffix is empty, the “!” character will still be present.</description></item>
            <item><term>16</term><description>Returns the code as well as the suffix element regardless of the 'addcodedata'
            medcinserv.ini parameter. This can be used by applications that want the suffix along with the code regardless of the server global setting.
            For all mapped code types that have multiple maps per code type, the string returned should be identical to that for mode 8.</description></item>
            <item><term>32</term><description>For version 2.22, retrieves the code and all mapping data relating to the code, where applicable.
            The structure of an individual code map is: <c>'code!more[mapset,maptype,prefflag,mapgroup,termtypeid,flags,rgid,prefix,modifier,status,result]'</c>.
            Note that the more field may be empty.<para>
            When a finding has more than one map for the code requested, maps will be concatenated using delimiters. 
            A vertical bar delimits separate map sets; a backslash delimits maps in the same map set. 
            For example, 'map1|map2\map3|map4' represents three sets of mappings; the sets are as follows:
            <list type="bullet">
            <item><description>Map1</description></item>
            <item><description>Map 2 and map 3</description></item>
            <item><description>Map 4</description></item>
            </list></para></description></item>
            <item><term>80</term><description>Retrieves the CodeParm recordset relating to the code, where applicable.
            For all mapped code types that have multiple maps per code type (ICD-10-CM, SNOMED, LOINC, RXNorm), 
            this mode returns both the code and the code parameter data. The code will have the suffix (“!”) character added 
            followed by the character "P" and will be delimited from the code parameter data using a newline character.
            The table is returned as a single string with each record delimited using a newline character and each field within
            a record delimited by a tab character. The field layout is:
              <c>'lower\tupper\tfemval1\tmalval1\tfemval2\tmalval2\tcoderes'</c>.</description></item>
            <item><term>128</term><description>Retrieves the code hint for the codeset of the Medcinid. 
            If no codehint is available, an empty string is returned. If the code hint has code references, the hinted codes 
            are parsed to the unique codes identified. An encoded string is returned that lists each code along with its code 
            classification description, as well as all Medcin findings that are mapped to each of the codes. 
            The list is a newline delimited set of records with each record having tab delimited fields. 
            A record contains an id field followed by a code field followed by a description field. 
            If the id field is 0, the record is a code record; the code field contains the code and the description field 
            contains the code classification description. If Medcin findings that have valid billing codes are mapped to the code, 
            then these records follow. The finding records contain the Medcinid in the id field, 
            the nodekey of the finding in the code field, and the search description of the finding in the description field.
            <para>For ICD-10-CM hints, use the ExpandCodeHint API</para></description></item>
            <item><term>384</term><description>Performs the same operation as mode 128; however, each finding description 
            has the mapped code appended to the text with a tilde delimiter.</description></item>
            <item><term>All other values</term><description>Same as Mode=0.</description></item>
            </list>
            </p>
            <para><b>Expanded Code Mapping Data</b></para>
            <para>The following code types have extended mapping data: ICD10-CM, LOINC, RXNORM, and SNOMED.  The extended mapping data is as follows:</para>
            <para><list type="bullet">
            <item><b>Mapset:</b> this number designates one or more records of the same code year and code type are grouped together to constitute a map. 
            Where more than one record of a codeset is required for a map, each record will have the same mapset.</item>
            <item><b>Maptype:</b> this number indicates the type of mapping of the finding to the target code. A list of map type values can be found 
            in the CodeMapTypes table of the codelink.mdb database; the list is also available from the Medcin server using the QualifierList API using 
            "CODEMAPTYP" for the codename parameter. Although the code link’s CodeMapTypes table has code type as a data column, 
            the types are generally applicable to any code type; the code is particular to the code type listed. 
            This means that the SNOMED codes in the code column refer only to SNOMED maps – code type 3. 
            If other code types also use specific codes to designate a type of map, they will be added to that table. 
            Some common map types are: 1 = "same as", 2 = "broader than", 3 = "narrower than", 4 = "related to", and 7 = "causative agent".</item>
            <item><b>Prefflag:</b> this flag indicates a mapping preference. A value of 1 is preferred over a value of 0.</item>
            <item><b>Mapgroup:</b> this number designates one or more maps that are part of a group (if the number is &gt; 0). Mapset can be used in lieu of mapgroup</item>
            <item><b>Termtypeid:</b> this number identifies the type of the target code; this is used to identify the types of RXNORM (code type 31) 
            and SNOMED (codetype 3) mappings. The significant values appear in the following table:
            <list type="table"><listheader><term>TermTypeId</term><description>Code Type</description></listheader>
            <item><term>10</term><description>RxNorm Ingredients (IN)</description></item>
            <item><term>12</term><description>RxNorm Semantic Clinical Drug (SCD)</description></item>
            <item><term>13</term><description>RxNorm Semantic Clinical Drug Form (SCDF)</description></item>
            <item><term>59</term><description>RxNorm Semantic Branded Drug (SBD)</description></item>
            <item><term>63</term><description>RxNorm Generic Pack (GPCK)</description></item>
            <item><term>58</term><description>RxNorm Brand Name</description></item>
            <item><term>various</term><description>SNOMED </description></item></list></item>
            <item><b>Flags:</b> this data field contains bit flags that are particular to the code type. The following defines the bit usage for ICD10-CM (code type 5):
            <list type="table"><listheader><term>Bit</term><description>Use</description></listheader>
            <item><term>0</term><description>un-reportable if set</description></item>
            <item><term>1</term><description>Category if set</description></item>
            <item><term>2</term><description>manifest if set</description></item>
            <item><term>3</term><description>NEC if set</description></item>
            <item><term>4</term><description>Other if set</description></item>
            <item><term>5</term><description>Other specified if set</description></item>
            <item><term>6</term><description>Unspecified if set</description></item>
            <item><term>8</term><description>chronic if set</description></item>
            <item><term>12</term><description>if set, the code map has a code hint record (this duplicates the “!H” code suffix)</description></item>
            <item><term>13</term><description>if set, the code map has a parameter record set  (this duplicates the “!P” code suffix)</description></item>
            <item><term>14</term><description>if set, the code map has a code specification record (this duplicates the “!S” code suffix). 
            Note that when a code map has a code specific ation record, it is required that a user selects one item from each specification 
            list identified in the record in order to make the code reportable. Specification selections are used to designate specific characters 
            for digit positions in a code (e.g. 7th digit position characters A, D, or S designating “initial encounter”, “subsequent encounter”, or “sequelae”).</description></item>
            <item><term>15</term><description>If set, the ResponseItem for this finding represents a virtual finding.</description></item></list></item>
            <item><b>Rgid:</b> This field is currently used only for SNOMED codes to provide the extension code set identifier. 
            If non-zero, it indicates that the SNOMED code is a country-specific extension. 
            The extension code identifiers currently supported by the server are as follows: 1: United States</item>
            <item><b>Prefix:</b> if not empty, this designates a set of Medcin prefix qualifier values one of which is required to make the map valid. 
            For instance, "F" indicates that any of the family history prefixes would be required; "H" indicates that any of the history prefixes would be required; 
            "AL" indicates that any of the allergy prefixes would be required. See the tables below:
            <list type="table"><listheader><term>Prefix</term><description>Prefix Selections Validated for the Prefix Column</description></listheader>
            <item><term>F</term><description>F, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, FB, FC, FJ, FK, FL, FM</description></item>
            <item><term>H</term><description>H, HR, HU, PH</description></item>
            <item><term>AL</term><description>AL, IN, HY</description></item>
            <item><term>RI</term><description>RI, RM, RS</description></item>
            </list></item>
            <item><b>Modifier:</b> if not empty, this designates a Medcin modifier qualifier value which is required to make the map valid.</item>
            <item><b>Status:</b> if not empty, this designates a Medcin status qualifier value which is required to make the map valid.</item>
            <item><b>Result:</b> if not empty, this requires the mapped finding to be entered either positive or negative for the map to be valid. 
            "A" indicates positive entry, "N" indicates negative entry (be aware of reverse normal findings).</item>
            </list>
            </para>
            <para><b>Determining the Best Map</b></para>
            <para>For the code types that can have more than one map record per code type, an application may want to programmatically determine 
            the best map to use for a given situation. The CodeFromItem API attempts to do this using the instance data applicable. 
            When using the CodeFromMedcin API, an application will need to utilize the various properties of each map record and consider 
            the instance use case of the concept. The following information may be used to establish some rules that may be followed 
            to determine which map to use. This information is geared towards ICD-10-CM.</para>
            <para>If a single medcinid has many different codes attached to it, is there a way to identify the main or primary icd10 code?
            In the case of ICD-10-CM (as well as SNOMED) mappings, there are additional data fields that provide information on the map. 
            There are fields that are probably most useful for the determination:</para>
            <para><list type="table"><listheader><term>Property</term><description>Description</description></listheader>
            <item><term>Map Set</term><description>Unique identification of the records associated with a map</description></item>
            <item><term>Maptype</term><description>Type of map; see CodeMapTypes table.</description></item>
            <item><term>Prefflag</term><description>This field indicates the preference of the map; 1 is preferred over 0.</description></item>
            <item><term>Map Group</term><description>One or more map records form a complete map; however, the map group along with a qualifier forms a unique set. 
            It is easier just to use the “map set” property to delineate each “set” of maps.</description></item>
            <item><term>Prefix</term><description>A qualifier of the map that relates to the instance prefix. </description></item>
            <item><term>Result</term><description>A qualifier of the map that relates to an instanced result (positive/negative or abnormal/normal)</description></item>
            <item><term>Flags</term><description>Flag value is particular to the codetype; this is used for ICD10. Where the ICD-9-CM maps noted 
            "other specified", "not elsewhere coded", "category" code, etc., the ICD-10-CM maps use flag bit assignnments. Furthermore, 
            one bit assignment indicates whether or not the code is reportable.</description></item>
            </list></para>
            <para>The prefflag is supposed to indicate only the preferred map "record" within a map group (which means SNOMED and ICD10); 
            this property has no significance for RxNorm, LOINC, or other code types that have the additional mapping property information.  
            Code mappings are referred to as groups, where a group may have one or more code maps. The prefflag does not indicate which group is preferred. 
            The group number is supposed to indicate which group is the preferred group. So for SNOMED and ICD10, group 1 map records would form the best map, 
            followed by group 2, and so on. But, absent any grouping information, the maptype would then be looked at to find the best relationship, 
            with "Same as" preferred over the others. Absent a "Same As" map, the next best type would normally be a "Narrower Than" then maybe "Broader Than".</para>
            <para>A situation where you may find two maps in a group for ICD-10-CM would be in a compound term. 
            Take MedcinId 31162 "LARYNGITIS HAEMOPHILUS INFLUENZAE" for example; The ICD-10-CM mapping has a map group consisting of J04.0 (Acute laryngitis) 
            and B96.3 (Hemophilus influenzae [H. influenzae] as the cause of diseases classified elsewhere). Both code maps are in mapgroup 1. 
            The B96.3 map type is "causative agent"; the maptype of J04.0 is "narrower than". In the ICD-10-CM documentation from CMS, 
            the following coding hint for J04.0 appears: "Use additional code (B95-B97) to identify infectious agent". 
            Since the finding incorporates the clinical concept for the infectious agent, it is correct to have that as part of the ICD-10-CM map. 
            Consider that the SNOMED code 41048006 is "Haemophilus influenzae laryngitis (disorder)". And that code's map type for that mapping is "same as".</para>
            <para>To determine the best map for encounter entered concepts, one also has to take the other qualifiers into account. 
            For ICD-10, there will be a use for the prefix qualifier and the result qualifier. As an example, consider the Medcin 217241 "APPENDICEAL MALIGNANT CARCINOMA CYSTADENOCARCINOMA". 
            Although there are three maps with mapgroup 1, each combination of qualifiers forms a distinct group. Of the three maps, 
            one map has a blank prefix, another has a family history prefix (F), and the third has a history prefix (H). 
            This designates that the Z80.0 map is applicable only if the concept instance is entered with any one of the family history prefixes. 
            In our ICD-9-CM world, the equivalent would have been mapped to the ICD-F code type with a code of V16.0 mapped to that code type. 
            Similarly, the Z85.09 map is applicable only if the concept instance is entered with any of the history prefixes (history of, recurrent history of, or uncorroborated history of, etc.). 
            Considering the ICD-9-CM mappings, this would have been an ICD-H code type mapped to V10.09.</para>
            <para>To help in better recognition of what records belong to a particular mapping, the server and SQL data have a property referred to 
            as "map set". The map set property takes into account the associations of the qualifiers. Thus, for this finding example, 
            the ICD-10-CM code maps are as follows:</para>
            <list type="table"><listheader><term>Code</term><description>MS</description><description>MT</description><description>PF</description><description>MG</description><description>PX</description><description>R</description></listheader>
            <item><term>C18.1</term><description>1</description><description>NT</description><description>1</description><description>1</description><description>blank</description></item>
            <item><term>Z80.0</term><description>2</description><description>NT</description><description>1</description><description>1</description><description>F</description></item>
            <item><term>Z85.09</term><description>3</description><description>NT</description><description>1</description><description>1</description><description>H</description></item>
            </list>
            <para>If there were 2 maps making up a map group, they would each have the same map set property. Such is the case with MedcinId 31162:</para>
            <list type="table"><listheader><term>Code</term><description>MS</description><description>MT</description><description>PF</description><description>MG</description><description>PX</description><description>R</description></listheader>
            <item><term>J04.0</term><description>1</description><description>NT</description><description>1</description><description>1</description></item>
            <item><term>B96.3</term><description>1</description><description>CA</description><description>0</description><description>1</description></item>
            </list>
            <para>Result occurs in some concepts. Take MedcinId 81381, serum estrogen receptor assay:</para>
            <list type="table"><listheader><term>Code</term><description>MS</description><description>MT</description><description>PF</description><description>MG</description><description>PX</description><description>R</description></listheader>
            <item><term>Z17.0</term><description>1</description><description>SA</description><description>1</description>1<description></description><description> </description><description>A</description></item>
            <item><term>Z17.1</term><description>2</description><description>SA</description><description>1</description><description>1</description><description> </description><description>N</description></item>
            <item><term>Z17</term><description>3</description><description>SA</description><description>1</description><description>1</description><description>VR</description></item>
            </list>
            <para>If the finding instance is entered as an abnormal or positive, the ICD-10-CM code is Z17.0. But the code is Z17.1 if the concept is entered negative or normal. 
            And lastly, the code is Z17 if the concept is entered with a prefix of VR (visit for).</para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.CodeFromItem(System.Int32,Medicomp.CodeLinks,System.Int32)">
            <summary>
            This method obtains the code corresponding to the encounter finding identified by Itemid
            </summary>
            <param name="Itemid">The unique item identification for the encounter finding in question.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations. (Int32 for ActiveX)</param>
            <param name="Mode">Specifies the type of data returned. See table below.</param>
            <returns>The data corresponding to the CodeSet and Mode is returned for the Item.</returns>
            <remarks>This table enumerates the values supported for the Mode parameter:
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>80</term><description>If the code relating to CodeSet varies by parameter, the method will determine
             the code based on the CodeParm parameter values. If the code does not vary by parameter,
              then CodeFromMedcin(ItemId:Medcinid,CodeSet,0) will provide the string returned.</description></item>
            <item><term>All other values</term><description>If the CodeSet is ICD-10-CM, the API will determine a reportable code using the instance properties.
             For all other CodeSets, the API is identical to CodeFromMedcin(Itemid:Medcinid,CodeSet,Mode)
             using the Medcinid of the finding identified by the Itemid.</description></item>
            </list>
            </p>
            <para>Version 2.22 Specific Functionality</para>
            <para>If the server global option <c>cfuseprefix</c> is set to yes, the following is used to validate the instance data against the code mappings available 
            for the Medcin concept:</para>
            <list type="number">
            <item><description>If the instance prefix is any of the following, no code map is returned: order postponed, 
            order cancelled, rule out, no evidence of, no evidence of recurrence of, in remission, 
            do not administer, patient refused, avoid, or discontinue.</description></item>
            <item><description>If the CodeSet parameter is medCodeCVX or medCodeCVXH: if the instance prefix is a history prefix, 
            the CodeSet is set to medCodeCVXH and a code is returned only if there is a map for history; otherwise, a map is returned 
            only if the instance has an empty prefix.</description></item>
            <item><description>If the CodeSet is medCodeICD9 and the instance prefix is one of the history, family history, allergy, risk, 
            or visit for prefixes, no code is returned.</description></item>
            <item><description>If the CodeSet is LOINC or RXNORM and the instance prefix is one of the history, family history, allergy, risk, 
            or visit for prefixes which does not match the code map, no code is returned.</description></item>
            <item><description>If the CodeSet is SNOMED and the instance prefix is one of the history, allergy, risk, or visit for prefixes 
            which does not match the code map, no code is returned.</description></item>
            <item><description>If the CodeSet is SNOMED and the prefix is any one of the family history prefixes, 
            then a post-coordinated SNOMED user-form expression will be generated according to the following:</description></item></list>
            <list type="bullet">
            <item><description>If a pre-coordinated map exists with a Family History prefix, the SNOMED code from that map will be used in the expression;</description></item>
            <item><description>Otherwise, the SNOMED code from first SNOMED mapping that is found with either a "same as" or "narrower than" map type will be used in the expression.</description></item>
            <item><description>If no valid SNOMED code is found, the API will return an empty string.</description></item>
            <item><description>The Mode parameter will be ignored under this set of circumstances.</description></item>
            <item><description>A SNOMED expression for the 'maternal history of type 2 diabetes' would be returned as: 
            <c>'116680003\281666001\246090004\44054006\408732007\444301002' indicating: 'Is a; Family history of disorder; 
            Associated finding; Diabetes mellitus type 2; Subject relationship context; Mother of subject'</c>.</description></item>
            <item>This change has been instituted to accommodate the Meaningful Use stage 2 requirement in §170.314(a)(13) as follows: 
            <i>'…EHR technology must, at minimum, be capable of recording information about a patient’s first degree relative in the patient’s record.'</i></item></list>
            <para>If the Mode parameter is not 80 and the CodeSet parameter is ICD-10-CM, then the server will locate a reportable ICD-10-CM code 
            that would map to the finding instance data identified by the Itemid parameter. The procedure used is as follows for each potential 
            reportable ICD-10-CM code mapped to the underlying Medcinid of the instance:
            <list type="bullet">
            <item><description>If the map has a prefix requirement and the instance prefix does not match, that potential mapping is not considered.  
            See 'Prefix Selections Validated for the Prefix Column' in the table above for the list of prefixes that match a given map prefix requirement.</description></item>
            <item><description>If the map does not have a prefix requirement and the instance has a prefix that matches those prefixes used in maps, 
            that potential mapping is skipped.</description></item>
            <item><description>If the map has a result requirement and the result of the instance does not match, that potential mapping is skipped.</description></item>
            <item><description>Further examination of other properties will be incorporated when identified (modifier, status, chronic, etc.).</description></item>
            <item><description>If the map has a specification requirement and the instance does not, that potential mapping is skipped.</description></item>
            <item><description>If the map does not have a specification requirement and the instance has a specification, that potential mapping is skipped.</description></item>
            <item><description>If the map has a specification requirement and the instance has a specification that correctly resolves the code, 
            the resolved code is returned; otherwise that potential mapping is skipped</description></item>
            <item><description>If the map has not been skipped, the code of that map is returned.</description></item>
            <item><description>If no reportable map is found, an empty string is returned (this is the condition currently used when a code is requested and none are mapped).</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistCodeFromItem(System.Int32,Medicomp.CodeLinks,System.Int32)">
            <summary>
            This method obtains the code corresponding to the encounter finding identified by Itemid
            </summary>
            <param name="seq">The unique item identification for the encounter finding in question.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations.</param>
            <param name="Mode">Specifies the type of data returned. See table below.</param>
            <returns>The data corresponding to the CodeSet and Mode is returned for the Item.</returns>
            <remarks>This table enumerates the values supported for the Mode parameter:
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>80</term><description>If the code relating to CodeSet varies by parameter, the method will determine
             the code based on the CodeParm parameter values. If the code does not vary by parameter,
              then CodeFromMedcin(ItemId:Medcinid,CodeSet,0) will provide the string returned.</description></item>
            <item><term>All other values</term><description>Identical to CodeFromMedcin(Itemid:Medcinid,CodeSet,Mode)
             using the Medcinid of the finding identified by the Itemid.</description></item>
            </list>
            </p></remarks>
        </member>
        <member name="M:Medicomp.Connection.CodeFromParms(System.Int32,System.Int32,Medicomp.CodeLinks,System.Int32,System.String,System.String,System.String)">
            <summary>
            This method obtains the code corresponding to the finding identified by Medcinid and parameters
            </summary>
            <param name="Age">The patient's age in minutes.</param>
            <param name="Medcinid">The identifier of the Medcin finding.</param>
            <param name="CodeSet">One of the <see cref="T:Medicomp.CodeLinks">CodeSet</see> enumerations. (Int32 for ActiveX)</param>
            <param name="Mode">Specifies the type of data returned. See table below.</param>
            <param name="Value">The value of the finding to determine the code.</param>
            <param name="Gender">One of the gender qualifications: M, F, or U.</param>
            <param name="PosNeg">A 1-character string, as required, containing 'a' or 'A' indicating positive, or 'n' or 'N' indicating negative.</param>
            <returns>The code calculated from the parameters is returned.</returns>
            <remarks>This table enumerates the values supported for the Mode parameter:
            <p>
            <list type="table">
            <listheader><term>Mode</term><description>Type of data returned</description></listheader>
            <item><term>64</term><description>For V22, this mode can be used to obtain a complete ICD-10-CM code given a Medcinid, 
            a base code string, and a code specification string. For this feature, pass the parameters as follows:
            <list type="bullet">
            <item>Age: ignored</item>
            <item>Medcinid: the Medcinid of the finding with the base code map</item>
            <item>Codeset: Only CodeLinks.medCodeICD10CM is supported</item>
            <item>Mode: 64</item>
            <item>Value: the base code (ex: “S41.0”)</item>
            <item>Gender: ignored</item>
            <item>PosNeg: the specification string (ex: "5;90;26;3")</item>
            </list>Using the example values, the API should return "S41.032D".</description></item>
            <item><term>80</term><description>If the code relating to CodeSet varies by parameter, the method will determine
             the code based on the CodeParm parameter values. If the code does not vary by parameter,
             then CodeFromMedcin(ItemId:Medcinid,CodeSet,0) will provide the string returned.</description></item>
            <item><term>All other values</term><description>Identical to CodeFromMedcin(Itemid:Medcinid,CodeSet,Mode)
             using the Medcinid of the finding identified by the Itemid.</description></item>
            </list>
            </p></remarks>
        </member>
        <member name="M:Medicomp.Connection.SetCodeDate(System.String)">
            <summary>
            Codes are available based on their effective validity by date. The server maintains the effective 
            dates on a system basis. This SetCodeDate method can be called by a client to change the current 
            code date for that client connection.
            </summary>
            <param name="CodeDate">CodeDate is passed in Medcin date string format ('YYYYMMDD'). To reset the 
            connection’s code date to the sytem date, pass an empty string as the CodeDate.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetAlertLookBackPeriod(System.String)">
            <summary>
            This API is used to set the history time period for alert evaluation
            </summary>
            <param name="Duration">The time period in duration format. The format is the string form 
            of a numeric value followed by a precision character: 'Y' for years, 'M' for months, 
            'W' for weeks, 'D' for days, 'H' for hours, 'I' for minutes, 'S' for seconds. 
            For example, '3W' is interpreted as three weeks, '7M' is interpreted as seven months, 
            '10567I' is interpreted as ten thousand, five hundred sixty seven minutes. 
            The string is limited to a maximum of 9 digits plus the precision character for a total 
            string length of 10 characters.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>The look back period is referenced against the most recent encounter time of an 
            encounter added to the history pool using the HistAddEncounter API. Once the look back period is set, 
            CheckAlert will ignore any history pool finding with an encounter time earlier than the most 
            recent time less the look back period. The look back period can be overridden when calling 
            CheckAlert by setting the medIgnoreLookBack flag bit.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetAlertSuppression(System.String)">
            <summary>
            This is used to provide suppression of a particular alert.
            </summary>
            <param name="Suppress">To be announced.</param>
            <returns>Returns True if successful; False otherwise.</returns>
            <remarks>
            Users generally need the ability to “suppress this alert for me for this patient”. 
            Suppression is based on the initiating and discovered finding pair. This is needed 
            when a provider decides that a given plan of treatment is necessary in spite of the alert, 
            and does not want to be interrupted by the alert mechanism every time alert checking is performed.
            <para>
            This API is used to provide the server with suppression data concerning the particular alerts to suppress. 
            An alert is identified by a pair of findings: the initiating finding and the discovered finding. 
            This data is structured as a string using the syntax, “FI,FD”, where “FI” indicates the initiating finding Medcinid 
            and “FD” indicates the discovered finding Medcinid. A list of suppressed alerts is assembled into a single string by 
            delimiting each record with a Tab character. The following shows an example of a list that identifies two records.
            </para>
            <para><c>40515,40460&lt;Tab&gt; 40460,78708</c></para>
            <para>
            It is the responsibility of the application to persist data that identifies the alerts suppressed by a specific 
            provider for a specific patient. Thus when a patient is selected or a change in the provider occurs, 
            the application should obtain the list of suppressed alerts for that patient and provider, 
            assemble them into a formatted string, and pass the string to the server using this API. 
            The passed data will replace any suppression records currently held by the server for the connection.
            </para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.Cgn(System.Int32)">
            <summary>
            This method obtains the body system code group number for the specified finding.
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The body system code group number is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.Tgn(System.Int32)">
            <summary>
            This method is used to obtain the title group number assigned to a finding.
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The assigned title group number is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.BaseGroup(System.Int32)">
            <summary>
            This is used to obtain the base narrative group for a finding.
            </summary>
            <param name="Medcinid">The unique Medcin identification for the finding in question.</param>
            <returns>The narrative group default for the finding.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetItemData(System.Int32,System.String)">
            <summary>
            This method can be used to retrieve a string that contains the field data 
            passed to the server using the various data add functions for an item. 
            </summary>
            <param name="itemid">The 'Itemid' parameter specifies the itemid that was 
            used to identify the item in the various add functions. If the itemid 
            passed is not present, an empty string is returned.</param>
            <param name="fields">The 'Fields' parameter specifies the data elements 
            that are to be returned; only those elements specified in the argument 
            will be returned and their appearance in the string will be in the order 
            of the characters specified in the fields argument. Data elements in the 
            returned string are separated with tabs. Fields will only be present 
            if they contain data.
            <list type="table">
            <listheader><term>Element Character</term><description>Element Description</description></listheader>
            <item><term>a</term><description>status</description></item>
            <item><term>B</term><description>Enter doc</description></item>
            <item><term>b</term><description>referred to doc</description></item>
            <item><term>c</term><description>chartflag</description></item>
            <item><term>d</term><description>duration</description></item>
            <item><term>e</term><description>encountertime</description></item>
            <item><term>G</term><description>string tag</description></item>
            <item><term>i</term><description>Medcinid</description></item>
            <item><term>k</term><description>episode</description></item>
            <item><term>l</term><description>history range scale</description></item>
            <item><term>m</term><description>modifier</description></item>
            <item><term>n</term><description>note</description></item>
            <item><term>o</term><description>onset</description></item>
            <item><term>p</term><description>prefix</description></item>
            <item><term>P</term><description>hostory narrative group</description></item>
            <item><term>r</term><description>= Rx string</description></item>
            <item><term>t</term><description>result</description></item>
            <item><term>u</term><description>unit of measure</description></item>
            <item><term>v</term><description>value string</description></item>
            <item><term>y</term><description>range normal low</description></item>
            <item><term>z</term><description>range normal high</description></item>
            </list></param>
            <returns>Returns the field data passed to the server using the various data add functions for an item.</returns>
            <remarks>A sample returned string follows using '^t' to indicate a tab:
            <para>i=20905^tp=O^te=200402031440^tv=^tu=mg/100ml^tm= ^tt= a= ^tb=0^tc=0^ty=0^tz=0^t^tB=1</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.ScreenForCodes(System.String)">
            <summary>
            Screens the current encounter for findings with codes.
            </summary>
            <param name="CodeSets">one or more Medicomp.CodeLinks codes in a comma-delimited string</param>
            <returns>Returns a delimited list containing Itemid,CodeLink,Code for all findings with codes.</returns>
            <remarks><para>Each set of Itemid and codes is delimited with a newline character. Each field of a set
            is delimited using a tab character. If an Itemid has more than one code applicable to the CodeSets
            requested, then each CodeSet and Code pair is part of the tab-delimited set.</para>
            <para>If ICD_H is in the CodeSets request, it will be included only if a finding has the 'history of'
            prefix. The ICD_F code is similarly treated.</para>
            <para>When a code varies by parameter, such as ICD-9-CM V85 or ICD-10-CM Z68, the function will calculate the code based on
            the patient’s gender and age, and on the encounter item’s value.</para>
            <para>For ICD-10-CM codes, the API will provide a code only if a reportable code can be determined from the instance properties.</para>
            <para><example>This illustrates using the method to get code mappings:
            <code> 
             private void screenForCodesToolStripMenuItem_Click(object sender, EventArgs e)
             {
               String codes = Medconn.ScreenForCodes("3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,25,27,31,32,33,36");
               String[] codesets = codes.Split('\n');
               if (codesets.Length > 0)
               {
                   System.Text.StringBuilder sb = new StringBuilder();
                   for (int index = 0; index &lt; codesets.Length; index++)
                   {
                       sb.Append(codesets[index]);
                       sb.Append("\r\n");
                   }
                   txtProperties.Text = sb.ToString();
                   tbcViews.SelectedIndex = 4;
               }
             }
            </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddSequence(System.Int32,System.Int16)">
            <summary>
            This method is used to add a presentation sequence to a finding previously added to the finding collection. 
            Presentation sequencing is supported only for findings in the Assessment narrative group. 
            </summary>
            <param name="Itemid">Designates the finding in the encounter.</param>
            <param name="Sequence">The sequence number to apply for display presentation: 1, 2, 3, etc. 
            Set to 0 for normal default sequencing. It is not necessary to call this method with a Sequence equal to 0 
            if your application has not previously set the sequence to a non-zero value.</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
        </member>
        <member name="M:Medicomp.Connection.AddSequenceEx(System.String)">
            <summary>
            Used to add a sequence number for a list of findings
            </summary>
            <param name="Sequences">The comma delimited list using Itemid1,Sequence1,Itemid2,Sequence2, etc.</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
        </member>
        <member name="M:Medicomp.Connection.GetSequence(System.Int32)">
            <summary>
            Returns the sequence of the designated finding assigned by the application
            </summary>
            <param name="Itemid">The designated finding in the encounter.</param>
            <returns>The assigned sequence of the designated finding is returned.</returns>
            <remarks>Presentation sequencing is supported only for findings in the Assessment narrative group.</remarks>
        </member>
        <member name="M:Medicomp.Connection.SetRtfStyles(System.String)">
             <summary>
             This can be used for setting all RtfStyle properties in a single method to reduce socket traffic.
             </summary>
             <param name="Styles">This is a string that contains a concatenation of all
             rtf styles. Delimit each parameter of a style with a Tab character (VbTab, 9d, \t) and delimit 
             each style set with a newline character (VbLf, 10d, '\n').</param>
             <returns>Returns True if a connection is active; otherwise False.</returns>
             <remarks>Parameters are in string format and need to be in the following sequence:
             element ^T font ^T color ^T size ^T attributes ^T style ^T tabstops ^T indentLevel.
             Spaces are shown here for readability only.
             <para>Make sure you do not use ToString() on enumeration parameters.</para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.SetParagraphStyles(System.String)">
            <summary>
            This can be used for setting all paragraph style properties in a single method to reduce socket traffic.
            </summary>
            <param name="Styles">This is a string that contains a concatenation of all
            paragraph styles delineated using a newline character (VbLf, 10d, '\n').</param>
            <returns>Returns True if a connection is active; otherwise False.</returns>
            <remarks>Delineate each parameter of a style using a Tab character (VbTab, 9d, '\t').
            Parameters are in string format and need to be in the following sequence:
            style ^T marginTop ^T marginLeft ^T marginRight ^T indent ^T alignment ^T borderWidth 
            ^T borderColor ^T borderFrame ^T borderSpacing. Spaces are shown here for readability only.
            <para>Make sure you do not use ToString() on enumeration parameters.</para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.AddChapter(System.Int32,System.Int16)">
            <summary>
            Method is used to add/edit/remove a chapter number for a finding
            </summary>
            <param name="Itemid">This number should be one of the values 
            previously returned by AddNarrate</param>
            <param name="Chapter">The zero-based chapter number to assign.</param>
            <returns>False is returned if an error is detected.</returns>
            <remarks>
            This method allows the chapter property of the designated finding to be set 
            independently of the current chapter setting. You can divide a single 
            encounter into various chapters by assigning chapter numbers. The chapter 
            number is the primary field for ordering the encounter chart records.
            <para>The chapter number is an integer value; the first chapter is numbered 0. 
            Unless chapters are assigned, all findings added to the encounter are assigned 
            to chapter 0. Thus, your application does not have to use chapters. 
            The chapter number number is assigned automatically when a finding is newly 
            added to the encounter via AddNarrate or AddNarrateEx. The chapter number 
            applied is established by the application using the SetChapter API. You can 
            change the chapter value for a designated finding by using this AddChapter API. 
            See SetChapter for more details.</para></remarks>
            <seealso cref="M:Medicomp.Connection.SetChapter(System.Int16)"/>
            <seealso cref="M:Medicomp.Connection.AddEncounterHeadings(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:Medicomp.Connection.SetChapter(System.Int16)">
            <summary>
            This method is used to establish the current chapter number
            assigned automatically when adding new findings using
            AddNarrate or AddNarrateEx.
            </summary>
            <param name="Chapter">The zero-based chapter number to set.</param>
            <returns>If an error is encountered, False is returned.</returns>
            <remarks>This method establishes the current chapter number that will be 
            automatically applied to any new finding subsequently added to the narration 
            encounter. The chapter property is the highest sort field for ordering the 
            encounter findings for presentation. You can divide a single encounter into 
            various chapters by assigning chapter numbers.
            <para>The chapter number number is assigned automatically when a finding is newly 
            added to the encounter via AddNarrate or AddNarrateEx. You can change the 
            chapter value for a designated finding by using the AddChapter API.</para>
            <para>The chapter number is a short value; the first chapter is numbered 0. 
            Unless chapters are assigned, all findings added to the encounter are assigned 
            to chapter 0. 
            <para>An optional header can be emitted when the encounter has more 
            than one chapter; it is emitted using the header element style. The header is 
            enabled using the NarrateOptions API. When emitted, the header is derived from 
            message string number 55 (MSG_CHAPTER). The string defaults to 'Chapter #', 
            but it can be changed by using the MessageString API. All characters in the 
            string are emitted verbatim except for two special characters, '#' and '$'. 
            A number sign character will be converted to one plus the current chapter 
            number (0 becomes 1, 1 becomes 2, etc.). A dollar sign character will be 
            converted to one plus the current chapter number emitted as a word when the 
            result is in the range 1-12 (One, Two, etc). A chapter number outside that 
            range will be emitted as if the character were '#'. This results in a 
            consistant description enumerated for each chapter.</para>
            If your application needs to use a distinct heading for each chapter,
            you can use the AddEncounterHeadings API to pass a delimited string that 
            contains the heading for each chapter.</para>
            <para>The current chapter number established using SetChapter is automatically 
            reset to 0 when a ClearNarrative API is called. If your application makes use 
            of chapter numbering and you maintain the chapter number, make sure you reset 
            your number to 0 when you call the ClearNarrative API.</para>
            <para>The chapter number passed in the SetChapter API is not used when narrating 
            history encounters uing HistNarrate. A history narration will use chapter 
            numbers as established with the HistAddChapter API.</para></remarks>
            <seealso cref="M:Medicomp.Connection.AddEncounterHeadings(System.String,System.Int32,System.String)"/>
            <seealso cref="M:Medicomp.Connection.AddChapter(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Medicomp.Connection.HistAddChapter(System.Int32,System.Int16)">
            <summary>
            [packet] Method equivalent to AddChapter for history pool finding additions.
            </summary>
            <param name="Seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="Chapter">The zero-based chapter number to assign.</param>
            <returns>False will be returned if an error is encountered.</returns>
        </member>
        <member name="M:Medicomp.Connection.ImageSearch(System.String,System.String)">
            <summary>
            This method returns a list of imageids that match the keywords.
            </summary>
            <param name="Keywords">One or more key words to be interpreted as an image 
            description matching any of the words passed.</param>
            <param name="Systems">A comma delimited list of image systems to limit the search. 
            An empty string implies a search of all image systems.</param>
            <returns>A comma-delimited list of image numbers is returned.</returns>
            <remarks>
            This method returns the identification number for each image where any of 
            the keywords match a word of the image description; the patient's age and 
            gender are used to determine appropriateness of each image. The search can 
            be limited to those image systems passed as a comma-delimited string in the 
            Systems argument. If the Systems argument is an empty string, then all systems 
            will be searched. The patient’s age and gender are determined from the last 
            SetPatient API call.
            <para>The list of images is returned as a comma-delimited string containing 
            each image number that is successfully matched by any of the words in Keywords. 
            The search algorithm uses a case-insensitive match of a keyword to each word 
            in an image description; word completion is used when the keyword is shorter 
            than an image description word. If no images match the keywords, an empty 
            string is returned.</para>
            <example>Illustrates a word search for images
            <code>
            public void InvokeImageSearch()
            {
               try
               {
                   lstImage.Items.Clear();
                   // Have server search for images matching the key words
                   string list = Medconn.ImageSearch(tsSearch.Text, "");
                   if (list.Length == 0)
                   {
                       MessageBox.Show("No images match your key words string");
                       return;
                   }
                   // Split the comma-delimited list into ImageIDs
                   string[] items = list.Split(',');
                   for (int i = 0; i &lt; items.Length; ++i)
                   {
                       int ImageID = Convert.ToInt32(items[i]);
                       // Get the image properties to obtain the image description
                       // and add the properties to the list
                       lstImage.Items.Add(new ImageReference(ImageID, Medconn.GetImageProperties(ImageID)));
                   }
                   tbcViews.SelectedIndex = 2;
               }
               catch (Exception ex)
               {
                   MessageBox.Show(ex.Message);
               }
            }
            </code></example>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.GetImageProperties(System.Int32)">
             <summary>
             This method returns the image properties of the targeted image
             </summary>
             <param name="ImageId">This is the id of the image for which you want the properties.</param>
             <returns>The image properties in a tab delimited string.</returns>
             <remarks>The properties are returned in the following order:
             <para><c>system\tregion\tview\tattributes\tage\tsex\thot spot length\tsearch description</c></para>
             <example>Illustrates retrieval of all properties for an image:
             <code>
             internal class ImageReference
             {
                private enum ImgSys
                {
                    Skin = 1, Respiratory = 2, Cardiovascular = 3, Breasts = 4, Lymphatic = 5,
                    Gastrointestinal = 6, Urologic = 7, Genital = 8, Endocrine = 9, Muscle = 10,
                    Skeletal = 11, Neurologic = 12, Eye = 13, Ear = 14, Oral_Cavity = 15
                }
                private enum ImgReg
                {
                    FullBody = 1, Head_Neck = 2, Trunk = 3, Upper_Extremities = 4, Lower_Extremities = 5,
                    Hands = 6, Feet = 7
                }
                private enum ImgView
                {
                    Front = 1, Back = 2, Medial = 3, Left = 4, Right = 5,
                    Top = 6, Bottom = 7, Anterior = 8, Posterior = 9, Cross_Section_Left = 10,
                    Cross_section_right = 11, Reserved1 = 12, Reserved2 = 13, Reserved3 = 14, Misc_1 = 15,
                    Misc_2 = 16, Misc_3 = 17
                }
                private enum ImgAtt
                {
                    Combined_or_Normal = 0, Left_Body_Part_Only = 1, Right_Body_Part_Only = 2
                }
                private string myDescription;
                private int myID;
                private short myAge, mySex, myHSL;
                private ImgSys mySystem;
                private ImgReg myRegion;
                private ImgView myView;
                private ImgAtt myAttributes;
                public ImageReference(int id, string pData)
                {
                    // system\tregion\tview\tattributes\tage\tsex\thot spot length\tsearch description
                    string[] props = pData.Split('\t');
                    try
                    {
                        myID = id;
                        mySystem=(ImgSys)(Convert.ToInt16(props[0]));
                        myRegion = (ImgReg)(Convert.ToInt16(props[1]));
                        myView = (ImgView)(Convert.ToInt16(props[2]));
                        myAttributes = (ImgAtt)(Convert.ToInt16(props[3]));
                        myAge = Convert.ToInt16(props[4]);
                        mySex = Convert.ToInt16(props[5]);
                        myHSL = Convert.ToInt16(props[6]);
                        myDescription = props[7];
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
                public override string ToString()
                {
                    return myDescription;
                }
                public int ImageID {  get { return myID; } }
                public string System { get { return Enum.Format(typeof(ImageReference.ImgSys), mySystem, "G"); } }
                public string Region { get { return Enum.Format(typeof(ImageReference.ImgReg), myRegion, "G"); } }
                public string View { get { return Enum.Format(typeof(ImageReference.ImgView), myView, "G"); } }
                public string Attributes { get { return Enum.Format(typeof(ImageReference.ImgAtt), myAttributes, "G"); } }
                public short Age { get { return myAge; } }
                public short Sex { get { return mySex; } }
             }
             public void InvokeImageSearch()
             {
                try
                {
                    lstImage.Items.Clear();
                    // Have server search for images matching the key words
                    string list = Medconn.ImageSearch(tsSearch.Text, "");
                    if (list.Length == 0)
                    {
                        MessageBox.Show("No images match your key words string");
                        return;
                    }
                    // Split the comma-delimited list into ImageIDs
                    string[] items = list.Split(',');
                    for (int i = 0; i &lt; items.Length; ++i)
                    {
                        int ImageID = Convert.ToInt32(items[i]);
                        // Get the image properties to obtain the image description
                        // and add the properties to the list
                        lstImage.Items.Add(new ImageReference(ImageID, Medconn.GetImageProperties(ImageID)));
                    }
                    tbcViews.SelectedIndex = 2;
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
             </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetSubGroup(System.Int32)">
            <summary>
            This method returns the narrative subgroup number of the encounter finding.
            </summary>
            <param name="itemid">The identification number assigned to the finding by your application.</param>
            <returns>The subGroup number (the body system code group) is returned, if non-zero.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistAddRangeScale(System.Int32,System.Int16)">
            <summary>
            [packet] This method is used to add the RangeScale for a value to the specified history pool record.
            </summary>
            <param name="seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="scale">The scale field is usually calculated using the function CalcScale.</param>
            <returns>False will be returned if an error is encountered.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistGetGroupNumber(System.Int32)">
            <summary>
            This method is used to recover the narrative group number assigned to the history pool record.
            </summary>
            <param name="seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <returns>The narrative group number assigned to the history pool record is returned. This will be 0 if an error is encountered.</returns>
        </member>
        <member name="M:Medicomp.Connection.FormatDate(System.String,System.String)">
            <summary>
            This function can be used to obtain the presentation format of a date and time passed
            in Medcin date format using the preference established for the precision of the date passed,
            or the coded format passed. 
            </summary>
            <param name="date">This is the date and time for which you wish to obtain the presentation display. 
            The date must be passed in Medcin date format: ('YYYYMMDDHHIISS', or 'YYYYWWW', 
            or some variation thereof to indicate the precision of the date and time) </param>
            <param name="format">If this is passed as an empty string, the current preference for the date precision will be used. 
            If you wish to use a custom format, adhere to the syntax of date and time formats as discussed under the SetTimeFormat API</param>
            <returns>The presentation format of the date passed is returned.</returns>
        </member>
        <member name="M:Medicomp.Connection.HistGridLayout(Medicomp.GridLayoutMode,Medicomp.DatePrecisions,Medicomp.SortOrder,System.String)">
            <summary>
            This method is used to pass Grid Layout parameters that control the spreadsheet build list mode.
            </summary>
            <param name="Mode">Ored enumeration indicating what parameters have values passed.
            The server will ignore any parameter without its associated bit set. (enumGridLayoutMode for ActiveX and Int32 for Java)</param>
            <param name="Precision">This parameter indicates the precision of a column of data.
            All encounters with an encounter time that matches up to the precision will be included 
            in the same column. The server defauls to medPrecisionMinute on a new connection. (enumDatePrecision for ActiveX)</param>
            <param name="DateOrder">This specifies the column order for historical data. 
            The server defaults to SortDescending on a new connection. (enumSortOrder for ActiveX)</param>
            <param name="EncounterTime">This parameter is currently unused.</param>
            <returns>False will be returned if an error is encountered.</returns>
            <remarks>The parameters that are passed remain in effect until changed.
            <para><example>This illustrates setting the precision of the flow sheet columns
            <code>
            public void SetColumnPrecision(Medicomp.DatePrecisions Precision)
            {
               static bool Changing = false;
               if (Changing)
                   return;  // To guard against re-entrancy
               switch (Precision) {
                   case DatePrecisions.medPrecisionDay:
                   case DatePrecisions.medPrecisionHour:
                   case DatePrecisions.medPrecisionMinute:
                   case DatePrecisions.medPrecisionMonth:
                   case DatePrecisions.medPrecisionWeek:
                   case DatePrecisions.medPrecisionYear:
                    break;
                   // We support only these precisions
                   default:
                    // May want to provide a message that the precision is unsupported
                    throw new ArgumentException("That precision is not supported");
                    return;
               }
               try {
                   myColumnPrecision = Precision;
                   SetColumnPrecisionMenu(myColumnPrecision);
                   MedClient.HistGridLayout(GridLayoutMode.medGlmPrecision, myColumnPrecision, 0, "");
                   // Reinvoke the flow sheet
                   RegenerateFlowSheet();
                   SetStatusInfo();
                   Changing = true;
                   if (ColumnPrecisionChanged != null) {
                    ColumnPrecisionChanged(this, new ColumnPrecisionChangedEventArgs(myColumnPrecision));
                   }
                   Changing = false;
               } catch (Exception ex) {
                   PostError(ex);
               }
            }
            </code></example></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistDataFilter(Medicomp.DataFilterMode,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method is used to pass parameters to filter history pool data extraction.
            </summary>
            <param name="Mode">Ored enumeration indicating what parameters have values passed.
            The server will ignore any parameter without its associated bit set. (enumDataFilterMode for ActiveX and Int32 for Java)</param>
            <param name="Mask">A value to mask each history pool item's usermask value.
            The usermask value will be anded with the mask value; if the result is non-zero,
            the history pool item will be extracted.</param>
            <param name="DateFrom">The earliest date to extract data. If not empty, an item's
            encounter time must be greater than or equal to this date. If the argument is an empty string, there will be no limit of early data. 
            For instance, if the DateFm time is “1990”, then all history from 12/31/1989 and earlier will not be part of the result set</param>
            <param name="DateTo">The latest date to extract data. If not empty, an item's
            encounter time must be less than or equal to this date. If the argument is an empty string, there will be no limit of early data.</param>
            <param name="TimeFrom">The earliest time to extract data. If not empty, an item's
            time portion of the encounter time must be greater than or equal to this time. If the argument is an empty string, 
            then there all history records up to the TimeTo are considered</param>
            <param name="TimeTo">The latest time to extract data. If not empty, an item's
            time portion of the encounter time must be less than or equal to this time. If the argument is an empty string, 
            then there all history records with a time greater than or equal to TimeFm are considered.</param>
            <returns>False will be returned if an error is encountered.</returns>
            <remarks>The parameters that are passed remain in effect until changed.
            Dates are passed in Medcin date format (YYYYMMDDHHIISS). Times are pased in 
            Medcin time format (HHIISS). Note that the Date and Time arguments are both considered during history pool data extraction. 
            Thus, old data can be excluded simultaneously while limiting the time of day.
            <para>The "free text finding" options allow the addition of free text findings to history prompting lists other than a custom 
            flow sheet (a custom HistList). This option ensure that history free text findings that otherwise pass the data filtering will 
            be included in the result set. You can include either the narrative free text findings (the finding(s) assigned to each 
            narrative group, or the mapped findings noted above, or both sets.</para>
            <para>The results flags can be used to include in the resulting list, findings that are related by the ordered (see HistAddOrderid 
            and HistRetrieveOrderid for information on the orderid data element). There are two flags that are honored if the medDfmResults flag is set.
            <list type="bullet">
            <item>If the medDfmAddOrderResults is set, then for all history findings with an "ordered" prefix that are included in the resulting list, 
            any history finding that has a matching ordered will also be included in the list. This flag is useful if you want to ensure that all 
            results that match up with orders appear in the list retrieved.</item>
            <item>If the medDfmAddResultSet is set, then for all findings included in the list that also have am ordered, all other findings with 
            that same ordered are included in the resulting list. This flag is useful if you want to ensure that an entire order set is retrieved 
            if any finding in the set is retrieved. Note that the finding with the "ordered" prefix is part of the set, so it is not necessary 
            to set the medDfmAddOrderResults flag if the medDfmAddResultSet is set.</item></list></para>
            <p>Data filters apply only to HistList and history prompting methods.</p>
            <example>This example illustrates passing data filtering parameters
            <code>
            public void SetDataFilter(Medicomp.DataFilterMode Mode, int Mask, string DateFrom, string DateTo, string TimeFrom, string TimeTo)
            {
               try {
                   if (((Mode &amp; DataFilterMode.medDfmDateFm) != 0))
                    mstrDateFm = DateFrom;
                   if (((Mode &amp; DataFilterMode.medDfmDateTo) != 0))
                    mstrDateTo = DateTo;
                   if (((Mode &amp; DataFilterMode.medDfmTimeFm) != 0))
                    mstrTimeFm = TimeFrom;
                   if (((Mode &amp; DataFilterMode.medDfmTimeTo) != 0))
                    mstrTimeTo = TimeTo;
                   HeaderMenu.MenuItems(HMENU_FREETEXT).Checked = ((Mode &amp; DataFilterMode.medDfmFreeText) != 0);
                   HeaderMenu.MenuItems(HMENU_ORDERRESULTS).Checked = ((Mode &amp; DataFilterMode.medDfmAddOrderResults) != 0);
                   HeaderMenu.MenuItems(HMENU_RESULTSET).Checked = ((Mode &amp; DataFilterMode.medDfmAddResultSet) != 0);
                   MedClient.HistDataFilter(Mode, 0, mstrDateFm, mstrDateTo, mstrTimeFm, mstrTimeTo);
                   RegenerateFlowSheet();
                   SetStatusInfo();
               } catch (Exception ex) {
                   PostError(ex);
               }
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddSequence(System.Int32,System.Int16)">
            <summary>
            [packet] This method is used to add a sequence number to an encounter finding in the history pool
            </summary>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="Sequence">The sequence number to add.</param>
            <returns></returns>
        </member>
        <member name="M:Medicomp.Connection.HistAddSpecifier(System.Int32,System.String)">
            <summary>
            [packet] This method is used to add a specifier string to an encounter finding in the history pool.
            </summary>
            <param name="Seq">The Seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="Specifier">The semicolon delimited list of codespec lists.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>A codespec list is a comma-delimited list of codes. The specifier property 
            can contain more than one list of codes, with each list delimited 
            using a semicolon. The specifier starts with a field indicating the codetype 
            of the code used to obtain the lists (ex: 23;A,B,D;AB,C,DA). The specifier is used in
            conjunction with a DSM-IV code to add additional uncoded textual content to 
            commonly used in a finding's narration. The lists would be in sequence with 
            a corresponding codespec record for the DSM-IV code in question.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddSpecifier(System.Int32,System.String)">
            <summary>
            This method is used to add a specifier string to an encounter finding.
            </summary>
            <param name="Itemid">The identification number assigned to the finding by your application.</param>
            <param name="Specifier">The semicolon delimited list of codespec lists.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>A codespec list is a comma-delimited list of codes. The specifier property 
            can contain more than one list of codes, with each list delimited 
            using a semicolon. The specifier starts with a field indicating the codetype 
            of the code used to obtain the lists (ex: 23;A,B,D;AB,C,DA). The specifier is used in
            conjunction with a DSM-IV code to add additional uncoded textual content to 
            commonly used in a finding's narration. The lists would be in sequence with 
            a corresponding codespec record for the DSM-IV code in question.
            <para>The version 2.22 server accepts ICD10-CM specification codes in addition to DSM. 
            The specifier parameter supports the following syntax: "codeset;comma-delimited codes[;repeated lists]". 
            To pass the specification codes associated with more than one codeset, use a pipe-delimiter ("|") 
            to separate each specification substring.</para>
            <para>The ICD10-CM specification string syntax is: "<c neededfor="ruby">5;typeid1[;typeid2[;typeid3]]</c>"; the "5" is the ICD10-CM codeset value. 
            The substring can contain up to three digit specification fields.</para>
            <para>Here is an example of a specifier parameter that contains two specification substrings: "5;33;5;2;|23;C,E,I,AI;"</para>
            <example>This code demonstrates use of an ICD-10-CM specifier
            <code>
            private void testICD10SpecTSM_Click(object sender, EventArgs e)
            {
                testICD10Spec(0);                               // Invoke the specifier dialog; result in _specifier
                if (_specifier.Equals(string.Empty)) return;    // exit if no valid selections were made
                try
                {
                    Medconn.ClearNarrative();
                    // ClearNarrative resets the formats; set here to get the code added to the codestr
                    Medconn.SetNarrativeFormat(NarrativeFormats.medFormatOutline | NarrativeFormats.medFormatUseMedcinUseCodeStr
                    | NarrativeFormats.medFormatAddTextDelimiter | NarrativeFormats.medFormatAddCodeToCodeStr);
                    // Add the finding to the encounter using a hard-coded Itemid; note that AddEncounter has been omitted here.
                    Medconn.AddNarrate(-12345, CurrentMedcinid, "201107151400", " ", "", " ", "", "", "", 0, 0);
                    // Add the specifier string to the finding
                    Medconn.AddSpecifier(12345, _specifier);
                    // Add the specifier string as a free texst note atachment so we can view it
                    Medconn.AddNote(12345, "Specifier string: " + _specifier);
                    // Get the ICD10 code determined by the server and add it to the finding
                    string code = Medconn.CodeFromItem(12345, CodeLinks.medCodeICD10, 0);
                    // The syntax is codetype,code
                    Medconn.AddNarrateCode(12345, 0, "5," + code);
                    Narrate();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.BaseUserFinding">
            <summary>
            Use this method to obtain the base number for user defined findings.
            </summary>
            <returns>The base number is returned.</returns>
            <remarks>The base user finding number should be added to your numbers 1-n
            to arrive at the actual number to be used with the AddUserFinding method. 
            Note that if NextUdf returns a number higher than BaseUserFinding, it means that the server
            already has some UDFs registered.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddEMData(System.Int32,System.String,System.String)">
            <summary>
            This method is used to add additional data for the purposes of E and M calculation.
            </summary>
            <param name="Mode">For mode = 0, process EncounterItems. For mode = 1, process ExtraItems.</param>
            <param name="EncounterItems">Contains a semi-colon delimited list of existing encounter item additions.</param>
            <param name="ExtraItems">For Mode=1, the ExtraItems parameter is used to pass a string of data
            that can assign miscellaneous narrative groups to standard Medicomp narrative groups
            for the purpose of E/M calculation. The syntax of an extraitems assignment is:
            <para>MG=sg</para>
            <para>MG is the numerical miscellaneous group number</para>
            <para>sg is the numerical Medicomp group number</para>
            <para>To make additional assignments in the same API call, delimit each assignment pair with a comma.
            As an example, assume that you want to assign G_MISC1 to G_HPI, and G_MISC2 to G_ROS.
            The following API call will accomplish that: AddEMData(1, “”,  “28=2,29=16”)</para>
            <para>The assignments remain in effect until reassigned or cleared.
            You can clear all assignments by passing an empty string for extraitems with mode=1.</para></param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>Each encounter item addition has the following syntax:
            <para>itemid,C=Y|N,A=Y|N,P=N|E,W=Y|N,R=1-4,S=?,T=cpt1:cpt2:cpt3:...cptn</para>
            <para>with each comma-delimited code item according to the following table:</para>
            <para>
            <list type="table">
            <listheader><term>Code</term><description>Designated Use</description></listheader>
            <item><term>itemid</term><description>is the unique itemid used when adding the finding to the server’s encounter data, and is required.</description></item>
            <item><term>C=Y|N</term><description>Specifies if the problem is chronic (C=Y) or not (C=N). C=N is the default.</description></item>
            <item><term>A=Y|N</term><description>Specifies if the problem is active (A=Y) or not (A=N). A=N is the default.</description></item>
            <item><term>P=N|E</term><description>Specifies if the problem is new to the provider (P=N), or if the problem is existing to the provider (P=E). P=E is the default.</description></item>
            <item><term>W=Y|N</term><description>Specifies if additional workup is planned (W=Y) or if no additional workup is planned (W=N). W=N is the default.</description></item>
            <item><term>R=1-4</term><description>Specifies the application provided risk level, where applicable.</description></item>
            <item><term>X=1-4</term><description>Specifies if the application wants to provide a complexity level that will be used in place of the Medcin complexity level.</description></item>
            <item><term>S=c</term><description>Specifies a status code for the finding specifically for E and M calculations. The code passed will not be used for narration.</description></item>
            <item><term>T=cpt1:cpt2:cpt3:...cptn</term><description>Specifies one or more CPT codes that will be used solely to be stroked towards lab, radiologic, or medical test.</description></item>
            </list></para>
            <para>
            Pay strict attention to the syntax of each item as no error codes are returned. The field data, 
            with the exception of the itemid that must be first, can be in any order. (“C=Y,A=Y” is equivalent to “A=Y,C=Y”). 
            If a syntax error, or invalid field specifier, is detected in an item, the server will attempt to skip to the next 
            item delimited by a semicolon. Character case is not significant; data can be in either upper or lower case. 
            There is no limit to the number of items that can be passed in a single API call. 
            If an itemid is passed that is not found in the current encounter, the server will attempt to skip to the next item.
            </para>
            <para>
            For Mode=1, the ExtraItems parameter is used to pass a string of data that can assign miscellaneous narrative groups 
            to standard Medicomp narrative groups for the purpose of E/M calculation. The syntax of an extraitems assignment is:
            <c>“MG=sg”</c><br>where: MG is the numerical miscellaneous group numbe, and sg is the numerical Medicomp group number.</br>
            </para>
            <para>
            To make additional assignments in the same API call, delimit each assignment pair with a comma. 
            As an example, assume that you want to assign G_MISC1 to G_HPI, and G_MISC2 to G_ROS. 
            The following API call will accomplish that: <c>AddEMData(1, “”,  “28=2,29=16”)</c>
            <br>The assignments remain in effect until reassigned or cleared. You can clear all assignments by passing an empty string for extraitems with mode=1.</br>
            </para></remarks>
        </member>
        <member name="M:Medicomp.Connection.AddFindingImage(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
             <summary>
             Method to add an image to a finding for HTML rendering.
             </summary>
             <param name="Itemid">is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
             <param name="Align">Specifies the alignment of the image: Left, Right, Top, Middle, Bottom; Left is the default.</param>
             <param name="Border">Specifies the width of the border in pixels; 0 is the default.</param>
             <param name="Clear">If Align is L or R, then specify 0 for text to flow around image or 1 to break text.</param>
             <param name="HorizontalSpace">Specify the surrounding horizontal white space in pixels.</param>
             <param name="VerticalSpace">Specify the surrounding vertical white space in pixels.</param>
             <param name="ImagePath">The full path specification identifying the image.</param>
             <returns>False will be returned if an error is encountered locally.</returns>
             <remarks>This method may be useful to add an image to the HTML rendering of a note. The means by which the image is embedded in a 
             narration varies according to the NarrativeOutput currently in effect when the narrate API is called. 
             The responsibility to actually render the image rests with the component doing the rendering; 
             the server's narration engine simply places image data into the text stream.
             <list type="bullet">
             <item>When the narrative output is HTML, the image is emitted in the document as an 'IMG' tag.</item>
             <item>When the narrative output is RTF, the image is added to the RTF document text simply
             as a 'field' instruction using an 'INCLUDEPICTURE' tag. This renders in Microsoft Word as a picture;
             none of the styling parameters are embedded. If the application makes use of an RTF control that does 
             not render these fields, it will have to post process the text string and replace
             the field information with an equivalent pict element and embed the actual image file in the document.
             </item>
             <item>When the narrative output is Plain Text, image data is not embedded.</item>
             </list>
             <para>The HTML mode incorporates all of the parameters passed in the API call to construct the IMG tag. 
             This tag will be emitted in the HTML output immediately prior to the text of the finding to which it is attached. 
             A tag would look like:</para>
             <para><c>&lt;IMG SRC="ImagePath" BORDER="0" ALIGN="RIGHT" HSPACE="20"&gt;</c></para>
             <para>
              If the itemtag is being rendered as an HREF (see the ShowItemTag API), then the IMG will be wrapped with an anchor HREF so that 
              the image becomes a clickable link to the finding it is attached to. The API parameters allow controlling almost all of the HTML 
              IMG parameters. The API does not support the IMG parameters WIDTH and HEIGHT; it is left up to the application to scale the image appropriately. 
              If the Clear parameter is passed as 1, then a &lt;BR CLEAR=ALL&gt; tag will be embedded after the text of the finding is emitted. 
              If the Clear parameter is passed as 0, then the narrative will insert a &lt;BR CLEAR=ALL&gt; tag prior to emitting the next narrative group header. 
              This tag terminates text wrapping so there is less interference in the text below the image. In HTML, text wraps only for Align="Left" or Align="Right".
             </para>
             <para>When the output is RTF, an image will be inserted as a Field. This emits as:</para>
             <para><c>{\field{\*\fldinst { INCLUDEPICTURE ImagePath \\* MERGEFORMAT \\d }}}</c></para>
             <para>
             This type of RTF specification will be handled by a full RTF viewer like Word. It does not support text wrapping or any other parameter. 
             Apps that need embedded images can post-process the narration string and replace the field specification with an embedded picture using 
             the "\pict" specification, and convey whatever formatting is desired. Note that to conform to the use of backslashes in RTF, 
             the server will replace all instances of a backslash in the ImagePath with 4 backslashes when embedding the field string.
             </para>
             <para>
             The Medicomp.Objects.MedCommon DotNet2 class provides functions that may be used to convert an RTF narration string containing 
             INCLUDEPICTURE fields to \pict specifications that embed the image as a Windows metafile.
             </para>
            </remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddFindingImage(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Method to add an image to a history pool finding for HTML rendering.
            </summary>
            <param name="Seq">is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Align">Specifies the alignment of the image: Left, Right, Top, Middle, Bottom; Left is the default.</param>
            <param name="Border">Specifies the width of the border in pixels; 0 is the default.</param>
            <param name="Clear">If Align is L or R, then specify 0 for text to flow around image or 1 to break text.</param>
            <param name="HorizontalSpace">Specify the surrounding horizontal white space in pixels.</param>
            <param name="VerticalSpace">Specify the surrounding vertical white space in pixels.</param>
            <param name="ImagePath">The full path specification identifying the image.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks><para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            This method may be useful to add an image to the HTML rendering of a note. When the narrative
            output is HTML, the image is emitted in the document as an 'IMG' tag. When the narrative output is RTF,
            the image is added to the RTF document text simply as a 'field' instruction using an 'INCLUDEPICTURE' tag.
            This renders in Microsoft Word as a picture; none of the styling parameters are embedded. If your
            application makes use of an RTF control that does not render these fields, you will have to
            post process the text string and replace the field information with an equivalent pict element and embed
            the actual image file in the document.</remarks>
        </member>
        <member name="M:Medicomp.Connection.GetCaption(Medicomp.CaptionModes,System.Int32)">
            <summary>
            Method to obtain a caption for a given item
            </summary>
            <param name="Mode">Any combination of the CaptionModes enumeration to identify the type of caption requested. (enumCaptionModes for ActiveX and Int32 for Java)</param>
            <param name="Code">The identifier for the item based on the requested Mode; see table below.</param>
            <returns>A string containing the requested caption(s) is returned.</returns>
            <remarks>If the Code parameter is passed as 0, then the string returned will contain a
            tab-delimited list of caption fields with each field in the format 'code~caption';
            the first field will be '#~name' where '#' denotes the mode for that list and the 'name'
            denotes the string identification of the list. When mode contains more than one type of caption,
            the lists will be delimited with a newline character.
            <para>A Code value of 0 for CaptionModeFinding is not supported.</para>
            <para>
            <list type="table">
            <listheader><term>Mode</term><description>Description</description></listheader>
            <item><term>1 = CaptionModeGroup</term><description>This will obtain the narrative group caption for the given code. 
            If Code is passed as 0, then the entire group list will be returned with each code field delimited with a Tab. 
            A code field is emitted as 'code~description'; the first field will contain the mode and description of the list ('1~Group').</description></item>
            <item><term>2 = CaptionModeSubgroup</term><description>This will obtain the narrative subgroup caption for the given code. 
            If Code is passed as 0, then the entire subgroup list will be returned with each code field delimited with a Tab. 
            A code field is emitted as 'code~description'; the first field will contain the mode and description of the list ('2~Subgroup').</description></item>
            <item><term>4 = CaptionModeSection</term><description>This will obtain the narrative section caption for the given code. 
            If Code is passed as 0, then the entire section list will be returned with each code field delimited with a Tab. 
            A code field is emitted as 'code~description'; the first field will contain the mode and description of the list ('4~Section').</description></item>
            <item><term>8 = CaptionModeFinding</term><description>This will obtain the caption for a finding where Code is the Medcinid of the finding.</description></item>
            <item><term>128 = CaptionModeAddID</term><description>This, when used in combination with SubGroup or Section modes, will append the MedcinID of the item to the caption. 
            The ID will be delimited with a tilde character.</description></item>
            </list></para></remarks>
        </member>
        <member name="M:Medicomp.Connection.MedcinidFromNodekey(System.String)">
            <summary>
            Method to obtain a Medcinid given a nodekey
            </summary>
            <param name="Nodekey">The nodekey for which the Medcinid is desired.</param>
            <returns>The Medcinid if nodekey is valid. If the nodekey is not located, a 0 is returned.</returns>
            <remarks>Note that the case of each nodekey character is significant. Medcin terms generally use only 
            upper case characters for the nodekey; however, user-defined findings can use lower case as well as special characters.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddNarrateCode(System.Int32,System.Int32,System.String)">
            <summary>
            Method to add a code string or description to a finding instance.
            </summary>
            <param name="Itemid">This is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Mode">Determines the use made of CodeStr. Mode=0 for CodeStr specifying CodeSet,Code;
            Mode=1 specifying CodeStr is a full description; Mode=2 specifying CodeStr contains 'CodeSet,Code' but
            is not to be used for a code classification description (this is used to provide a code for retrieval purposes).</param>
            <param name="CodeStr">This string should contain an encoded CodeSet and Code or a complete description of the
            finding instance. If the Mode argument is 0, the server will attempt to locate the classification description
            for the code using the current code year, and use that description. If the description is not available,
            none will be set. For modes 0 and 2, the syntax of a CodeStr string is as follows: <c>'codetype,code[;codetype,code]'</c>; where codetype
            is one of the numbered codetype's (see CodeList table in codelink.mdb) or the Medicomp.Codelinks enumeration,
            and code is the Medicomp-assigned code mapping.
            <para>If the Mode argument is 1, the argument is considered to be the complete description.
            The maximum length of the string is 512 characters; strings longer than that will be truncated. When the
            description appears in the narration, no other finding instance properties will be integrated into the description;
            finding instance properties appear only with the Medcin description. The one exception to this rule is that a
            free text note attachment will be added if the medFormatUseCodeStrOnly Narrative Format flag is set.</para></param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks><para>This API is used to provide a non-Medcin description for a finding instance. Its typical purpose
            would be to provide a complete ICD9 classification description for a finding instance in the encounter.
            The descriptions are used in association with Narrative Formats with enumerations that include medFormatUseCodeStrOnly,
            medFormatUseMedcinUseCodeStr, or medFormatUseCodeStrUseMedcin. These formats provide a means where the narration
            produced by the narrate, narrateex, or transcribeitem APIs includes emitting the code string description either
            in addition to or in place of the Medcin description. An example of an encoded CodeStr is '6,066.9'; whereas a
            complete description for that code would be, 'Arthropod-borne viral disease, unspecified'.</para>
            <para>When the NarrativeFormat includes medFormatUseCodeStrOnly, the presentation will also include any attached note text;
            no other finding instance property will be emitted with the description. All properties of the finding instance will
            be emitted with the Medcin description.</para>
            <para>When the NarrativeFormat includes the medFormatAddTextDelimiter flag, the code string description will be delimited.
            The code string text will be prefixed with the message string identified by MSG_CODEOPEN and suffixed with the message
            string identified by MSG_CODECLOS. These delimiters are initialized to '[[' and ']]' respectively.
            Use the SetMessageString API to change the delimiters.</para>
            <para>When the Mode parameter is 2, this API is used solely to pass a CodeStr to the server for retrieval purposes.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistAddNarrateCode(System.Int32,System.Int32,System.String)">
            <summary>
            Method to add a code string or description to a history pool finding instance
            </summary>
            <param name="Seq">This is the unique itemid used when adding the finding to the server’s encounter data, and is required.</param>
            <param name="Mode">Determines the use made of CodeStr. Mode=0 for CodeStr specifying CodeSet,Code;
            Mode=1 specifying CodeStr is a full description; Mode=2 specifying CodeStr contains 'CodeSet,Code' but
            is not to be used for a code classification description (this is used to provide a code for retrieval purposes).</param>
            <param name="CodeStr">Contains either an encoded CodeSet,Code or a complete description;
            the interpretation depends on the Mode parameter.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>
            <para>This is a packet call and requires a HistFlush prior to a non-packet call.</para>
            </remarks><seealso cref="M:Medicomp.Connection.AddNarrateCode(System.Int32,System.Int32,System.String)"/>
        </member>
        <member name="M:Medicomp.Connection.GetCodeDescription(Medicomp.CodeLinks,System.String)">
            <summary>
            Method obtains the code description for a given code, if available.
            </summary>
            <param name="CodeSet">One of the CodeLinks enumerations that specifies the code set. (enumCodeSet for ActiveX)
            For V22, starting with 4Q2012, passing medCodeNone will return a comma-delimited
            list of codesets supported by the server for description retrieval.</param>
            <param name="Code">The code string for which the description is desired.
            If Code is passed as an empty string, then the entire list of descriptions will be returned
            as newline delimited records. Each record contains a tab-delimited set of fields:
            <c>'codeset^tcode^tcodeyear^tdescription'</c>. More than one code can be passed to obtain
            the descriptions for multiple codes by passing a semicolon-delimited list of codes
            in this parameter. The descriptions returned will be tab-delimited and in the same order as the request.</param>
            <returns>The description for the requested code is returned if the CodeSet and Code are
            available from the server. If the connection's debug level set by the SetDebugOutput API is other than 0 
            and the passed CodeSet parameter is not supported in the descriptions table, the string "invalid codeset" will be returned.</returns>
            <remarks>This API was added 2008Q2; code strings for ICD9 were available starting in 2008Q3.
            Starting with the 1Q2009 server, the entire description list can be obtained by passing
            an empty string for the Code parameter.</remarks>
        </member>
        <member name="M:Medicomp.Connection.AddEncounterHeadings(System.String,System.Int32,System.String)">
            <summary>
            This function is used to designate specific chapter headings for an encounter, or subgroup headings for miscellaneous narrative groups for encounter narration. 
            Headings are passed as a tab-delimited string in the Headings parameter; the Mode parameter designates the headings type passed. 
            </summary>
            <param name="encountertime">The time of the encounter to match up with the time passed in AddEncounter.
            This must be passed in Medcin date time format, YYYYMMDDHHIISS where "YYYY" is the year, "MM" is the month, "DD" is the day, 
            "HH" is the hour, "II" is the minute, and "SS" is the second. Use as much precision as the encounter time is recorded 
            (usually either "YYYYMMDD" or "YYYYMMDDHHII". For example, "199805071610" designates May 7, 1998 at 4:07 PM. Hours should be in 24-hour time. 
            This string must be identical to the encountertime string passed in the AddEncounter API for the encounter that will use the headings. 
            This parameter must be a non-empty string for mode equal to 1, or mode equal to 2 for encounter-specific subgroup headings. 
            The parameter is ignored for mode equal to 4.</param>
            <param name="Mode">A number that describes the use of the Headings string.
            Use Mode of 1 to designate Headings as containing Chapter Headings.
            Use Mode of 2 with encountertime as an empty string to designate Headings as containing connection specific headings.
            These headings would be used for all miscellaneous subgroups except for those having their own subgroup headings
            (mode of 2 with non-empty encountertime). The server can have a set of global subgroup headings shared by all connections. 
            These headings will be used unless a connection has provided its own subgroup headings as identified above – or a specific encounter has its own subgroup headings. 
            Server global headings can be passed to the server from any connection using 
            the AddEncounterHeadings with a mode of 4. Or they can be loaded automatically by the Medcin server upon startup 
            if they are contained in a text file named msgcaptions.txt; the text file should be placed in the same folder 
            as other variable data files (medcinserv.ini, medcin.udf, etc).</param>
            <param name="Headings">A tab-delimited string containing subheadings. Each sub-string is a heading for
            the 0-based heading number as specified by the Mode. Thus the 1st sub-string is for heading 0,
            the 2nd for heading 1, the 3rd for heading 2, and so forth.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>
            <para>
            Effective with the 2Q2009 release of the Medcin server and related connection clients, support has been added for application assignment of the 
            subgroup property of a finding that has been placed into any of the miscellaneous narrative groups (Misc1 through Misc37). 
            User-assigned subgroup numbers start from 1 and continue to approximately 16,000. A set of subgroup numbers applies throughout all miscellaneous groups. 
            There are three unique classes of subgroup headings that can be assigned to the subgroup numbers. Effective with the 3Q2010 release, user subgroup support 
            has been extended to the following narrative groups: Subjective (History), Objective, Notes.
            <list type="bullet">
            <item>Each unique encounter identified by patientid and encounter time can have its own set of headings. 
            This class of headings is passed to the server using the AddEncounterHeadings API with a mode of 2 and the unique encounter time designated. 
            These headings should be preserved with the encounter data stored in your database so they can be reloaded as needed.</item>
            <item>A specific server connection can have its own set of subgroup headings. This class of headings, passed to the server using the 
            AddEncounterHeadings API with a mode of 2 and an empty encounter time, is used for all narrations requested by the connection except those 
            encounters that have their own subgroup headings as specified above.  Note that the connection subgroup heading string will be applied 
            to a history pool that is created by the connection. Thus, any connection that attaches to that history pool and narrates a history pool 
            encounter that has user subgroups without encounter specific subgroup headings will use these subgroup headings.</item>
            <item>The server can have a set of global subgroup headings shared by all connections. These headings will be used unless a connection 
            has provided its own subgroup headings as identified above – or a specific encounter has its own subgroup headings. Server global headings 
            can be passed to the server from any connection using the AddEncounterHeadings with a mode of 4. Or they can be loaded automatically by the 
            Medcin server upon startup if they are contained in a text file named “msgcaptions.txt”; the text file should be placed in the 
            same folder as other variable data files (medcinserv.ini, medcin.udf, etc). </item>
            </list>
            <para>
            Heading strings to be used for these subgroups are provided either by the by application or are loaded automatically by the Medcin server 
            when it starts up. The syntax of a “msgcaptions.txt” file is as follows. A subgroup heading string contains a subgroup number followed 
            by a hyphen followed by the caption for that subgroup (e.g. “1-This is Subgroup One”). You can enter more than one subgroup string on a 
            line separating each with a Tab character, or you can enter each subgroup string on a separate line. The following illustrates a small example:
            </para><c>
                2-Subgroup Two is 1st<br></br>
                4-Subgroup Four is 2nd<br></br>
                3-Subgroup Three is 3rd<br></br>
                1-Subgroup One is 4th<br></br>
                5-Subgroup Five is 5th<br></br>
                6-Subgroup Six is 6th<br></br>
                7-Subgroup Seven is 7th<br></br>
                8-Subgroup Eight is 8th<br></br>
                9-Subgroup Nine is 9th<br></br>
                10-Subgroup Ten is 10th<br></br>
            </c></para>
            <para>
            The sequencing of subgroups (i.e. which appears 1st, which appears 2nd, etc.) is controlled by the sequence of the subgroup string in the file. 
            In the above example, see that "Subgroup Two" is going to be the first subgroup presented in a narration.
            </para>
            <para>
            It is important to remember that the application most likely have to persist subgroup assignments for chart records in its database; 
            thus, once a subgroup number had been identified, that number should persist as well. The sequencing can always be changed but 
            do not change the identification caption of a subgroup – unless the implications are fully understood.
            </para>
            <para>
            The server supports three classifications of miscellaneous subgroup headings to utilize them as needed in the application. 
            To simply provide a uniform set of subgroup headings for all users without user control of the headings, it is best to simply use the global server headings. 
            Based on the application needs, users may want to create headings for their needs. This is controlled entirely by the application.
            </para>
            <para>
            The use of headings encompasses the AddEncounterHeadings API for adding headings, the SetSubGroup API for assigning a subgroup number 
            to an encounter finding, the HistAddEncounterHeading API used to provide subgroup headings for an encounter that is added to the history pool, 
            and the HistSetSubGroup API to assign a subgroup to an encounter finding that is added to the history pool.
            </para>
            <para>For chapter headings, if the Heading string contains an empty sub-string in any position, 
            the default heading for that numbered heading will be used. For instance, encounter chapters use default headings of the form, 
            "Chapter 1", "Chapter 2", etc., for chapter number 0, and 1. Thus a Heading string passed as (using "^T" to indicate a tab character) 
            <c>"My Problem^TYour Problem^T^TTheir Problems"</c> would surface in the encounter as "My Problem", "Your Problem", "Chapter 3", "Their Problems".</para>
            <para>
            For miscellaneous narrative group subgroup headings, the substring for a single subgroup's heading is entered as "n-caption", 
            where n is the number of the subgroup to which "caption" is the heading. The "Heading" parameter should contain substrings 
            for all of the subgroups using a Tab character as the delimiter. The order of the substrings will determine the presentation 
            sequencing of subgroup captions in their respective miscellaneous narrative group.
            </para>
            <para><example>This fragment illustrates sending headings and subheadings:
            <code>
               if (line.Length &gt; 1 &amp;&amp; line[1] == '1')  // Chapter headings line?
               {
                   line = sr.ReadLine().Trim('\"');
                   switch (mode)
                   {
                       case ImportMode.Encounter:
                           MedConn.AddEncounterHeadings(EncounterTime, 1, line);
                           break;
                       case ImportMode.HistoryPool:
                           MedConn.HistAddEncounterHeadings(EncounterTime, 1, line);
                           break;
                   }
                   break;
               }
               if (line.Length &gt; 1 &amp;&amp; line[1] == '2')  // SubChapter headings line?
               {
                   line = sr.ReadLine().Trim('\"');
                   switch (mode)
                   {
                       case ImportMode.Encounter:
                           MedConn.AddEncounterHeadings(EncounterTime, 2, line);
                           break;
                       case ImportMode.HistoryPool:
                           MedConn.HistAddEncounterHeadings(EncounterTime, 2, line);
                           break;
                   }
                   break;
               }
            </code></example></para>
            </remarks>
            <seealso cref="M:Medicomp.Connection.AddEncounter(System.String,System.Int32)"/>
        </member>
        <member name="M:Medicomp.Connection.HistAddEncounterHeadings(System.String,System.Int32,System.String)">
            <summary>
            Method to add headings for encounter narration of a history pool encounter.
            </summary>
            <param name="encountertime">The time of the encounter to match up with the time passed in HistAddEncounter.</param>
            <param name="Mode">A number that describes the use of the Headings string.
            Use Mode=1 for chapter headings; Mode=2 for Miscellaneous SubGroup headings.</param>
            <param name="Headings">A tab-delimited string containing subheadings,
            or a Tab-delimited string containing miscellaneous group subgroup headings.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>See the AddEncounterHeadings API for additional information. Note that Mode=2 with an empty
            encountertime is invalid for the history pool API.
            <para>This is a packet call and requires a HistFlush prior to a non-packet call.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.GetServerProperties(Medicomp.ServerItems,System.Int16)">
            <summary>
            Method that can be used to recover various properties relating to the server's operation
            </summary>
            <param name="serveritems">Depending on the client component, any combination of ServerItems flags.
            Each bit corresponds to a different piece of information. When ServerItems is passed as ‘All’ (0), 
            then all information server items are returned</param>
            <param name="mode">The mode setting for the data requested: 0=text, 1=xml. Any other Mode value will 
            format the string as plain text with each server item delimited by a Tab character and each item 
            formatted as “xy=value”. The “xy” represents a unique 2-character code that identifies the item.
            When the Mode is 1, the returned xml string will include the list of comnnections.
            </param>
            <returns>A string that contains a tab-delimited set of server data items. 
            Each field begins with a 3-character string (2-characters followed by '=') that designates the item</returns>
            <remarks>The following table describes the various properties available:
            <para><list type="table">
            <listheader><term>xml and value</term><description>Description</description></listheader>
            <item><term></term><description>All information as noted below</description></item>
            <item><term>oc</term><description>Number of open connections</description></item>
            <item><term>dc</term><description>Total number of disconnections</description></item>
            <item><term>mc</term><description>Highest number of simultaneous connections</description></item>
            <item><term>cm</term><description>Number of cache misses (adds record to cache)</description></item>
            <item><term>co</term><description>Swapped out of cache</description></item>
            <item><term>cd</term><description>Cache hits most recently used</description></item>
            <item><term>ca</term><description>Cache hits in array</description></item>
            <item><term>ch</term><description>Number of memio cache searches</description></item>
            <item><term>cb</term><description>Actual cache size in bytes</description></item>
            <item><term>cs</term><description>Current size of cache in bytes</description></item>
            <item><term>nt</term><description>Number of transactions</description></item>
            <item><term>ss</term><description>State save requests</description></item>
            <item><term>sr</term><description>State restore requests</description></item>
            <item><term>sm</term><description>Maximum concurrent saved states</description></item>
            <item><term>sl</term><description>Number of states that could not be restored due to cache overflow</description></item>
            <item><term>at</term><description>Average time per request (milliseconds)</description></item>
            <item><term>tt</term><description>Total time processing requests milliseconds</description></item>
            <item><term>mm</term><description>Maximum Medcinid in the database</description></item>
            <item><term>lu</term><description>Lowest user finding number</description></item>
            <item><term>hu</term><description>Highest user finding number</description></item>
            <item><term>li</term><description>License expiration in days</description></item>
            <item><term>dp</term><description>Path of server data files</description></item>
            <item><term>vi</term><description>Version information: data and server</description></item>
            <item><term>si</term><description>IP address or hostname</description></item>
            <item><term>sp</term><description>Listening port</description></item>
            <item><term>th</term><description>Number of concurrent threads in Asynchronous mode</description></item>
            <item><term>ni</term><description>Kilobytes read on all sockets</description></item>
            <item><term>no</term><description>Kilobytes sent on all sockets</description></item>
            <item><term>ps</term><description>Transactions Per Second</description></item>
            <item><term>ms</term><description>Maximum Transactions Per Second</description></item>
            <item><term>vp</term><description>Path of server variable data files</description></item>
            <item><term>ah</term><description>Comma-delimited counts of API hits; 1 to maxmsgid</description></item>
            </list></para>
            <example>This code gets the highest MedcinId in use:
            <code>
            private void getMaxMedcinId()
            {
               string info = Medconn.GetServerProperties(ServerItems.MaximumMedcinid, 0);
               bool rc = int.TryParse(info.Substring(3), out _MaximumMedcinId);
               tssCurrent.Text = string.Format("Maximum MedcinId = {0}", _MaximumMedcinId);
            }
            </code></example></remarks>
        </member>
        <member name="M:Medicomp.Connection.SetSubGroup(System.Int32,System.Int16)">
            <summary>
            Method can be used to set the subgroup assignment for a finding in one of the miscellaneous narrative groups
            </summary>
            <param name="Itemid">This is the unique itemid used when adding the finding to the server’s encounter data, 
            and is required. If the finding identified by itemid is not in one of the miscellaneous groups, the API will be ignored.</param>
            <param name="SubGroup">The subgroup you want to assign (1-n). If a user subgroup has been assigned and the group assignment 
            has changed to be other than a miscellaneous group, the usersubgroup setting will be removed.</param>
            <returns>False will be returned if an error is encountered locally.</returns>
            <remarks>When the finding is emitted in a narrative, subgroup headings as appropriate based on the use of subgroup 
            headings passed to the server in the AddNarrateHeadings API will be used for subgroup captioning. 
            If the usersubgroup number assigned is not in the list of subgroup headings that is in effect for the narration, 
            the server will emit <c>"Misc SubGroup n"</c> for the heading, with "n" replaced by the usersubgroup number assigned.
            <para>Note that the miscellaneous narrative group findings will be typically sequenced by group, by usersubgroup, by nodekey. 
            Findings that have not been assigned a usersubgroup will be sequenced before the first usersubgroup.</para></remarks>
        </member>
        <member name="M:Medicomp.Connection.HistSetSubGroup(System.Int32,System.Int16)">
            <summary>
            Similar to SetSubGroup but for adding to history pool.
            </summary>
             <seealso cref="M:Medicomp.Connection.SetGroupNumber(System.Int32,System.Int16)"/>
            <param name="seq">The seq argument is the unique identifier for the chart record, which is supplied by the caller.</param>
            <param name="usersubgroup">The value of the usersubgroup number to be assigned.</param>
            <returns>Returns True if successful; False otherwise.</returns>
        </member>
        <member name="M:Medicomp.Connection.SetNoDelay(System.Boolean)">
            <summary>
            API to enable or disable the NODELAY state of the underlying tcp/ip socket
            </summary>
            <param name="state">True to enable the option; False to disable the option.</param>
        </member>
        <member name="E:Medicomp.Connection.ErrorEvent">
            <summary>
            This event is raised when an Exception is detected
            </summary>
        </member>
        <member name="T:Medicomp.Connection.ErrorEventHandler">
            <summary>
            Delegate used with the ErrorEvent event.
            </summary>
            <param name="sender">A reference to this component.</param>
            <param name="e">An ErrorEventArgs object that passes the data of the event.</param>
            <remarks>
            The only API call that can generate an error is the constructor. All other API calls that 
            return data will return a default data value on an error (0 for numeric types, a null length 
            string for string types, a zero-length byte array for byte array types, an empty ArrayList 
            for ArrayList types, or False for bool types). The GetLastError API can be used to obtain the last error exception.
            <para>
            If you add an ErrorEventHandler delegate to the event, your app can receive event notification of the error.
            Your event handler:
            <code>
            public void MedcinErrorEventHandler(object sender, Medicomp.ErrorEventArgs e)
            {
               _Canceled = true;
               MessageBox.Show(e.error.Message);
            }
            </code>
            Attaching:
            <code>
            Medconn = new Medicomp.Connection(ServerIP, ServerPort);
            Medconn.ErrorEvent += MedcinErrorEventHandler;
            </code>
            Detaching:
            <code>
            If Medconn &lt;&gt; null
                Medconn.ErrorEvent -= MedcinErrorEventHandler;
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:Medicomp.ResponseItem">
            <summary>
            This structure contains one item of a list. Lists of items
            are returned as a System.ArrayList.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Medcinid">
            <summary>
            This field contains the unique identifier for the finding.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Prefix">
            <summary>
            This field typically contains the suggested prefix for the finding.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Modifier">
            <summary>
            This field contains the suggested Modifier of the finding, if necessary.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Status">
            <summary>
            This field contains the suggested Status of the finding, if necessary.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Result">
            <summary>
            This field contains the suggested Result of the finding, if needed.
            </summary>
            <remarks>Result could be 'A', 'N', or empty.</remarks>
        </member>
        <member name="F:Medicomp.ResponseItem.Nodekey">
             <summary>
             This field contains the nodekey of the finding.
             </summary>
             <remarks>When the BuildListMode includes medExtended, this field contains
             extended data elements in a tab-delimited string. The elements are as follows:
             <para></para>
             <list type="table">
             <listheader><term>Element ID</term><description>Element Description</description></listheader>
             <item><term>a=</term><description>status code</description></item>
             <item><term>b=</term><description>referred to docid</description></item>
             <item><term>c=</term><description>chartflag</description></item>
             <item><term>C=</term><description>codestr</description></item>
             <item><term>d=</term><description>duration</description></item>
             <item><term>e=</term><description>encounter time</description></item>
             <item><term>F=</term><description>QualifierLinkSequence;QualifierLink</description></item>
             <item><term>g=</term><description>Medcin flag value</description></item>
             <item><term>G=</term><description>Medcin gpflags value</description></item>
             <item><term>k=</term><description>episode string</description></item>
             <item><term>L=</term><description>range scale</description></item>
             <item><term>m=</term><description>modifier code</description></item>
             <item><term>n=</term><description>note string (maximum 48 characters)</description></item>
             <item><term>o=</term><description>onset time</description></item>
             <item><term>p=</term><description>prefix code</description></item>
             <item><term>q=</term><description>+ for a positive term, - for a negative term</description></item>
             <item><term>r=</term><description>Rxstring</description></item>
             <item><term>s=</term><description>sequence number</description></item>
             <item><term>t=</term><description>result code</description></item>
             <item><term>T=</term><description>term type</description></item>
             <item><term>u=</term><description>units of measure</description></item>
             <item><term>v=</term><description>value string</description></item>
             <item><term>x=</term><description>Rxcode if termtype is TYPE_RX</description></item>
             <item><term>y=</term><description>range normal low</description></item>
             <item><term>z=</term><description>range normal high</description></item>
            </list></remarks>
        </member>
        <member name="F:Medicomp.ResponseItem.Description">
            <summary>
            The Description field is the description of the medcinid.
            </summary>
            <remarks>When the BuildListMode includes medTranscribe, this field
            is transcribed instead of using the search description.
            This is only for the HistActive* functions.</remarks>
        </member>
        <member name="F:Medicomp.ResponseItem.TermType">
            <summary>
            This field contains the terminology type of the finding.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Flags">
            <summary>
            This field typically contains the property flags value.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Gpflags">
            <summary>
            This field typically contains the property gpflags value.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.ItemFlags">
            <summary>
            This field typically contains flags value unique to the item.
            </summary>
            <remarks>
            <para>When Buildlist mode ICD10CMOnly is not in effect, bit assignments are as follows</para>
            <para>
            <list type="table">
            <listheader><term>Bit</term><description>Designation of the bit</description></listheader>
            <item><term>0 (1)</term><description>is set to non-zero if the medcinid refers to a computed diagnosis 
            from which the intelligent prompting lists are derived from.</description></item>
            <item><term>5 (32)</term><description>is set if the prompt item has negative points (&lt; 0).</description></item>
            <item><term>6 (64)</term><description>is set if the abs(present) &gt; 1.</description></item>
            </list></para>
            <para>When Buildlist mode ICD10CMOnly is in effect, bit assignments are as follows</para>
            <para>
            <list type="table">
            <listheader><term>Bit</term><description>Designation of the bit</description></listheader>
            <item><term>0 (1)</term><description>the code is not reportable, if set</description></item>
            <item><term>1 (2)</term><description>the code is a category</description></item>
            <item><term>2 (4)</term><description>the code is a manifestation</description></item>
            <item><term>3 (8)</term><description>the code is not elsewhere coded</description></item>
            <item><term>4 (16)</term><description>the code is other</description></item>
            <item><term>5 (32)</term><description>the code is other specified</description></item>
            <item><term>6 (64)</term><description>the code is unspecified</description></item>
            <item><term>8 (256)</term><description>the code is a chronic finding</description></item>
            <item><term>12 (4096)</term><description>a code hint record is available</description></item>
            <item><term>13 (8192)</term><description>code parameters are available</description></item>
            <item><term>14 (16384)</term><description>if set, the code map has a code specification record;
            it is required that the user selects an item from each specification list to make the code reportable.
            Specific selections are used to designate specific characters for digit positions in a code.</description></item>
            <item><term>15 *32768)</term><description>If set, the ResponseItem represents a virtual finding</description></item>
            </list>
            </para></remarks>
        </member>
        <member name="F:Medicomp.ResponseItem.Subs">
            <summary>
            This field indicates the availability of subordinate findings. If the value is String.Empty, 
            no subordinate findings are available. If the value is '+', then one or more subordinate findings 
            are available. When a finding has a mapset that includes more than one map, each map of the 
            set will be emitted as a separate ResponseItem. The first item will be the map that has the 
            preferred flag set. All other maps of the same mapset will be emitted; however, the subs string 
            will contain a '-' character instead of a blank or '+', and the flags field will indicate that 
            the finding is not real. In addition, an arbitrary unique character will be appended to the nodekey 
            for each ResponseItem subsequent to the first item of a given Medcinid; this is to ensure that the 
            nodekey will remain unique for usage in a tree view component that may need unique key strings. 
            The purpose of this functionality is to provide a means for the application to present all the 
            codes that would (should) be applicable to the particular finding.
            </summary>
        </member>
        <member name="F:Medicomp.ResponseItem.Vardata">
            <summary>
            This field contains string data particular to the item. In the response list for ActivateWordSearch API, 
            it is populated with the code specification needed for a virtual ICD-10-CM finding. 
            In the response list for Activate-type APIs, it is populated with the list size of the item; 
            the value is a one-character string containing a '1' or '2'.
            </summary>
        </member>
        <member name="T:Medicomp.ErrorEventArgs">
            <summary>
            This class is used to pass the event parameter arguments for the ErrorEvent
            </summary>
        </member>
        <member name="M:Medicomp.ErrorEventArgs.#ctor">
            <summary>
            Overloaded constructor
            </summary>
        </member>
        <member name="M:Medicomp.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="ex">An Exception object.</param>
        </member>
        <member name="P:Medicomp.ErrorEventArgs.error">
            <summary>
            Read only property to get the exception.
            </summary>
        </member>
        <member name="T:Medicomp.fAbout">
            <summary>
            This class is used to show the About dialog
            </summary>
        </member>
        <member name="M:Medicomp.fAbout.#ctor">
            <summary>
            Constructor for the fAbout dialog class
            </summary>
        </member>
        <member name="F:Medicomp.fAbout.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Medicomp.fAbout.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Medicomp.fAbout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Medicomp.fAbout.Company">
            <summary>
            The Company name
            </summary>
        </member>
        <member name="P:Medicomp.fAbout.Licensed">
            <summary>
            true if Licensed; otherwise false
            </summary>
        </member>
        <member name="P:Medicomp.fAbout.Component">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:Medicomp.fAbout.Version">
            <summary>
            The version of the assemly
            </summary>
        </member>
        <member name="T:Medicomp.Globals">
            <summary>
            Summary description for Globals.
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CLIENT_DN2">
            <summary>
            This defines the client type for DotNet 2 for server registration
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CLIENT_BUILD">
            <summary>
            This defines the client is passing the build number for server registration
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CLIENT_MINOR">
            <summary>
            This defines the client is passing the minor version number for server registration
            </summary>
        </member>
        <member name="F:Medicomp.Globals.G_LAST">
            <summary>
            The number of the last narrative group.
            </summary>
        </member>
        <member name="F:Medicomp.Globals.G_LASTBASE">
            <summary>
            Group number of last group in 1st message set
            </summary>
        </member>
        <member name="F:Medicomp.Globals.G_MISC10">
            <summary>
            Group number of 1st group in 2nd message set
            </summary>
        </member>
        <member name="F:Medicomp.Globals.MSG_REASONE">
            <summary>
            The message number for the Chief Complaint group caption
            </summary>
        </member>
        <member name="F:Medicomp.Globals.MSG_GPMISC10">
            <summary>
            Message number of first group name in second message set
            </summary>
        </member>
        <member name="F:Medicomp.Globals.SO_LINGER">
            <summary>
            Value for socket linger
            </summary>
        </member>
        <member name="F:Medicomp.Globals.SERVERSHUTDOWN">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:Medicomp.Globals.MEDCININIT">
            <summary>Server code for MedcinInit API</summary>
        </member>
        <member name="F:Medicomp.Globals.MEDCINEND">
            <summary>Server code for FormatDate API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETDEBUGOUTPUT">
            <summary>Server code for SetDebugOutput API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETDATADIR">
            <summary>Server code for SetDataDir API</summary>
        </member>
        <member name="F:Medicomp.Globals.REGISTERCALLBACK">
            <summary>Server code for RegisterCallBack API</summary>
        </member>
        <member name="F:Medicomp.Globals.CLEARCHART">
            <summary>Server code for ClearChart API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDCHART">
            <summary>Server code for AddChart API</summary>
        </member>
        <member name="F:Medicomp.Globals.REMOVECHART">
            <summary>Server code for RemoveChart API</summary>
        </member>
        <member name="F:Medicomp.Globals.CALCULATE">
            <summary>Server code for Calculate API</summary>
        </member>
        <member name="F:Medicomp.Globals.HAVELIST">
            <summary>Server code for HaveList API</summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATE">
            <summary>Server code for Activate API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETIPDX">
            <summary>Server code for GetIPDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDDX">
            <summary>Server code for AddDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.CLEARDX">
            <summary>Server code for ClearDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATEDX">
            <summary>Server code for FormatDate API</summary>
        </member>
        <member name="F:Medicomp.Globals.HAVEDX">
            <summary>Server code for HaveDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATEEXPANSION">
            <summary>Server code for ActivateExpansion API</summary>
        </member>
        <member name="F:Medicomp.Globals.WORDSEARCH">
            <summary>Server code for WordSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.HAVEWORDSEARCH">
            <summary>Server code for HaveWordSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATEWORDSEARCH">
            <summary>Server code for ActivateWordSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.RANGENORMALHIGH">
            <summary>Server code for RangeNormalHigh API</summary>
        </member>
        <member name="F:Medicomp.Globals.RANGENORMALLOW">
            <summary>Server code for RangeNormalLow API</summary>
        </member>
        <member name="F:Medicomp.Globals.UNITGUESS">
            <summary>Server code for UnitGuess API</summary>
        </member>
        <member name="F:Medicomp.Globals.TESTVALUECONVERT">
            <summary>Server code for TestValueConvert API</summary>
        </member>
        <member name="F:Medicomp.Globals.UNITENUM">
            <summary>Server code for UnitEnum API</summary>
        </member>
        <member name="F:Medicomp.Globals.CALCSCALE">
            <summary>Server code for CalcScale API</summary>
        </member>
        <member name="F:Medicomp.Globals.QUALIFIERLIST">
            <summary>Server code for QualifierList API</summary>
        </member>
        <member name="F:Medicomp.Globals.QUALIFIERDESC">
            <summary>Server code for QualifierDesc API</summary>
        </member>
        <member name="F:Medicomp.Globals.NODEKEY">
            <summary>Server code for Nodekey API</summary>
        </member>
        <member name="F:Medicomp.Globals.TERMTYPE">
            <summary>Server code for Termtype API</summary>
        </member>
        <member name="F:Medicomp.Globals.SPECIALTY">
            <summary>Server code for Specialty API</summary>
        </member>
        <member name="F:Medicomp.Globals.UNIT">
            <summary>Server code for Unit API</summary>
        </member>
        <member name="F:Medicomp.Globals.SEARCH">
            <summary>Server code for Search API</summary>
        </member>
        <member name="F:Medicomp.Globals.SVOICE">
            <summary>Server code for SVoice API</summary>
        </member>
        <member name="F:Medicomp.Globals.NOMIN">
            <summary>Server code for Nomin API</summary>
        </member>
        <member name="F:Medicomp.Globals.NVOICE">
            <summary>Server code for NVoice API</summary>
        </member>
        <member name="F:Medicomp.Globals.SDOCPOS">
            <summary>Server code for SDocPos API</summary>
        </member>
        <member name="F:Medicomp.Globals.SDOCNEG">
            <summary>Server code for SDocNeg API</summary>
        </member>
        <member name="F:Medicomp.Globals.SPATPOS">
            <summary>Server code for SPatPos API</summary>
        </member>
        <member name="F:Medicomp.Globals.SPATNEG">
            <summary>Server code for SPatNeg API</summary>
        </member>
        <member name="F:Medicomp.Globals.PDOCPOS">
            <summary>Server code for PDocPos API</summary>
        </member>
        <member name="F:Medicomp.Globals.PDOCNEG">
            <summary>Server code for PDocNeg API</summary>
        </member>
        <member name="F:Medicomp.Globals.PPATPOS">
            <summary>Server code for PPatPos API</summary>
        </member>
        <member name="F:Medicomp.Globals.PPATNEG">
            <summary>Server code for PPatNeg API</summary>
        </member>
        <member name="F:Medicomp.Globals.RXCODE">
            <summary>Server code for RxCode API</summary>
        </member>
        <member name="F:Medicomp.Globals.TESTCODE">
            <summary>Server code for TestCode API</summary>
        </member>
        <member name="F:Medicomp.Globals.RISKCODE">
            <summary>Server code for RiskCode API</summary>
        </member>
        <member name="F:Medicomp.Globals.PRIVACY">
            <summary>Server code for Privacy API</summary>
        </member>
        <member name="F:Medicomp.Globals.COMPLEX">
            <summary>Server code for Complex API</summary>
        </member>
        <member name="F:Medicomp.Globals.UDFCODELIST">
            <summary>Server code for usfCodeList API</summary>
        </member>
        <member name="F:Medicomp.Globals.EXPANDCODEHINT">
            <summary>Server code for ExpandCodehint API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETPROPERTY">
            <summary>Server code for GetProperty API</summary>
        </member>
        <member name="F:Medicomp.Globals.NODELEVEL">
            <summary>Server code for NodeLevel API</summary>
        </member>
        <member name="F:Medicomp.Globals.PARAFLOW">
            <summary>Server code for ParaFlow API</summary>
        </member>
        <member name="F:Medicomp.Globals.SENTFLOW">
            <summary>Server code for SentFlow API</summary>
        </member>
        <member name="F:Medicomp.Globals.TITLE">
            <summary>Server code for Title API</summary>
        </member>
        <member name="F:Medicomp.Globals.SUBS">
            <summary>Server code for Subs API</summary>
        </member>
        <member name="F:Medicomp.Globals.PARENTMEDCINID">
            <summary>Server code for ParentMedcinid API</summary>
        </member>
        <member name="F:Medicomp.Globals.FLAGS">
            <summary>Server code for Flags API</summary>
        </member>
        <member name="F:Medicomp.Globals.EFLAGS">
            <summary>Server code for EFlags API</summary>
        </member>
        <member name="F:Medicomp.Globals.MANAGEMENT">
            <summary>Server code for Management API</summary>
        </member>
        <member name="F:Medicomp.Globals.AFLAGS">
            <summary>Server code for AFlags API</summary>
        </member>
        <member name="F:Medicomp.Globals.CAFLAGS">
            <summary>Server code for CAFlags API</summary>
        </member>
        <member name="F:Medicomp.Globals.QFLAGS">
            <summary>Server code for QFlags API</summary>
        </member>
        <member name="F:Medicomp.Globals.STARTAGE">
            <summary>Server code for StartAge API</summary>
        </member>
        <member name="F:Medicomp.Globals.ENDAGE">
            <summary>Server code for EndAge API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDUSERFINDING">
            <summary>Server code for AddUserFinding API</summary>
        </member>
        <member name="F:Medicomp.Globals.USERFINDINGCODES">
            <summary>Server code for UsewrFindingCodes API</summary>
        </member>
        <member name="F:Medicomp.Globals.USERFINDINGRANGE">
            <summary>Server code for UserFindingRange API</summary>
        </member>
        <member name="F:Medicomp.Globals.TRANSCRIBE">
            <summary>Server code for Transcribe API</summary>
        </member>
        <member name="F:Medicomp.Globals.TRANSCRIBEFLAG">
            <summary>Server code for TranscribeFlag API</summary>
        </member>
        <member name="F:Medicomp.Globals.NARRATE">
            <summary>Server code for Narrate API</summary>
        </member>
        <member name="F:Medicomp.Globals.TRANSCRIBEITEM">
            <summary>Server code for TranscribeItem API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDNARRATE">
            <summary>Server code for AddNarrate API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDEPISODE">
            <summary>Server code for AddEpisode API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDVALUE">
            <summary>Server code for AddValue API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDNOTE">
            <summary>Server code for AddNote API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDRXSTR">
            <summary>Server code for AddRxStr API</summary>
        </member>
        <member name="F:Medicomp.Globals.CLEARNARRATIVE">
            <summary>Server code for ClearNarrative API</summary>
        </member>
        <member name="F:Medicomp.Globals.DELETENARRATE">
            <summary>Server code for DeleteNarrate API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDDOCNAME">
            <summary>Server code for AddDocname API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDDEMOGRAPHICS">
            <summary>Server code for AddDemographics API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDENCOUNTER">
            <summary>Server code for AddEncounter API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETGROUPSEQUENCE">
            <summary>Server code for GetGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETGROUPSEQUENCE">
            <summary>Server code for SetGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETGROUPNUMBER">
            <summary>Server code for GetGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.Globals.GROUPNAME">
            <summary>Server code for GroupName API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETNARRATIVEFORMAT">
            <summary>Server code for GetNarrativeFormat API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETNARRATIVEFORMAT">
            <summary>Server code for SetNarrativeFormat API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETNARRATIVEOUTPUT">
            <summary>Server code for GetNarrativeOutput API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETNARRATIVEOUTPUT">
            <summary>Server code for SetNarrativeOutput API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETNARRATIVECONTEXT">
            <summary>Server code for GetNarrativeContext API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETNARRATIVECONTEXT">
            <summary>Server code for SetNarrativeContext API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETTIMEFORMAT">
            <summary>Server code for GetTimeFormat API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETTIMEFORMAT">
            <summary>Server code for SetTimeFormat API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETTIMEDSECTIONS">
            <summary>Server code for GetTimedSections API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETTIMEDSECTIONS">
            <summary>Server code for SetTimedSections API</summary>
        </member>
        <member name="F:Medicomp.Globals.RTFSTYLE">
            <summary>Server code for RTFStyle API</summary>
        </member>
        <member name="F:Medicomp.Globals.PARAGRAPHSTYLE">
            <summary>Server code for ParagraphStyle API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDITEMTAG">
            <summary>Server code for AddItemtag API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETSHOWITEMTAG">
            <summary>Server code for SetShowItemtag API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETSHOWITEMTAG">
            <summary>Server code for GetShowItemtag API</summary>
        </member>
        <member name="F:Medicomp.Globals.ITEMSTAG">
            <summary>Server code for ItemSTag API</summary>
        </member>
        <member name="F:Medicomp.Globals.ITEMLTAG">
            <summary>Server code for ItemLTag API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETSHOWITEMID">
            <summary>Server code for SetShowItemid API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETSHOWMEDCINID">
            <summary>Server code for SetShowMedcinid API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETVERSION">
            <summary>Server code for GetVersion API</summary>
        </member>
        <member name="F:Medicomp.Globals.RETURNDATA">
            <summary>Server code for ReturnData API</summary>
        </member>
        <member name="F:Medicomp.Globals.MEDCINCALLBACK">
            <summary>Server code for MedcinCallBack API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETGROUPNUMBER">
            <summary>Server code for SetGropupNumber API</summary>
        </member>
        <member name="F:Medicomp.Globals.CLIENTCACHE">
            <summary>Server code for ClientCache API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDDXPROMPT">
            <summary>Server code for AddDxPrompt API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETPATIENTGENERIC">
            <summary>Server code for SetPatientGeneric API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETPATIENT">
            <summary>Server code for SetPatient API</summary>
        </member>
        <member name="F:Medicomp.Globals.CLEARCHARTFINDINGS">
            <summary>
            Server code for ClearChartFindings API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.GETMESSAGESTRING">
            <summary>
            Server code for GetMessageString API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.SETMESSAGESTRING">
            <summary>
            Server code for SetMessageString API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.GETNARRATEOPTIONS">
            <summary>
            Server code for GetNarrateOptions API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.SETNARRATEOPTIONS">
            <summary>
            Server code for SetNarrateOptions API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.NARRATEEX">
            <summary>
            Server code for NarrateEx API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.GETSTATEKEY">
            <summary>
            Server code for GetStateKey API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.RESTORESTATE">
            <summary>
            Server code for RestoreState API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.NARRATEGROUPS">
            <summary>
            Server code for NarrateGroups API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATEEM">
            <summary>
            Server code for ActivateEM API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATEEMPROMPT">
            <summary>
            Server code for ActivateEMPrompt API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CALCULATEEM">
            <summary>
            Server code for CalculateEM API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.ACTIVATEEXPANSIONEX">
            <summary>
            Server code for ActivateExpansionEx API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.LINKFINDINGS">
            <summary>
            Server code for LinkFindings API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.INFO_LATHD">
            <summary>
            Server code for InfoLathd
            </summary>
        </member>
        <member name="F:Medicomp.Globals.BUILDLISTMODE">
            <summary>
            Server code for BuildListMode API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.GETUFTAG">
            <summary>
            Server code for GetUFTag API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.SETUFTAG">
            <summary>
            Server code for SetUFTag API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.TSEARCH">
            <summary>
            Server code for TSearch API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.STERSEPOS">
            <summary>
            Server code for STersePos API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.STERSENEG">
            <summary>
            Server code for TerseNeg API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.PTERSEPOS">
            <summary>
            Server code for PTersePos API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.PTERSENEG">
            <summary>
            Server code for TerseNeg API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.DOSELIST">
            <summary>
            Server code for DoseList API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.BRANDLIST">
            <summary>
            Server code for BrandList API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.DOSE">
            <summary>
            Server code for Dose API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTFLUSH">
            <summary>
            Server code for HistFlush API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTNARRATE">
            <summary>
            Server code for HistNarrate API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTTRANSCRIBEITEM">
            <summary>
            Server code for HistTranscribeItem API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDNARRATE">
            <summary>
            Server code for HistAddNarrate API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDEPISODE">
            <summary>
            Server code for HistAddEpisode API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDVALUE">
            <summary>
            Server code for HisAddValue API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDNOTE">
            <summary>
            Server code for HistAddNote API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDRXSTR">
            <summary>
            Server code for HistAddRxStr API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTDELETE">
            <summary>
            Server code for HistDelete API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTLINKFINDINGS">
            <summary>
            Server code for HistLinkFindings API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDDOCNAME">
            <summary>
            Server code for HistAddDocname API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDENCOUNTER">
            <summary>
            Server code for HistAddEncounter API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTPACKET">
            <summary>
            Server code for HistPAcket API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTACTIVATE">
            <summary>
            Server code for HistActivate API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTACTIVATEDX">
            <summary>
            Server code for HistActivateDx API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTLOCATE">
            <summary>
            Server code for HistLocate API
            </summary>
        </member>
        <member name="F:Medicomp.Globals.HISTACTIVATEWORDSEARCH">
            <summary>Server code for HistActivateWordSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDCHART">
            <summary>Server code for HistAddChart API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDDX">
            <summary>Server code for HistAddDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTCALCULATE">
            <summary>Server code for HistCalculate API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTCLEARCHART">
            <summary>Server code for HistClearChart API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTCLEARCHARTFINDINGS">
            <summary>Server code for HistClearChartFindings API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTCLEARDX">
            <summary>Server code for HistClearDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTHAVEDX">
            <summary>Server code for HistHaveDx API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTHAVELIST">
            <summary>Server code for HistHaveList API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTHAVEWORDSEARCH">
            <summary>Server code for HistHaveWordSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTRELEASEPOOL">
            <summary>Server code for HistReleasePool API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTREMOVECHART">
            <summary>Server code for HistRemoveChart API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTRETRIEVEENCOUNTER">
            <summary>Server code for HistRetrieveEncounter API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTRETRIEVEORDER">
            <summary>Server code for HistRetrieveOrder API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTWORDSEARCH">
            <summary>Server code for HistWordSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTSETPOOLID">
            <summary>Server code for HistSetPoolId API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTSETPOOLPID">
            <summary>Server code for HistSetPoolPid API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTCREATEPOOL">
            <summary>Server code for HistCreatePool API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDORDER">
            <summary>Server code for HistAddOrder API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTDELETEENCOUNTER">
            <summary>Server code for HistDeleteEncounter API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTENCOUNTERLIST">
            <summary>Server code for HistEncounterList API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDFULIST">
            <summary>Server code for HistAddFuList API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETBUILDLISTMODE">
            <summary>Server code for GetBuildListMode API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETGROUPSEQUENCEEX">
            <summary>Server code for GetGroupSequenceEx API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETGROUPSEQUENCEEX">
            <summary>Server code for SetGroupSequenceEx API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETDOCTORID">
            <summary>Server code for SetDoctorID API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETDOCTORNAME">
            <summary>Server code for GetDoctorName API</summary>
        </member>
        <member name="F:Medicomp.Globals.SAVEUDF">
            <summary>Server code for SaveUdf API</summary>
        </member>
        <member name="F:Medicomp.Globals.NEXTUDF">
            <summary>Server code for NextUdf API</summary>
        </member>
        <member name="F:Medicomp.Globals.RTFINDENTLEVEL">
            <summary>Server code for RtfIndentLevel API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTSETDOCTORID">
            <summary>Server code for HistSetDoctorId API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGIMAGESUPPORT">
            <summary>Server code for ImageSupport API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETIMAGEID">
            <summary>Server code for GetImageId API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETIMAGELEN">
            <summary>Server code for GetImageLen API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETIMAGE">
            <summary>Server code for GetImage API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETHOTSPOTSLEN">
            <summary>Server code for GetHotSPotsLen API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETHOTSPOTS">
            <summary>Server code for GetHotSpots API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETLISTITEMSLEN">
            <summary>Server code for GetListItemsLen API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETLISTITEMS">
            <summary>Server code for GetListItems API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDDECORATIONSTYLE">
            <summary>Server code for AddDecorationStyle API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETDECORATIONSTYLE">
            <summary>Server code for SetDecorationStyle API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDNARRATE2">
            <summary>Server code for AddNarate2 API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDNARRATE2EX">
            <summary>Server code for AddNarate2Ex API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTGROUPNUMBER">
            <summary>Server code for HistGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTSETDECORATIONSTYLE">
            <summary>Server code for HistSetDecorationStyle API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDNARRATE2">
            <summary>Server code for HistAddNarrate2 API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDNARRATE2EX">
            <summary>Server code for HistAddNarrate2Ex API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTLIST">
            <summary>Server code for HistList API</summary>
        </member>
        <member name="F:Medicomp.Globals.SEPID">
            <summary>Server code for SepID API</summary>
        </member>
        <member name="F:Medicomp.Globals.MEDISPANEX">
            <summary>Server code for MedispanEx API</summary>
        </member>
        <member name="F:Medicomp.Globals.CHECKALERT">
            <summary>Server code for CheckAlert</summary>
        </member>
        <member name="F:Medicomp.Globals.EM95CAT">
            <summary>Server code for EM95Cat API</summary>
        </member>
        <member name="F:Medicomp.Globals.GPFLAGS">
            <summary>Server code for GpFlags API</summary>
        </member>
        <member name="F:Medicomp.Globals.ICDMAN">
            <summary>Server code for ICDMan API</summary>
        </member>
        <member name="F:Medicomp.Globals.EM95ITEM">
            <summary>Server code for EM95Item API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETSUBGROUPSEQUENCE">
            <summary>Server code for GetSubGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETSUBGROUPSEQUENCE">
            <summary>Server code for SetSubGroupSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMGGETIMAGEIDEX">
            <summary>Server code for GetImageIdEx API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETREFERENCEINFO">
            <summary>Server code for GetReferenceInfo API</summary>
        </member>
        <member name="F:Medicomp.Globals.CODEFROMMEDCIN">
            <summary>Server code for CodeFromMedcin API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETCODEDATE">
            <summary>Server code for SrtCodeDate API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETALERTLOOKBACK">
            <summary>Server code for SetAlertLookBack API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETALERTSUPPRESS">
            <summary>Server code for SetAlertSuppress API</summary>
        </member>
        <member name="F:Medicomp.Globals.FINDINGCGN">
            <summary>Server code for FindingCgn API</summary>
        </member>
        <member name="F:Medicomp.Globals.FINDINGTGN">
            <summary>Server code for FiningTn API</summary>
        </member>
        <member name="F:Medicomp.Globals.BASENARGROUP">
            <summary>Server code for BaseNarGroup API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETITEMDATA">
            <summary>Server code for GetItemData API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTGETITEMDATA">
            <summary>Server code for HistGetItemData API</summary>
        </member>
        <member name="F:Medicomp.Globals.SCREENFORCODES">
            <summary>Server code for ScreenForCodes</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDSEQUENCE">
            <summary>Server code for AddSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDSEQUENCEEX">
            <summary>Server code for AddSequenceEx API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETSEQUENCE">
            <summary>Server code for GetSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDSEQUENCE">
            <summary>Server code for HistAddSequence API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETRTFSTYLES">
            <summary>Server code for SetRtfStyles API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETPARAGRAPHSTYLES">
            <summary>Server code for SetParagraphStyles API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETCHAPTER">
            <summary>Server code for SetChapter</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDCHAPTER">
            <summary>Server code for AddChapter API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDCHAPTER">
            <summary>Server code for HistAddChapter API</summary>
        </member>
        <member name="F:Medicomp.Globals.IMAGESEARCH">
            <summary>Server code for ImageSearch API</summary>
        </member>
        <member name="F:Medicomp.Globals.MAXMSGID">
            <summary>Highest numbered message.</summary>
        </member>
        <member name="F:Medicomp.Globals.CODEFROMITEM">
            <summary>Server code for CodeFromItem API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTCODEFROMITEM">
            <summary>Server code for HistCodeFromItem API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETIMAGEPROPERTIES">
            <summary>Server code for GetImageProperties API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETSUBGROUP">
            <summary>Server code for GetSubGroup API</summary>
        </member>
        <member name="F:Medicomp.Globals.CODEFROMPARMS">
            <summary>Server code for CodeFromParms API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDRANGESCALE">
            <summary>Server code for HistAddRangeScale API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTGETGROUPNUMBER">
            <summary>Server code for HistGetGroupNumber API</summary>
        </member>
        <member name="F:Medicomp.Globals.FORMATDATE">
            <summary>Server code for FormatDate API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTGRIDLAYOUT">
            <summary>Server code for HistGridLayout API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTDATAFILTER">
            <summary>Server code for HistDataFilter API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDSPECIFIER">
            <summary>Server code for HistAddSpecifier API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDSPECIFIER">
            <summary>Server code for HistAddSpecifier API</summary>
        </member>
        <member name="F:Medicomp.Globals.BASEUSERFIND">
            <summary>Server code for BaseUserFinding API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDEMDATA">
            <summary>Server code for AddEMData API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDFINDINGIMAGE">
            <summary>Server code for AddFindingImage API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDFINDINGIMAGE">
            <summary>Server code for HistAddFindingImage API</summary>
        </member>
        <member name="F:Medicomp.Globals.USERFINDINGPROPERTIES">
            <summary>Server code for UserFindingProperties API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETCAPTION">
            <summary>Server code for GetCaption API</summary>
        </member>
        <member name="F:Medicomp.Globals.MEDCINIDFMNODEKEY">
            <summary>Server code for MedcinidFromNodekey API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDNARRATECODE">
            <summary>Server code for AddNarrateCode API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDNARRATECODE">
            <summary>Server code for HistAddNarrateCode API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETCODEDESCRIPTION">
            <summary>Server code for GetCodeDescription API</summary>
        </member>
        <member name="F:Medicomp.Globals.ADDENCOUNTERHEADINGS">
            <summary>Server code for AddEncounterHeadings API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTADDENCOUNTERHEADINGS">
            <summary>Server code for HistAddEncounterHeadings API</summary>
        </member>
        <member name="F:Medicomp.Globals.REGISTERCLIENT">
            <summary>Server code for RegisterClient API</summary>
        </member>
        <member name="F:Medicomp.Globals.GETSERVERPROPERTIES">
            <summary>Server code for GetServerProperties API</summary>
        </member>
        <member name="F:Medicomp.Globals.SETSUBGROUP">
            <summary>Server code for SetSubGroup API</summary>
        </member>
        <member name="F:Medicomp.Globals.HISTSETSUBGROUP">
            <summary>Server code for HistSetSubGroup API</summary>
        </member>
        <member name="F:Medicomp.Globals.COST">
            <summary>Server code for Cost API</summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CCC">
            <summary>Cklinical Care Classification</summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_MEDISPAN">
            <summary>medispan</summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_SNOMED">
            <summary>
            snomed
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_LABCORP">
            <summary>
            labcorp
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICD10">
            <summary>
            icd-10
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICD">
            <summary>
            icd9
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICD2">
            <summary>
            secondary icd9 code
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDOM">
            <summary>
            icdo field for oncology 'Mnnnn/nn'
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDOT">
            <summary>
            icdo/t field for oncology table list
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDH">
            <summary>
            icd9  -  code used if prefix is HIST
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDF">
            <summary>
            icd9  - code used if prefix is FAM_HIST
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDNEC">
            <summary>
            icd9 - not elsewhere classified
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDCAT">
            <summary>
            icd9 - category
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDALT">
            <summary>
            icd9 - alternate - used for duplicates
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDOSPEC">
            <summary>
            icd9 - other specified
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDOTHER">
            <summary>
            icd9 - other
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDPROC">
            <summary>
            icd9 - Volume 3 procedures
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ACC">
            <summary>
            American cardiology code 
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CPT">
            <summary>
            cpt
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CPTMOD">
            <summary>
            cpt code - modifier
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CPTAMOD">
            <summary>
            cpt astm modifier
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_HCPC">
            <summary>
            hcpc - Health Care Procedure Code
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_DSM">
            <summary>
            DSM
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CAS">
            <summary>
            CAS number
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_LOINC">
            <summary>
            Logical Observation Identifier Names and Codes 
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CDT">
            <summary>
            Dental billing code
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_ICDMAN">
            <summary>
            icd manifest
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_FDB">
            <summary>
            First Data Bank
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_MULTUM">
            <summary>
            Multum
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_QUEST">
            <summary>
            Quest Lab Results
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_RXNIN">
            <summary>
            RX-Norm Ingredient
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CVX">
            <summary>
            CDC/HL7 Vaccines Administered
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_UNII">
            <summary>
            Unique Ingredient Identifier
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_RXNSCDF">
            <summary>
            RX-Norm Clinical Drug Form
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_RXNSCD">
            <summary>
            RX-Norm Clinical Drug
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_CVXH">
            <summary>
            CDC/HL7 Vaccines Administered History
            </summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_1STCONSULT">
            <summary>First Consut Reference</summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_NANDA">
            <summary>NANDA</summary>
        </member>
        <member name="F:Medicomp.Globals.CODE_DODUC">
            <summary>DOD Unique Code</summary>
        </member>
        <member name="M:Medicomp.Globals.#ctor">
            <summary>
            Globals constructor - does nothing.
            </summary>
        </member>
        <member name="T:Medicomp.MedcinCache">
            <summary>
            Internal use only.
            </summary>
            <history>
            2008/10/21: Added trap for id == 0 to return null values in case current cache Medcinid equals 0
            </history>
        </member>
        <member name="M:Medicomp.MedcinCache.#ctor(Medicomp.MedcinSocket)">
            <summary>
            Class constructor
            </summary>
            <param name="ms">A reference to the socket.</param>
        </member>
        <member name="M:Medicomp.MedcinCache.Finalize">
            <summary>
            This is the destructor for MedcinCache
            </summary>
        </member>
        <member name="M:Medicomp.MedcinCache.resetCache">
            <summary>
            Resets the cache Medcinid to 0
            </summary>
        </member>
        <member name="M:Medicomp.MedcinCache.getcodelink(System.Int32,Medicomp.CodeLinks)">
            <summary>
            Recovers the code link code string for a given codetype
            </summary>
            <param name="id">The Medcinid</param>
            <param name="type">One of the codetype values</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.termtype(System.Int32)">
            <summary>
            Obtains the terminology type of the given finding
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.rxcode(System.Int32)">
            <summary>
            Retrieves the cached rxcode value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.testcode(System.Int32)">
            <summary>
            Retrieves the cached testcode value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.riskcode(System.Int32)">
            <summary>
            Retrieves the cached riskcode value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.privacy(System.Int32)">
            <summary>
            Retrieves the cached privacy value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.complex(System.Int32)">
            <summary>
            Retrieves the cached complex value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.nodelevel(System.Int32)">
            <summary>
            Retrieves the cached nodelevel value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.subs(System.Int32)">
            <summary>
            Retrieves the cached subs value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.flags(System.Int32)">
            <summary>
            Retrieves the cached flags value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.eflags(System.Int32)">
            <summary>
            Retrieves the cached eflags value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.aflags(System.Int32)">
            <summary>
            Retrieves the cached aflags value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.caflags(System.Int32)">
            <summary>
            Retrieves the cached caflags value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.qflags(System.Int32)">
            <summary>
            Retrieves the cached qflags value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.gpflags(System.Int32)">
            <summary>
            Retrieves the cached gpflags value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.nodekey(System.Int32)">
            <summary>
            Retrieves the cached nodekey value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.specialty(System.Int32)">
            <summary>
            Retrieves the cached specialty value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.unit(System.Int32)">
            <summary>
            Retrieves the cached unit value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="M:Medicomp.MedcinCache.search(System.Int32)">
            <summary>
            Retrieves the cached search value
            </summary>
            <param name="id">The Medcinid</param>
            <returns>The specified cache value is returned</returns>
        </member>
        <member name="T:Medicomp.MedcinCache.codestruct">
            <summary>
            This structure is used internally for code link referencing
            </summary>
        </member>
        <member name="F:Medicomp.MedcinCache.codestruct.codetype">
            <summary>
            This is the codetype value
            </summary>
        </member>
        <member name="F:Medicomp.MedcinCache.codestruct.code">
            <summary>
            This is the code value
            </summary>
        </member>
        <member name="F:Medicomp.MedcinCache.codestruct.mapset">
            <summary>
            This is  the mapset value
            </summary>
        </member>
        <member name="T:Medicomp.MedcinSocket">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="M:Medicomp.MedcinSocket.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for a MedcinSocket
            </summary>
            <param name="host">This should cotain the domain name or dotted IP address of the Medcin server.</param>
            <param name="port">This should contain the port address of the Medcin server.</param>
        </member>
        <member name="M:Medicomp.MedcinSocket.Finalize">
            <summary>
            MedcinSocket destructor
            </summary>
        </member>
        <member name="M:Medicomp.MedcinSocket.readmsgbody(System.Int32,Medicomp.BufferedInput)">
            <summary>
            read message body
            </summary>
            <returns>Returns the buffered data</returns>
        </member>
        <member name="M:Medicomp.MedcinSocket.read">
            <summary>
            read msg header and msg body
            </summary>
            <returns>Returns the message body</returns>
        </member>
        <member name="M:Medicomp.MedcinSocket.read2">
            <summary>
            read msg header and msg body
            </summary>
            <returns>Returns the message body</returns>
        </member>
        <member name="M:Medicomp.MedcinSocket.resetpushbuf(System.Int16)">
            <summary>
            Resets the push buffer
            </summary>
            <param name="function">The server operation code</param>
        </member>
        <member name="M:Medicomp.MedcinSocket.getsendbuflen">
            <summary>
            Gets the length of the send buffer
            </summary>
            <returns>Returns the sendbufpos</returns>
        </member>
        <member name="M:Medicomp.MedcinSocket.pushstring(System.String)">
            <summary>
            Pushes a string onto the send buffer
            </summary>
            <param name="str">The string parameter</param>
        </member>
        <member name="M:Medicomp.MedcinSocket.pushshort(System.Int16)">
            <summary>
            Pushes a short integer onto the send buffer
            </summary>
            <param name="num">The number value</param>
        </member>
        <member name="M:Medicomp.MedcinSocket.pushint(System.Int32)">
            <summary>
            Pushes an integer onto the send buffer
            </summary>
            <param name="num">The integer value</param>
        </member>
        <member name="M:Medicomp.MedcinSocket.pushdouble(System.Double)">
            <summary>
            Pushes a double numeric onto the send buffer
            </summary>
            <param name="dblnum">The number value as a double</param>
        </member>
        <member name="M:Medicomp.MedcinSocket.writepushbuf">
            <summary>
            Sends the sendbuf to the server>
            </summary>
        </member>
        <member name="M:Medicomp.MedcinSocket.LastSocketError">
            <summary>
            Returns the last error encountered
            </summary>
            <returns>This returns the last socket error as a System.Exception object.</returns>
        </member>
        <member name="M:Medicomp.MedcinSocket.SetNoDelay(System.Boolean)">
            <summary>
            Procedure used to enable/disable the Client Socket's NoDelay property
            </summary>
            <param name="state">True to enable the option; False to disable the option.</param>
        </member>
        <member name="P:Medicomp.MedcinSocket.isconnected">
            <summary>
            Property used to get the Socket.Connected property
            </summary>
        </member>
        <member name="T:Medicomp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Medicomp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Medicomp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
